<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://0.0.0.0/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0/" rel="alternate" type="text/html" /><updated>2017-12-29T00:05:18+08:00</updated><id>http://0.0.0.0/</id><title type="html">Jevic</title><subtitle>前路漫漫,忆往昔......</subtitle><author><name>Jevic</name></author><entry><title type="html">CI/CD 之 GitLab CI</title><link href="http://0.0.0.0/2017/11/28/ci-cd-gitlab-ci/" rel="alternate" type="text/html" title="CI/CD 之 GitLab CI" /><published>2017-11-28T17:43:23+08:00</published><updated>2017-11-28T17:43:23+08:00</updated><id>http://0.0.0.0/2017/11/28/ci-cd-gitlab-ci</id><content type="html" xml:base="http://0.0.0.0/2017/11/28/ci-cd-gitlab-ci/">&lt;blockquote&gt;
  &lt;p&gt;接着上篇文章整理，这篇文章主要介绍一下 GitLab CI 相关功能，并通过 GitLab CI 实现自动化构建项目；项目中所用的示例项目已经上传到了 &lt;a href=&quot;https://github.com/mritd/GitLabCI-TestProject&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;一环境准备&quot;&gt;一、环境准备&lt;/h3&gt;

&lt;p&gt;首先需要有一台 GitLab 服务器，然后需要有个项目；这里示例项目以 Spring Boot 项目为例，然后最好有一台专门用来 Build 的机器，实际生产中如果 Build 任务不频繁可适当用一些业务机器进行 Build；本文示例所有组件将采用 Docker 启动， GitLab HA 等不在本文阐述范围内&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Docker Version : 1.13.1&lt;/li&gt;
  &lt;li&gt;GitLab Version : 10.1.4-ce.0&lt;/li&gt;
  &lt;li&gt;GitLab Runner Version : 10.1.0&lt;/li&gt;
  &lt;li&gt;GitLab IP : 172.16.0.37&lt;/li&gt;
  &lt;li&gt;GitLab Runner IP : 172.16.0.36&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;二gitlab-ci-简介&quot;&gt;二、GitLab CI 简介&lt;/h3&gt;

&lt;p&gt;GitLab CI 是 GitLab 默认集成的 CI 功能，GitLab CI 通过在项目内 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitlab-ci.yaml&lt;/code&gt; 配置文件读取 CI 任务并进行相应处理；GitLab CI 通过其称为 GitLab Runner 的 Agent 端进行 build 操作；Runner 本身可以使用多种方式安装，比如使用 Docker 镜像启动等；Runner 在进行 build 操作时也可以选择多种 build 环境提供者；比如直接在 Runner 所在宿主机 build、通过新创建虚拟机(vmware、virtualbox)进行 build等；同时 Runner 支持 Docker 作为 build 提供者，即每次 build 新启动容器进行 build；GitLab CI 其大致架构如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/wejnz.png&quot; alt=&quot;GitLab&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;三搭建-gitlab-服务器&quot;&gt;三、搭建 GitLab 服务器&lt;/h3&gt;

&lt;h4 id=&quot;31gitlab-搭建&quot;&gt;3.1、GitLab 搭建&lt;/h4&gt;

&lt;p&gt;GitLab 搭建这里直接使用 docker compose 启动，compose 配置如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: &lt;span class=&quot;s1&quot;&gt;'2'&lt;/span&gt;
services:
  gitlab:
    image: &lt;span class=&quot;s1&quot;&gt;'gitlab/gitlab-ce:10.1.4-ce.0'&lt;/span&gt;
    restart: always
    container_name: gitlab
    hostname: &lt;span class=&quot;s1&quot;&gt;'git.mritd.me'&lt;/span&gt;
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url &lt;span class=&quot;s1&quot;&gt;'http://git.mritd.me'&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Add any other gitlab.rb configuration here, each on its own line&lt;/span&gt;
    ports:
      - &lt;span class=&quot;s1&quot;&gt;'80:80'&lt;/span&gt;
      - &lt;span class=&quot;s1&quot;&gt;'443:443'&lt;/span&gt;
      - &lt;span class=&quot;s1&quot;&gt;'8022:22'&lt;/span&gt;
    volumes:
      - &lt;span class=&quot;s1&quot;&gt;'./data/gitlab/config:/etc/gitlab'&lt;/span&gt;
      - &lt;span class=&quot;s1&quot;&gt;'./data/gitlab/logs:/var/log/gitlab'&lt;/span&gt;
      - &lt;span class=&quot;s1&quot;&gt;'./data/gitlab/data:/var/opt/gitlab'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;直接启动后，首次登陆需要设置初始密码如下，默认用户为 &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/5go94.png&quot; alt=&quot;gitkab init&quot; /&gt;&lt;/p&gt;

&lt;p&gt;登陆成功后创建一个用户(该用户最好给予 Admin 权限，以后操作以该用户为例)，并且创建一个测试 Group 和 Project，如下所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/vtyhi.png&quot; alt=&quot;Create User&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/3b7gl.png&quot; alt=&quot;Test Project&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;32增加示例项目&quot;&gt;3.2、增加示例项目&lt;/h4&gt;

&lt;p&gt;这里示例项目采用 Java 的 SpringBoot 项目，并采用 Gradle 构建，其他语言原理一样；&lt;strong&gt;如果不熟悉 Java 的没必要死磕此步配置，任意语言(最好 Java)整一个能用的 Web 项目就行，并不强求一定 Java 并且使用 Gradle 构建，以下只是一个样例项目&lt;/strong&gt;；SpringBoot 可以采用 &lt;a href=&quot;https://start.spring.io/&quot;&gt;Spring Initializr&lt;/a&gt; 直接生成(依赖要加入 WEB)，如下所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/0wx6d.png&quot; alt=&quot;Spring Initializr&quot; /&gt;&lt;/p&gt;

&lt;p&gt;将项目导入 IDEA，然后创建一个 index 示例页面，主要修改如下&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;build.gradle&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;buildscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;springBootVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1.5.8.RELEASE'&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mavenCentral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;classpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'java'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'eclipse'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'idea'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.springframework.boot'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'me.mritd'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0.0.1-SNAPSHOT'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sourceCompatibility&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.8&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mavenCentral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'org.springframework.boot:spring-boot-starter'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'org.springframework.boot:spring-boot-starter-web'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'org.springframework.boot:spring-boot-starter-thymeleaf'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testCompile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'org.springframework.boot:spring-boot-starter-test'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;新建一个 HomeController&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mritd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TestProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*******************************************************************************
 * Copyright (c) 2005-2017 Mritd, Inc.
 * TestProject
 * me.mritd.TestProject
 * Created by mritd on 2017/11/24 下午12:23.
 * Description: 
 *******************************************************************************/&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomeController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;index&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;templates 下新建 index.html&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Title&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Test...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后项目整体结构如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/5k12p.png&quot; alt=&quot;TestProject&quot; /&gt;&lt;/p&gt;

&lt;p&gt;执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;assemble&lt;/code&gt; Task 打包出可执行 jar 包，并运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;java -jar TestProject-0.0.1-SNAPSHOT.jar&lt;/code&gt; 测试下能启动访问页面即可&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/xoj3d.png&quot; alt=&quot;TestProject assemble&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后将项目提交到 GitLab 后如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/1fuex.png&quot; alt=&quot;init Project&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;四gitlab-ci-配置&quot;&gt;四、GitLab CI 配置&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;针对这一章节创建基础镜像以及项目镜像，这里仅以 Java 项目为例；其他语言原理相通，按照其他语言对应的运行环境修改即可&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;41增加-runner&quot;&gt;4.1、增加 Runner&lt;/h4&gt;

&lt;p&gt;GitLab CI 在进行构建时会将任务下发给 Runner，让 Runner 去执行；所以先要添加一个 Runner，Runner 这里采用 Docker Compose 启动，build 方式也使用 Docker 方式 Build；compose 文件如下&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;gitlab-runner&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gitlab-runner&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gitlab/gitlab-runner:alpine-v10.1.0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;network_mode&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;host&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/var/run/docker.sock:/var/run/docker.sock&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./config.toml:/etc/gitlab-runner/config.toml&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;extra_hosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;git.mritd.me:172.16.0.37&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;在启动前，我们需要先 touch 一下这个 config.toml 配置文件&lt;/strong&gt;；该文件是 Runner 的运行配置，此后 Runner 所有配置都会写入这个文件(不 touch 出来 docker-compose 发现不存在会挂载一个目录进去，导致 Runner 启动失败)；启动 docker-compose 后，&lt;strong&gt;需要进入容器执行注册，让 Runner 主动去连接 GitLab 服务器&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 生成 Runner 配置文件&lt;/span&gt;
touch config.toml
&lt;span class=&quot;c&quot;&gt;# 启动 Runner&lt;/span&gt;
docker-compose up &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 激活 Runner&lt;/span&gt;
docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; gitlab-runner gitlab-runner register
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在执行上一条激活命令后，会按照提示让你输入一些信息；&lt;strong&gt;首先输入 GitLab 地址，然后是 Runner Token，Runner Token 可以从 GitLab 设置中查看&lt;/strong&gt;，如下所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/mfqg7.png&quot; alt=&quot;Runner Token&quot; /&gt;&lt;/p&gt;

&lt;p&gt;整体注册流程如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/r7xay.png&quot; alt=&quot;Runner registry&quot; /&gt;&lt;/p&gt;

&lt;p&gt;注册完成后，在 GitLab Runner 设置中就可以看到刚刚注册的 Runner，如下所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/xv03e.png&quot; alt=&quot;Runner List&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Runner 注册成功后会将配置写入到 config.toml 配置文件；由于两个测试宿主机都没有配置内网 DNS，所以为了保证 runner 在使用 docker build 时能正确的找到 GitLab 仓库地址，还需要增加一个 docker 的 host 映射( &lt;code class=&quot;highlighter-rouge&quot;&gt;extra_hosts&lt;/code&gt; )；同时为了能调用 宿主机 Docker 和持久化 build 的一些缓存还挂载了一些文件和目录；完整的 配置如下(配置文件可以做一些更高级的配置，具体参考 &lt;a href=&quot;https://docs.gitlab.com/runner/configuration/advanced-configuration.html&quot;&gt;官方文档&lt;/a&gt; )&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;config.toml&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-toml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;py&quot;&gt;concurrent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;check_interval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[[runners]]&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Test Runner&quot;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://git.mritd.me&quot;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c279ec1ac08aec98c7141c7cf2d474&quot;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;executor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;docker&quot;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;builds_dir&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/gitlab/runner-builds&quot;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;cache_dir&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/gitlab/runner-cache&quot;&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;[runners.docker]&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;tls_verify&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;debian&quot;&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;privileged&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;disable_cache&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;shm_size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;volumes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;[&quot;/data/gitlab-runner:/gitlab&quot;,&quot;/var/run/docker.sock:/var/run/docker.sock&quot;,&quot;/data/maven_repo:/data/repo&quot;,&quot;/data/maven_repo:/data/maven&quot;,&quot;/data/gradle:/data/gradle&quot;,&quot;/data/sonar_cache:/root/.sonar&quot;,&quot;/data/androidsdk:/usr/local/android&quot;,&quot;/data/node_modules:/data/node_modules&quot;]&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;extra_hosts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;[&quot;git.mritd.me:172.16.0.37&quot;]&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;[runners.cache]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意，这里声明的 Volumes 会在每个运行的容器中都生效；也就是说 build 时新开启的每个容器都会被挂载这些目录&lt;/strong&gt;；修改完成后重启 runner 容器即可，由于 runner 中没啥可保存的东西，所以可以直接 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose down &amp;amp;&amp;amp; docker-compose up -d&lt;/code&gt; 重启&lt;/p&gt;

&lt;h4 id=&quot;42创建基础镜像&quot;&gt;4.2、创建基础镜像&lt;/h4&gt;

&lt;p&gt;由于示例项目是一个 Java 项目，而且是采用 Spring Boot 的，所以该项目想要运行起来只需要一个 java 环境即可，中间件已经被打包到了 jar 包中；以下是一个作为基础运行环境的 openjdk 镜像的 Dockerfile&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM alpine:edge 

LABEL &lt;span class=&quot;nv&quot;&gt;maintainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mritd &amp;lt;mritd1234@gmail.com&amp;gt;&quot;&lt;/span&gt;

ENV JAVA_HOME /usr/lib/jvm/java-1.8-openjdk
ENV PATH &lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin

RUN apk add &lt;span class=&quot;nt&quot;&gt;--update&lt;/span&gt; bash curl &lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;wget ca-certificates unzip &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        openjdk8 font-adobe-100dpi ttf-dejavu fontconfig &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /var/cache/apk/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;

CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bash&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;这个 openjdk Dockerfile 升级到了 8.151 版本，并且集成了一些字体相关的软件，以解决在 Java 中某些验证码库无法运行问题，详见 &lt;a href=&quot;https://mritd.me/2017/09/27/alpine-3.6-openjdk-8-bug/&quot;&gt;Alpine 3.6 OpenJDK 8 Bug&lt;/a&gt;&lt;/strong&gt;；使用这个 Dockerfile，在当前目录执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker build -t mritd/openjdk:8 .&lt;/code&gt; build 一个 openjdk8 的基础镜像，然后将其推送到私服，或者 Docker Hub 即可&lt;/p&gt;

&lt;h4 id=&quot;43创建项目镜像&quot;&gt;4.3、创建项目镜像&lt;/h4&gt;

&lt;p&gt;有了基本的 openjdk 的 docker 镜像后，针对于项目每次 build 都应该生成一个包含发布物的 docker 镜像，所以对于项目来说还需要一个项目本身的 Dockerfile；&lt;strong&gt;项目的 Dockerfile 有两种使用方式；一种是动态生成 Dockerfile，然后每次使用新生成的 Dockerfile 去 build；还有一种是写一个通用的 Dockerfile，build 时利用 ARG 参数传入变量&lt;/strong&gt;；这里采用第二种方式，以下为一个可以反复使用的 Dockerfile&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM mritd/openjdk:8-144-01

MAINTAINER mritd &amp;lt;mritd1234@gmail.com&amp;gt;

ARG PROJECT_BUILD_FINALNAME

ENV TZ &lt;span class=&quot;s1&quot;&gt;'Asia/Shanghai'&lt;/span&gt;
ENV PROJECT_BUILD_FINALNAME &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_BUILD_FINALNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;


COPY build/libs/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_BUILD_FINALNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.jar /&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_BUILD_FINALNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.jar

CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bash&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;-c&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;java -jar /&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_BUILD_FINALNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.jar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;该 Dockerfile 通过声明一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;PROJECT_BUILD_FINALNAME&lt;/code&gt; 变量来表示项目的发布物名称；然后将其复制到根目录下，最终利用 java 执行这个 jar 包；所以每次 build 之前只要能拿到项目发布物的名称即可&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;44gradle-修改&quot;&gt;4.4、Gradle 修改&lt;/h4&gt;

&lt;p&gt;上面已经创建了一个标准的通用型 Dockerfile，每次 build 镜像只要传入 &lt;code class=&quot;highlighter-rouge&quot;&gt;PROJECT_BUILD_FINALNAME&lt;/code&gt; 这个最终发布物名称即可；对于发布物名称来说，最好不要固定死；当然不论是 Java 还是其他语言的项目我们都能将最终发布物变成一个固定名字，最不济可以写脚本重命名一下；但是不建议那么干，最好保留版本号信息，以便于异常情况下进入容器能够分辨；对于当前 Java 项目来说，想要拿到 &lt;code class=&quot;highlighter-rouge&quot;&gt;PROJECT_BUILD_FINALNAME&lt;/code&gt; 很简单，我们只需要略微修改一下 Gradle 的 build 脚本，让其每次打包 jar 包时将项目的名称及版本号导出到文件中即可；同时这里也加入了镜像版本号的处理，Gradle 脚本修改如下&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;build.gradle 最后面增加如下&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;bootRepackage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;mainClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'me.mritd.TestProject.TestProjectApplication'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;executable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;doLast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;envFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;build/tmp/PROJECT_ENV&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Create ${archivesBaseName} ENV File ===&amp;gt; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;envFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createNewFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Export ${archivesBaseName} Build Version ===&amp;gt; ${version}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;envFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;export PROJECT_BUILD_FINALNAME=${archivesBaseName}-${version}\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Generate Docker image tag...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;envFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;export BUILD_DATE=`date +%Y%m%d%H%M%S`\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;envFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;export IMAGE_NAME=mritd/test:`echo \${CI_BUILD_REF_NAME} | tr '/' '-'`-`echo \${CI_COMMIT_SHA} | cut -c1-8`-\${BUILD_DATE}\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;envFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;export LATEST_IMAGE_NAME=mritd/test:latest\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;这一步操作实际上是修改了 &lt;code class=&quot;highlighter-rouge&quot;&gt;bootRepackage&lt;/code&gt; 这个 Task(不了解 Gradle 或者不是 Java 项目的请忽略)，在其结束后创建了一个叫 &lt;code class=&quot;highlighter-rouge&quot;&gt;PROJECT_ENV&lt;/code&gt; 的文件，里面实际上就是写入了一些 bash 环境变量声明，以方便后面 source 一下这个文件拿到一些变量，然后用户 build 镜像使用&lt;/strong&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;PROJECT_ENV&lt;/code&gt; 最终生成如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_BUILD_FINALNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;TestProject-0.0.1-SNAPSHOT
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BUILD_DATE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;date +%Y%m%d%H%M%S&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mritd/test:&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CI_BUILD_REF_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; | tr &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;-&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CI_COMMIT_SHA&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; | cut &lt;span class=&quot;nt&quot;&gt;-c1-8&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BUILD_DATE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LATEST_IMAGE_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mritd/test:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/gr6kc.png&quot; alt=&quot;PROJECT_ENV&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;45创建-ci-配置文件&quot;&gt;4.5、创建 CI 配置文件&lt;/h4&gt;

&lt;p&gt;一切准备就绪以后，就可以编写 CI 脚本了；GitLab 依靠读取项目根目录下的 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitlab-ci.yml&lt;/code&gt; 文件来执行相应的 CI 操作；以下为测试项目的 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitlab-ci.yml&lt;/code&gt; 配置&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 调试开启&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#before_script:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#  - pwd&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#  - env&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$CI_PROJECT_NAME/$CI_COMMIT_REF_NAME-$CI_COMMIT_SHA&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;stages&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;deploy&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;auto-build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mritd/build:2.1.1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gradle --no-daemon clean assemble&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mritd/docker-kubectl:v1.7.4&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;deploy&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;source build/tmp/PROJECT_ENV&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo &quot;Build Docker Image ==&amp;gt; ${IMAGE_NAME}&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker build -t ${IMAGE_NAME} --build-arg PROJECT_BUILD_FINALNAME=${PROJECT_BUILD_FINALNAME} .&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    - docker push ${IMAGE_NAME}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker tag ${IMAGE_NAME} ${LATEST_IMAGE_NAME}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    - docker push ${LATEST_IMAGE_NAME}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    - docker rmi ${IMAGE_NAME} ${LATEST_IMAGE_NAME}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    - kubectl --kubeconfig ${KUBE_CONFIG} set image deployment/test test=$IMAGE_NAME&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;develop&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/^chore.*$/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;关于 CI 配置的一些简要说明如下&lt;/strong&gt;&lt;/p&gt;

&lt;h5 id=&quot;stages&quot;&gt;stages&lt;/h5&gt;

&lt;p&gt;stages 字段定义了整个 CI 一共有哪些阶段流程，以上的 CI 配置中，定义了该项目的 CI 总共分为 &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;deploy&lt;/code&gt; 两个阶段；GitLab CI 会根据其顺序执行对应阶段下的所有任务；&lt;strong&gt;在正常生产环境流程可以定义很多个，比如可以有 &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;publish&lt;/code&gt;，甚至可能有代码扫描的 &lt;code class=&quot;highlighter-rouge&quot;&gt;sonar&lt;/code&gt; 阶段等；这些阶段没有任何限制，完全是自定义的&lt;/strong&gt;，上面的阶段定义好后在 CI 中表现如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/8c7gs.png&quot; alt=&quot;stages&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;task&quot;&gt;task&lt;/h5&gt;

&lt;p&gt;task 隶属于 stages 之下；也就是说一个阶段可以有多个任务，任务执行顺序默认不指定会并发执行；对于上面的 CI 配置来说 &lt;code class=&quot;highlighter-rouge&quot;&gt;auto-build&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy&lt;/code&gt; 都是 task，他们通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;stage: xxxx&lt;/code&gt; 这个标签来指定他们隶属于哪个 stage；当 Runner 使用 Docker 作为 build 提供者时，我们可以在 task 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;image&lt;/code&gt; 标签下声明该 task 要使用哪个镜像运行，不指定则默认为 Runner 注册时的镜像(这里是 debian)；&lt;strong&gt;同时 task 还有一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;tags&lt;/code&gt; 的标签，该标签指明了这个任务将可以在哪些 Runner 上运行；这个标签可以从 Runner 页面看到，实际上就是 Runner 注册时输入的哪个 tag；对于某些特殊的项目，比如 IOS 项目，则必须在特定机器上执行，所以此时指定 tags 标签很有用&lt;/strong&gt;，当 task 运行后如下图所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/qzvlh.png&quot; alt=&quot;Task&quot; /&gt;&lt;/p&gt;

&lt;p&gt;除此之外 task 还能指定 &lt;code class=&quot;highlighter-rouge&quot;&gt;only&lt;/code&gt; 标签用于限定那些分支才能触发这个 task，如果分支名字不满足则不会触发；&lt;strong&gt;默认情况下，这些 task 都是自动执行的，如果感觉某些任务太过危险，则可以通过增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;when: manual&lt;/code&gt; 改为手动执行；注意: 手动执行被 GitLab 认为是高权限的写操作，所以只有项目管理员才能手动运行一个 task，直白的说就是管理员才能点击&lt;/strong&gt;；手动执行如下图所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/vcjci.png&quot; alt=&quot;manual task&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;cache&quot;&gt;cache&lt;/h5&gt;

&lt;p&gt;cache 这个参数用于定义全局那些文件将被 cache；&lt;strong&gt;在 GitLab CI 中，跨 stage 是不能保存东西的；也就是说在第一步 build 的操作生成的 jar 包，到第二部打包 docker image 时就会被删除；GitLab 会保证每个 stage 中任务在执行时都将工作目录(Docker 容器 中)还原到跟 GitLab 代码仓库中一模一样，多余文件及变更都会被删除&lt;/strong&gt;；正常情况下，第一步 build 生成 jar 包应当立即推送到 nexus 私服；但是这里测试没有搭建，所以只能放到本地；但是放到本地下一个 task 就会删除它，所以利用 &lt;code class=&quot;highlighter-rouge&quot;&gt;cache&lt;/code&gt; 这个参数将 &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; 目录 cache 住，保证其跨 stage 也能存在&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关于 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitlab-ci.yml&lt;/code&gt; 具体配置更完整的请参考 &lt;a href=&quot;https://docs.gitlab.com/ee/ci/yaml/&quot;&gt;官方文档&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;五其他相关&quot;&gt;五、其他相关&lt;/h3&gt;

&lt;h4 id=&quot;51gitlab-内置环境变量&quot;&gt;5.1、GitLab 内置环境变量&lt;/h4&gt;

&lt;p&gt;上面已经基本搞定了一个项目的 CI，但是有些变量可能并未说清楚；比如在创建的 &lt;code class=&quot;highlighter-rouge&quot;&gt;PROJECT_ENV&lt;/code&gt; 文件中引用了 &lt;code class=&quot;highlighter-rouge&quot;&gt;${CI_COMMIT_SHA}&lt;/code&gt; 变量；这种变量其实是 GitLab CI 的内置隐藏变量，这些变量在每次 CI 调用 Runner 运行某个任务时都会传递到对应的 Runner 的执行环境中；&lt;strong&gt;也就是说这些变量在每次的任务容器 SHELL 环境中都会存在，可以直接引用&lt;/strong&gt;，具体的完整环境变量列表可以从 &lt;a href=&quot;https://docs.gitlab.com/ee/ci/variables/&quot;&gt;官方文档&lt;/a&gt; 中获取；如果想知道环境变量具体的值，实际上可以通过在任务执行前用 &lt;code class=&quot;highlighter-rouge&quot;&gt;env&lt;/code&gt; 指令打印出来，如下所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/la9kn.png&quot; alt=&quot;env&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/0175j.png&quot; alt=&quot;env task&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;52gitlab-自定义环境变量&quot;&gt;5.2、GitLab 自定义环境变量&lt;/h4&gt;

&lt;p&gt;在某些情况下，我们希望 CI 能自动的发布或者修改一些东西；比如将 jar 包上传到 nexus、将 docker 镜像 push 到私服；这些动作往往需要一个高权限或者说有可写入对应仓库权限的账户来支持，但是这些账户又不想写到项目的 CI 配置里；因为这样很不安全，谁都能看到；此时我们可以将这些敏感变量写入到 GitLab 自定义环境变量中，GitLab 会像对待内置变量一样将其传送到 Runner 端，以供我们使用；GitLab 中自定义的环境变量可以有两种，一种是项目级别的，只能够在当前项目使用，如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/ennug.png&quot; alt=&quot;project env&quot; /&gt;&lt;/p&gt;

&lt;p&gt;另一种是组级别的，可以在整个组内的所有项目中使用，如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/si8ig.png&quot; alt=&quot;group env&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这两种变量添加后都可以在 CI 的脚本中直接引用&lt;/p&gt;

&lt;h4 id=&quot;53kubernetes-集成&quot;&gt;5.3、Kubernetes 集成&lt;/h4&gt;

&lt;p&gt;对于 Kubernetes 集成实际上有两种方案，一种是对接 Kubernetes 的 api，纯代码实现；另一种取巧的方案是调用 kubectl 工具，用 kubectl 工具来实现滚动升级；这里采用后一种取巧的方式，将 kubectl 二进制文件封装到镜像中，然后在 deploy 阶段使用这个镜像直接部署就可以&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/bu17r.png&quot; alt=&quot;kubectl&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;mritd/docker-kubectl:v1.7.4&lt;/code&gt; 这个镜像的 Dockerfile 如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM docker:dind 

LABEL &lt;span class=&quot;nv&quot;&gt;maintainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mritd &amp;lt;mritd1234@gmail.com&amp;gt;&quot;&lt;/span&gt;

ARG &lt;span class=&quot;nv&quot;&gt;TZ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Asia/Shanghai&quot;&lt;/span&gt;

ENV TZ &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TZ&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

ENV KUBE_VERSION v1.8.0

RUN apk upgrade &lt;span class=&quot;nt&quot;&gt;--update&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk add bash tzdata wget ca-certificates &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; wget https://storage.googleapis.com/kubernetes-release/release/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KUBE_VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/bin/linux/amd64/kubectl &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; /usr/local/bin/kubectl &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; chmod +x /usr/local/bin/kubectl &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ln &lt;span class=&quot;nt&quot;&gt;-sf&lt;/span&gt; /usr/share/zoneinfo/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TZ&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; /etc/localtime &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TZ&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /etc/timezone &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /var/cache/apk/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;

CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/bin/bash&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里面的 &lt;code class=&quot;highlighter-rouge&quot;&gt;${KUBE_CONFIG}&lt;/code&gt; 是一个自定义的环境变量，对于测试环境我将配置文件直接挂载入了容器中，然后 &lt;code class=&quot;highlighter-rouge&quot;&gt;${KUBE_CONFIG}&lt;/code&gt; 只是指定了一个配置文件位置，实际生产环境中可以选择将配置文件变成自定义环境变量使用&lt;/p&gt;

&lt;h4 id=&quot;54gitlab-ci-总结&quot;&gt;5.4、GitLab CI 总结&lt;/h4&gt;

&lt;p&gt;关于 GitLab CI 上面已经讲了很多，但是并不全面，也不算太细致；因为这东西说起来实际太多了，现在目测已经 1W 多字了；以下总结一下 GitLab CI 的总体思想，当思路清晰了以后，我想后面的只是查查文档自己试一试就行了&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CS 架构&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitLab 作为 Server 端，控制 Runner 端执行一系列的 CI 任务；代码 clone 等无需关心，GitLab 会自动处理好一切；Runner 每次都会启动新的容器执行 CI 任务&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;容器即环境&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在 Runner 使用 Docker build 的前提下；&lt;strong&gt;所有依赖切换、环境切换应当由切换不同镜像实现，即 build 那就使用 build 的镜像，deploy 就用带有 deploy 功能的镜像；通过不同镜像容器实现完整的环境隔离&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CI即脚本&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;不同的 CI 任务实际上就是在使用不同镜像的容器中执行 SHELL 命令，自动化 CI 就是执行预先写好的一些小脚本&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;敏感信息走环境变量&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一切重要的敏感信息，如账户密码等，不要写到 CI 配置中，直接放到 GitLab 的环境变量中；GitLab 会保证将其推送到远端 Runner 的 SHELL 变量中&lt;/p&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;</content><author><name>Jevic</name></author><summary type="html">接着上篇文章整理，这篇文章主要介绍一下 GitLab CI 相关功能，并通过 GitLab CI 实现自动化构建项目；项目中所用的示例项目已经上传到了 GitHub</summary></entry><entry><title type="html">ohmydocker 镜像加速</title><link href="http://0.0.0.0/2017/11/14/ohmydocker/" rel="alternate" type="text/html" title="ohmydocker 镜像加速" /><published>2017-11-14T14:43:30+08:00</published><updated>2017-11-14T14:43:30+08:00</updated><id>http://0.0.0.0/2017/11/14/ohmydocker</id><content type="html" xml:base="http://0.0.0.0/2017/11/14/ohmydocker/">&lt;blockquote&gt;
  &lt;p&gt;国外一直有台服务器闲置，准备用来做 Docker 镜像下载加速，写了个小工具打成了镜像放了出来 😀&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ohmydocker 镜像基于 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker:dind&lt;/code&gt;，也就是所谓的 &lt;strong&gt;Dcoker in Docker&lt;/strong&gt; 俄罗斯套娃镜像，使用方法如下:&lt;/p&gt;

&lt;h4 id=&quot;1启动镜像&quot;&gt;1、启动镜像&lt;/h4&gt;

&lt;p&gt;镜像启动后相当于镜像里运行了一个 Docker daemon 进程，&lt;strong&gt;Docker in Docker 需要使用 privileged 启动，如果觉得不安全请不要使用本镜像(拒绝喷子)&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;--privileged&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; ohmydocker &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 1028:1028 mritd/ohmydocker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;2拉取镜像&quot;&gt;2、拉取镜像&lt;/h4&gt;

&lt;p&gt;ohmydocker 启动后将会暴露一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;1028&lt;/code&gt; 的 docker api 端口(tcp)，此时直接通过该端口连接容器内的 Docker daemon 进行 pull 镜像即可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; LOCAL_IP:1028 pull gcr.io/google_containers/kubernetes-dashboard-init-amd64:v1.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;镜像 pull 完成后会保存在容器里，并不会直接保存到宿主机，所以还要 save 出来&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; LOCAL_IP:1028 save gcr.io/google_containers/kubernetes-dashboard-init-amd64:v1.0.1 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; kubernetes-dashboard-init-amd64.tar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;镜像 save 成 tar 文件后复制到其他主机进行 load 即可&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如果你感觉该镜像对你有所帮助，欢迎请我喝杯咖啡&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/zhifubao.png&quot; alt=&quot;支付宝&quot; /&gt;&lt;/p&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;</content><author><name>Jevic</name></author><summary type="html">国外一直有台服务器闲置，准备用来做 Docker 镜像下载加速，写了个小工具打成了镜像放了出来 😀</summary></entry><entry><title type="html">CI/CD 之 Dockerfile</title><link href="http://0.0.0.0/2017/11/12/ci-cd-dockerfile/" rel="alternate" type="text/html" title="CI/CD 之 Dockerfile" /><published>2017-11-12T22:46:53+08:00</published><updated>2017-11-12T22:46:53+08:00</updated><id>http://0.0.0.0/2017/11/12/ci-cd-dockerfile</id><content type="html" xml:base="http://0.0.0.0/2017/11/12/ci-cd-dockerfile/">&lt;blockquote&gt;
  &lt;p&gt;最近准备整理一下关于 CI/CD 的相关文档，写一个关于 CI/CD 的系列文章，这篇先从最基本的 Dockerfile 书写开始，本系列文章默认读者已经熟悉 Docker、Kubernetes 相关工具&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;一基础镜像选择&quot;&gt;一、基础镜像选择&lt;/h3&gt;

&lt;p&gt;这里的基础镜像指的是实际项目运行时的基础环境镜像，比如 Java 的 JDK 基础镜像、Nodejs 的基础镜像等；在制作项目的基础镜像时，我个人认为应当考虑一下几点因素:&lt;/p&gt;

&lt;h4 id=&quot;11可维护性&quot;&gt;1.1、可维护性&lt;/h4&gt;

&lt;p&gt;可维护性应当放在首要位置，如果在制作基础镜像时，选择了一个你根本不熟悉的基础镜像，或者说你完全不知道这个基础镜像里有哪些环境变量、Entrypoint 脚本做了什么时，请果断放弃这个基础镜像，选择一个你自己更加熟悉的基础镜像，不要为以后挖坑；还有就是如果对应的应用已经有官方镜像，那么尽量采用官方的，因为你可以省去维护 &lt;strong&gt;自己造的轮子&lt;/strong&gt; 的精力，&lt;strong&gt;除非你对基础镜像制作已经得心应手，否则请不要造轮子&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;12稳定性&quot;&gt;1.2、稳定性&lt;/h4&gt;

&lt;p&gt;基础镜像稳定性实际上是个很微妙的话题，因为普遍来说成熟的 Linux 发行版都很稳定；但是对于不同发行版镜像之间还是存在差异的，比如 alpine 的镜像用的是 musl libc，而 debian 用的是 glibc，某些依赖 glibc 的程序可能无法在 alpine 上工作；alpine 版本的 nginx 能使用 http2，debian 版本 nginx 则不行，因为 openssl 版本不同；甚至在相同发行版不同版本之间也会有差异，譬如 openjdk alpine 3.6 版本 java 某些图形库无法工作，在 alpine edge 上安装最新的 openjdk 却没问题等；所以稳定性这个话题对于基础镜像自己来说，他永远稳定，但是对于你的应用来说，则不同基础镜像会产生不同的稳定性；&lt;strong&gt;最后，如果你完全熟悉你的应用，甚至应用层代码也是你写的，那么你可以根据你的习惯和喜好去选择基础镜像，因为你能把控应用运行时依赖；否则的话，请尽量选择 debian 这种比较成熟的发行版作为基础镜像，因为它在普遍上兼容性更好一点；还有尽量不要使用 CentOS 作为基础镜像，因为他的体积将会成为大规模网络分发瓶颈&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;13易用性&quot;&gt;1.3、易用性&lt;/h4&gt;

&lt;p&gt;易用性简单地说就是是否可调试，因为有些极端情况下，并不是应用只要运行起来就没事了；可能出现一些很棘手的问题需要你进入容器进行调试，此时你的镜像易用性就会体现出来；譬如一个 Java 项目你的基础镜像是 JRE，那么 JDK 的调试工具将完全不可用，还有就是如果你的基础镜像选择了 alpine，那么它默认没有 bash，可能你的脚本无法在里面工作；&lt;strong&gt;所有在选择基础镜像的时候最好也考虑一下未来极端情况的可调试性&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;二格式化及注意事项&quot;&gt;二、格式化及注意事项&lt;/h3&gt;

&lt;h4 id=&quot;21书写格式&quot;&gt;2.1、书写格式&lt;/h4&gt;

&lt;p&gt;Dockerfile 类似一堆 shell 命令的堆砌，实际上在构建阶段也可以简单的看做是一个 shell 脚本；但是为了更高效的利用缓存层，通常都会在一个 RUN 命令中连续书写大量的脚本命令，这时候一个良好的书写格式可以使 Dockerfile 看起来更加清晰易懂，也方便以后维护；我个人比较推崇的格式是按照 &lt;a href=&quot;https://github.com/nginxinc/docker-nginx/blob/master/mainline/alpine/Dockerfile&quot;&gt;nginx-alpine官方 Dockerfile&lt;/a&gt; 的样式来书写，这个 Dockerfile 大致包括了以下规则:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;换行以 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt; 开头保持每行对齐，看起来干净又舒服&lt;/li&gt;
  &lt;li&gt;安装大量软件包时，每个包一行并添加换行符，虽然会造成很多行，但是看起来很清晰；也可根据实际需要增加每行软件包个数，但是建议不要超过 5 个&lt;/li&gt;
  &lt;li&gt;configure 的配置尽量放在统一的变量里，并做好合理换行，方便以后集中化修改&lt;/li&gt;
  &lt;li&gt;注释同样和对应命令对齐，并保持单行长度不超出视野，即不能造成拉动滚动条才能看完你的注释&lt;/li&gt;
  &lt;li&gt;alpine 作为基础镜像的话，必要时可以使用 scanelf 来减少安装依赖&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除了以上规则，说下我个人的一些小习惯，仅供参考:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;当需要编译时，尽量避免多次 &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; 目录，必须进入目录编译时可以开启子 shell 使其完成后还停留但在当前目录，避免 &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; 进去再 &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; 回来，如&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;xxxx &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./configure &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ../
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;可以变为&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;xxx &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./configure &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;同样意义的操作统一放在相邻行处理，比如镜像需要安装两个软件，做两次 &lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt;，那么没必要安装完一个删除一个安装包，可以在最后统一的进行清理动作，简而言之是 &lt;strong&gt;合并具有相同目的的命令&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;尽量使用网络资源，也就是说尽量不要在当前目录下放置那种二进制文件，然后进行 &lt;code class=&quot;highlighter-rouge&quot;&gt;ADD&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;COPY&lt;/code&gt; 操作，因为一般 Dockerfile 都是存放到 git 仓库的，同目录下的二进制变动会给 git 仓库带来很大负担&lt;/li&gt;
  &lt;li&gt;调整好镜像时区，最好内置一下 bash，可能以后临时进入容器会处理一些东西&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt; 时指定具体的版本号，防止后续升级或者更换主机 build 造成不可预知的结果&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;22合理利用缓存&quot;&gt;2.2、合理利用缓存&lt;/h4&gt;

&lt;p&gt;Docker 在 build 或者说是拉取镜像时是以层为单位作为缓存的；通俗的讲，一个 Dockerfile 命令就会形成一个镜像层(不绝对)，尤其是 &lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt; 命令形成的镜像层可能会很大；此时应当合理组织 Dockerfile，以便每次拉取或者 build 时高效的利用缓存层&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;重复 build 的缓存利用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Docker 在进行 build 操作时，对于同一个 Dockerfile 来说，&lt;strong&gt;只要执行过一次 build，那么下次 build 将从命令更改处开始&lt;/strong&gt;；简单的例子如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM alpine:3.6

COPY test.jar /test.jar

RUN apk add openjdk8 &lt;span class=&quot;nt&quot;&gt;--no-cache&lt;/span&gt;

CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;java&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;-jar&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;/test.tar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;假设我们的项目发布物为 &lt;code class=&quot;highlighter-rouge&quot;&gt;test.jar&lt;/code&gt;，那么以上 Dockerfile 放到 CI 里每次 build 都会相当慢，原因就是 &lt;strong&gt;每次更改的发布物为 &lt;code class=&quot;highlighter-rouge&quot;&gt;test.jar&lt;/code&gt;，那么也就是相当于每次 build 失效位置从 &lt;code class=&quot;highlighter-rouge&quot;&gt;COPY&lt;/code&gt; 命令开始，这将导致下面的 &lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt; 命令每次都会不走缓存重复执行，当 &lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt; 命令涉及网络下载等复杂动作时这会极大拖慢 build 进度&lt;/strong&gt;，解决方案很简单，移动一下 &lt;code class=&quot;highlighter-rouge&quot;&gt;COPY&lt;/code&gt; 命令即可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM alpine:3.6

RUN apk add openjdk8 &lt;span class=&quot;nt&quot;&gt;--no-cache&lt;/span&gt;

COPY test.jar /test.jar

CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;java&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;-jar&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;/test.tar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时每次 build 失效位置仍然是 &lt;code class=&quot;highlighter-rouge&quot;&gt;COPY&lt;/code&gt; 命令，但是上面的 &lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt; 命令层已经被 build 过，而且无任何改变，那么每次 build 时 &lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt; 命令都会命中缓存层从而秒过&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;多次拉取的缓存利用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同上面的 build 一个原理，在 Docker 进行 pull 操作时，也是按照镜像层来进行缓存；当项目进行更新版本，那么只要当前主机 pull 过一次上一个版本的项目，那么下一次将会直接 pull 变更的层，也就是说上面安装 openjdk 的层将会复用；这种情况为了看起来清晰一点也可以将 Dockerfile 拆分成两个&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenJDK8 base&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM alpine:3.6

RUN RUN apk add openjdk8 &lt;span class=&quot;nt&quot;&gt;--no-cache&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Java Web image&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM xxx.com/base/openjdk8

COPY test.jar /test.jar

CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;java&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;-jar&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;/test.tar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;三镜像安全&quot;&gt;三、镜像安全&lt;/h3&gt;

&lt;h4 id=&quot;31用户切换&quot;&gt;3.1、用户切换&lt;/h4&gt;

&lt;p&gt;当我们不在 Dockerfile 中指定内部用户时，那么默认以 root 用户运行；由于 Linux 系统权限判定是根据 UID、GID 来进行的，也就是说 &lt;strong&gt;容器里面的 root 用户有权限访问宿主机 root 用户的东西；所以一旦挂载错误(比如将 &lt;code class=&quot;highlighter-rouge&quot;&gt;/root/.ssh&lt;/code&gt; 目录挂载进去)，并且里面的用户具有高权限那么就很危险&lt;/strong&gt;；通常习惯是遵从最小权限原则，也就是说尽量保证容器里的程序以低权限运行，此时可以在 Dockerfile 中通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;USER&lt;/code&gt; 命令指定后续运行命令所使用的账户，通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;WORKDIR&lt;/code&gt; 指定后续命令在那个目录下执行&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM alpine:3.6

RUN apk add openjdk8 &lt;span class=&quot;nt&quot;&gt;--no-cache&lt;/span&gt;

COPY test.jar /test.jar

USER testuser:testuser

WORKDIR /tmp

CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;java&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;-jar&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;/test.tar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;有时直接使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;USER&lt;/code&gt; 指令来切换用户并不算方便，比如你的镜像需要挂载外部存储，如果外部存储中文件权限被意外修改，你的程序接下来可能就会启动失败；此时可以使用一下两个小工具来动态切换用户，巧妙的做法是 &lt;strong&gt;在正式运行程序之前先使用 root 用户进行权限修复，然后使用以下工具切换到具体用户运行&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tianon/gosu&quot;&gt;gosu&lt;/a&gt; Golang 实现的一个切换用户身份执行其他程序的小工具&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hlovdal/su-exec&quot;&gt;su-exec&lt;/a&gt; C 实现的一个更轻量级的用户切换工具&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体的 Dockerfile 可以参见我写的 elasticsearch 的 &lt;a href=&quot;https://github.com/mritd/dockerfile/blob/master/elasticsearch/docker-entrypoint.sh&quot;&gt;entrypoint 脚本&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;32容器运行时&quot;&gt;3.2、容器运行时&lt;/h4&gt;

&lt;p&gt;并不是每个容器都一定能切换到低权限用户来运行的，可能某些程序就希望在 root 下运行，此时一定要确认好容器是否需要 &lt;strong&gt;特权模式&lt;/strong&gt; 运行；因为一旦开启了特权模式运行的容器将有能力修改宿主机内核参数等重要设置；具体的 Docker 容器运行设置前请参考 &lt;a href=&quot;https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;关于 Dockerfile 方面暂时总结出这些，可能也会有遗漏，待后续补充吧；同时欢迎各位提出相关修改意见 😊&lt;/p&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;</content><author><name>Jevic</name></author><summary type="html">最近准备整理一下关于 CI/CD 的相关文档，写一个关于 CI/CD 的系列文章，这篇先从最基本的 Dockerfile 书写开始，本系列文章默认读者已经熟悉 Docker、Kubernetes 相关工具</summary></entry><entry><title type="html">Teleport 跳板机部署</title><link href="http://0.0.0.0/2017/11/09/set-up-teleport/" rel="alternate" type="text/html" title="Teleport 跳板机部署" /><published>2017-11-09T16:47:51+08:00</published><updated>2017-11-09T16:47:51+08:00</updated><id>http://0.0.0.0/2017/11/09/set-up-teleport</id><content type="html" xml:base="http://0.0.0.0/2017/11/09/set-up-teleport/">&lt;blockquote&gt;
  &lt;p&gt;由于业务需求，以前账号管理混乱，所以很多人有生产服务器的 root 权限；所以目前需要一个能 ssh 登录线上服务器的工具，同时具有简单的审计功能；找了好久找到了这个小工具，以下记录一下搭建教程&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;一环境准备&quot;&gt;一、环境准备&lt;/h3&gt;

&lt;p&gt;目前准备了 3 台虚拟机，两台位于内网 NAT 之后，一台位于公网可以直接链接；使用时客户端通过工具连接到公网跳板机上，然后实现自动跳转到内网任意主机；并且具有相应的操作回放审计，通过宿主机账户限制用户权限&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;ip&lt;/th&gt;
      &lt;th&gt;节点&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;92.223.67.84&lt;/td&gt;
      &lt;td&gt;公网 Master&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;172.16.0.80&lt;/td&gt;
      &lt;td&gt;内网 Master&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;172.16.0.81&lt;/td&gt;
      &lt;td&gt;内网 Node&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;二teleport-工作模式&quot;&gt;二、Teleport 工作模式&lt;/h3&gt;

&lt;p&gt;Teleport 工作时从宏观上看是以集群为单位，也就是说&lt;strong&gt;公网算作一个集群，内网算作另一个集群，内网集群通过 ssh 隧道保持跟公网的链接状态，同时内网机群允许公网集群用户连接&lt;/strong&gt;，大体工作模式如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/hsnj8.png&quot; alt=&quot;Teleport 工作模式&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;三搭建公网-master&quot;&gt;三、搭建公网 Master&lt;/h3&gt;

&lt;h4 id=&quot;31配置-systemd&quot;&gt;3.1、配置 Systemd&lt;/h4&gt;

&lt;p&gt;首先下载相关可执行文件并复制到 Path 目录下，然后创建一下配置目录等&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://github.com/gravitational/teleport/releases/download/v2.3.5/teleport-v2.3.5-linux-amd64-bin.tar.gz
&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-zxvf&lt;/span&gt; teleport-v2.3.5-linux-amd64-bin.tar.gz
mv teleport/tctl teleport/teleport teleport/tsh /usr/local/bin
mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /etc/teleport /data/teleport
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后为了让服务后台运行创建一个 systemd service 配置文件&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /etc/systemd/system/teleport.service &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
[Unit]
Description=Teleport SSH Service
After=network.target

[Service]
Type=simple
Restart=always
ExecStart=/usr/local/bin/teleport start -c /etc/teleport/teleport.yaml

[Install]
WantedBy=multi-user.target
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;32配置-teleport&quot;&gt;3.2、配置 Teleport&lt;/h4&gt;

&lt;p&gt;Systemd 配置完成后，就需要写一个 Teleport 的配置文件来让 Teleport 启动，具体选项含义可以参考 &lt;a href=&quot;https://gravitational.com/teleport/docs/2.3/admin-guide/&quot;&gt;官方文档&lt;/a&gt;；以下为我的配置样例&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# By default, this file should be stored in /etc/teleport.yaml&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This section of the configuration file applies to all teleport&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# services.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;teleport&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# nodename allows to assign an alternative name this node can be reached by.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# by default it's equal to hostname&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;nodename&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mritd.master&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Data directory where Teleport keeps its data, like keys/users for&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# authentication (if using the default BoltDB back-end)&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;data_dir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/data/teleport&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# one-time invitation token used to join a cluster. it is not used on&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# subsequent starts&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;auth_token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jYektagNTmhjv9Dh&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# when running in multi-homed or NATed environments Teleport nodes need&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# to know which IP it will be reachable at by other nodes&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;advertise_ip&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;92.223.67.84&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# list of auth servers in a cluster. you will have more than one auth server&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# if you configure teleport auth to run in HA configuration&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;auth_servers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.0.0:3025&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.0.0:3025&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Teleport throttles all connections to avoid abuse. These settings allow&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# you to adjust the default limits&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;connection_limits&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;max_connections&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1000&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;max_users&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;250&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Logging configuration. Possible output values are 'stdout', 'stderr' and&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 'syslog'. Possible severity values are INFO, WARN and ERROR (default).&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;stdout&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;severity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;INFO&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Type of storage used for keys. You need to configure this to use etcd&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# backend if you want to run Teleport in HA configuration.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bolt&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Cipher algorithms that the server supports. This section only needs to be&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# set if you want to override the defaults.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ciphers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aes128-ctr&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aes192-ctr&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aes256-ctr&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aes128-gcm@openssh.com&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;arcfour256&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;arcfour128&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Key exchange algorithms that the server supports. This section only needs&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# to be set if you want to override the defaults.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;kex_algos&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;curve25519-sha256@libssh.org&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ecdh-sha2-nistp256&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ecdh-sha2-nistp384&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ecdh-sha2-nistp521&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;diffie-hellman-group14-sha1&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;diffie-hellman-group1-sha1&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Message authentication code (MAC) algorithms that the server supports.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# This section only needs to be set if you want to override the defaults.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mac_algos&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hmac-sha2-256-etm@openssh.com&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hmac-sha2-256&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hmac-sha1&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hmac-sha1-96&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This section configures the 'auth service':&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;auth_service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Turns 'auth' role on. Default is 'yes'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;authentication&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# default authentication type. possible values are 'local', 'oidc' and 'saml'&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# only local authentication (Teleport's own user DB) is supported in the open&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# source version&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;local&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# second_factor can be off, otp, or u2f&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;second_factor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;otp&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# this section is used if second_factor is set to 'u2f'&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#u2f:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    # app_id must point to the URL of the Teleport Web UI (proxy) accessible&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    # by the end users&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    app_id: https://localhost:3080&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    # facets must list all proxy servers if there are more than one deployed&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    facets:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    - https://localhost:3080&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# IP and the port to bind to. Other Teleport nodes will be connecting to&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# this port (AKA &quot;Auth API&quot; or &quot;Cluster API&quot;) to validate client&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# certificates&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;listen_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.0.0:3025&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Pre-defined tokens for adding new nodes to a cluster. Each token specifies&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# the role a new node will be allowed to assume. The more secure way to&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# add nodes is to use `ttl node add --ttl` command to generate auto-expiring&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# tokens.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# We recommend to use tools like `pwgen` to generate sufficiently random&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# tokens of 32+ byte length.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;proxy,node:jYektagNTmhjv9Dh&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;auth:jYektagNTmhjv9Dh&quot;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Optional &quot;cluster name&quot; is needed when configuring trust between multiple&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# auth servers. A cluster name is used as part of a signature in certificates&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# generated by this CA.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# By default an automatically generated GUID is used.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# IMPORTANT: if you change cluster_name, it will invalidate all generated&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# certificates and keys (may need to wipe out /var/lib/teleport directory)&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;cluster_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;mritd&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This section configures the 'node service':&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;ssh_service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Turns 'ssh' role on. Default is 'yes'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# IP and the port for SSH service to bind to.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;listen_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.0.0:3022&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# See explanation of labels in &quot;Labeling Nodes&quot; section below&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# List of the commands to periodically execute. Their output will be used as node labels.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# See &quot;Labeling Nodes&quot; section below for more information.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;arch&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;# this command will add a label like 'arch=x86_64' to a node&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;uname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;-p&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;period&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1h0m0s&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# enables reading ~/.tsh/environment before creating a session. by default&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# set to false, can be set true here or as a command line flag.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;permit_user_env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This section configures the 'proxy servie'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;proxy_service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Turns 'proxy' role on. Default is 'yes'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# SSH forwarding/proxy address. Command line (CLI) clients always begin their&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# SSH sessions by connecting to this port&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;listen_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.0.0:3023&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Reverse tunnel listening address. An auth server (CA) can establish an&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# outbound (from behind the firewall) connection to this address.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# This will allow users of the outside CA to connect to behind-the-firewall&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# nodes.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tunnel_listen_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.0.0:3024&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# The HTTPS listen address to serve the Web UI and also to authenticate the&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# command line (CLI) users via password+HOTP&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;web_listen_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.0.0:3080&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# TLS certificate for the HTTPS connection. Configuring these properly is&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# critical for Teleport security.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#https_key_file: /var/lib/teleport/webproxy_key.pem&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#https_cert_file: /var/lib/teleport/webproxy_cert.pem&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后启动 Teleport 即可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;teleport
systemctl start teleport
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果启动出现如下错误&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;error: Could not load host key: /etc/ssh/ssh_host_ecdsa_key
error: Could not load host key: /etc/ssh/ssh_host_ed25519_key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;请执行 ssh-keygen 命令自行生成相关秘钥&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; ecdsa &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; /etc/ssh/ssh_host_ecdsa_key
ssh-keygen &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; ed25519 &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; /etc/ssh/ssh_host_ed25519_key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;33添加用户&quot;&gt;3.3、添加用户&lt;/h4&gt;

&lt;p&gt;公网这台 Teleport 将会作为主要的接入机器，所以在此节点内添加的用户将有权限登录所有集群，包括内网的另一个集群；所以为了方便以后操作先添加一个用户&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 添加一个用户名为 mritd 的用户，该用户在所有集群具有 root 用户权限&lt;/span&gt;
tctl &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; /etc/teleport/teleport.yaml users add mritd root
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;添加成功后会返回一个 OTP 认证初始化地址，浏览器访问后可以使用 Google 扫描 OTP 二维码从而在登录时增加一层 OTP 认证&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/chuyf.png&quot; alt=&quot;OTP CMD&quot; /&gt;&lt;/p&gt;

&lt;p&gt;访问该地址后初始化密码及 OTP&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/czwmd.png&quot; alt=&quot;init OTP&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;四搭建内网-master&quot;&gt;四、搭建内网 Master&lt;/h3&gt;

&lt;p&gt;内网搭建 Master 和公网类似，只不过为了安全将所有 &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0.0&lt;/code&gt; 的地址全部换成内网 IP 即可，以下为内网的配置信息&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# By default, this file should be stored in /etc/teleport.yaml&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This section of the configuration file applies to all teleport&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# services.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;teleport&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# nodename allows to assign an alternative name this node can be reached by.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# by default it's equal to hostname&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;nodename&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mritd.test1&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Data directory where Teleport keeps its data, like keys/users for&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# authentication (if using the default BoltDB back-end)&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;data_dir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/data/teleport&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# one-time invitation token used to join a cluster. it is not used on&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# subsequent starts&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;auth_token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jYektagNTmhjv9Dh&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# when running in multi-homed or NATed environments Teleport nodes need&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# to know which IP it will be reachable at by other nodes&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;advertise_ip&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;172.16.0.80&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# list of auth servers in a cluster. you will have more than one auth server&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# if you configure teleport auth to run in HA configuration&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;auth_servers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;172.16.0.80:3025&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Teleport throttles all connections to avoid abuse. These settings allow&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# you to adjust the default limits&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;connection_limits&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;max_connections&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1000&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;max_users&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;250&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Logging configuration. Possible output values are 'stdout', 'stderr' and&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 'syslog'. Possible severity values are INFO, WARN and ERROR (default).&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;stdout&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;severity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;INFO&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Type of storage used for keys. You need to configure this to use etcd&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# backend if you want to run Teleport in HA configuration.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bolt&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Cipher algorithms that the server supports. This section only needs to be&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# set if you want to override the defaults. &lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ciphers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aes128-ctr&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aes192-ctr&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aes256-ctr&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aes128-gcm@openssh.com&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;arcfour256&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;arcfour128&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Key exchange algorithms that the server supports. This section only needs&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# to be set if you want to override the defaults.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;kex_algos&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;curve25519-sha256@libssh.org&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ecdh-sha2-nistp256&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ecdh-sha2-nistp384&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ecdh-sha2-nistp521&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;diffie-hellman-group14-sha1&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;diffie-hellman-group1-sha1&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Message authentication code (MAC) algorithms that the server supports.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# This section only needs to be set if you want to override the defaults.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mac_algos&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hmac-sha2-256-etm@openssh.com&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hmac-sha2-256&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hmac-sha1&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hmac-sha1-96&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This section configures the 'auth service':&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;auth_service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Turns 'auth' role on. Default is 'yes'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;authentication&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# default authentication type. possible values are 'local', 'oidc' and 'saml'&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# only local authentication (Teleport's own user DB) is supported in the open&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# source version&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;local&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# second_factor can be off, otp, or u2f&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;second_factor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;otp&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# this section is used if second_factor is set to 'u2f'&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#u2f:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    # app_id must point to the URL of the Teleport Web UI (proxy) accessible&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    # by the end users&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    app_id: https://localhost:3080&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    # facets must list all proxy servers if there are more than one deployed&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    facets:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    - https://localhost:3080&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# IP and the port to bind to. Other Teleport nodes will be connecting to&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# this port (AKA &quot;Auth API&quot; or &quot;Cluster API&quot;) to validate client&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# certificates&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;listen_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;172.16.0.80:3025&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Pre-defined tokens for adding new nodes to a cluster. Each token specifies&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# the role a new node will be allowed to assume. The more secure way to&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# add nodes is to use `ttl node add --ttl` command to generate auto-expiring&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# tokens.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# We recommend to use tools like `pwgen` to generate sufficiently random&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# tokens of 32+ byte length.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;proxy,node:jYektagNTmhjv9Dh&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;auth:jYektagNTmhjv9Dh&quot;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Optional &quot;cluster name&quot; is needed when configuring trust between multiple&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# auth servers. A cluster name is used as part of a signature in certificates&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# generated by this CA.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# By default an automatically generated GUID is used.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# IMPORTANT: if you change cluster_name, it will invalidate all generated&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# certificates and keys (may need to wipe out /var/lib/teleport directory)&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;cluster_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;nat&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This section configures the 'node service':&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;ssh_service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Turns 'ssh' role on. Default is 'yes'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# IP and the port for SSH service to bind to.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;listen_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;172.16.0.80:3022&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# See explanation of labels in &quot;Labeling Nodes&quot; section below&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# List of the commands to periodically execute. Their output will be used as node labels.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# See &quot;Labeling Nodes&quot; section below for more information.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;arch&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;# this command will add a label like 'arch=x86_64' to a node&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;uname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;-p&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;period&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1h0m0s&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# enables reading ~/.tsh/environment before creating a session. by default&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# set to false, can be set true here or as a command line flag.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;permit_user_env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This section configures the 'proxy servie'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;proxy_service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Turns 'proxy' role on. Default is 'yes'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# SSH forwarding/proxy address. Command line (CLI) clients always begin their&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# SSH sessions by connecting to this port&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;listen_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;172.16.0.80:3023&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Reverse tunnel listening address. An auth server (CA) can establish an&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# outbound (from behind the firewall) connection to this address.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# This will allow users of the outside CA to connect to behind-the-firewall&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# nodes.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tunnel_listen_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;172.16.0.80:3024&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# The HTTPS listen address to serve the Web UI and also to authenticate the&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# command line (CLI) users via password+HOTP&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;web_listen_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;172.16.0.80:3080&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# TLS certificate for the HTTPS connection. Configuring these properly is&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# critical for Teleport security.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#https_key_file: /var/lib/teleport/webproxy_key.pem&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#https_cert_file: /var/lib/teleport/webproxy_cert.pem&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;配置完成后直接启动即可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;teleport
systemctl start teleport
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;五将内网集群链接至公网&quot;&gt;五、将内网集群链接至公网&lt;/h3&gt;

&lt;p&gt;上文已经讲过，Teleport 通过公网链接内网主机的方式是让内网集群向公网打通一条 ssh 隧道，然后再进行通讯；具体配置如下&lt;/p&gt;

&lt;h4 id=&quot;51公网-master-开启授信集群&quot;&gt;5.1、公网 Master 开启授信集群&lt;/h4&gt;

&lt;p&gt;在公网 Master 增加 Token 配置，以允许持有该 Token 的其他内网集群连接到此，修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/teleport/teleport.yaml&lt;/code&gt; 增加一个 token 即可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tokens:
    - &lt;span class=&quot;s2&quot;&gt;&quot;proxy,node:jYektagNTmhjv9Dh&quot;&lt;/span&gt;
    - &lt;span class=&quot;s2&quot;&gt;&quot;auth:jYektagNTmhjv9Dh&quot;&lt;/span&gt;
    - &lt;span class=&quot;s2&quot;&gt;&quot;trusted_cluster:xiomwWcrKinFw4Vs&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后重启 Teleport&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl restart teleport
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;52内网-master-链接公网-master&quot;&gt;5.2、内网 Master 链接公网 Master&lt;/h4&gt;

&lt;p&gt;当公网集群开启了允许其他集群链接后，内网集群只需要创建配置进行连接即可，创建配置(cluster.yaml)如下&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# cluster.yaml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;trusted_cluster&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v2&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# the trusted cluster name MUST match the 'cluster_name' setting of the&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# cluster&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;local_cluster&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# this field allows to create tunnels that are disabled, but can be enabled later.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# the token expected by the &quot;main&quot; cluster:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;xiomwWcrKinFw4Vs&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# the address in 'host:port' form of the reverse tunnel listening port on the&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# &quot;master&quot; proxy server:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;tunnel_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;92.223.67.84:3024&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# the address in 'host:port' form of the web listening port on the&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# &quot;master&quot; proxy server:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;web_proxy_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;92.223.67.84:3080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行以下命令使内网集群通过 ssh 隧道连接到公网集群&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tctl &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; /etc/teleport/teleport.yaml create /etc/teleport/cluster.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意，如果在启动公网和内网集群时没有指定受信的证书( &lt;code class=&quot;highlighter-rouge&quot;&gt;https_cert_file&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;https_key_file&lt;/code&gt; )，那么默认 Teleport 将会生成一个自签名证书，此时在 create 受信集群时将会产生如下错误:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;the trusted cluster uses misconfigured HTTP/TLS certificate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时需要在 &lt;strong&gt;待添加集群(内网)&lt;/strong&gt; 启动时增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;--insecure&lt;/code&gt; 参数，即 Systemd 配置修改如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unit]
&lt;span class=&quot;nv&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Teleport SSH Service
&lt;span class=&quot;nv&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;network.target

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Service]
&lt;span class=&quot;nv&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;simple
&lt;span class=&quot;nv&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always
&lt;span class=&quot;nv&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/bin/teleport start &lt;span class=&quot;nt&quot;&gt;--insecure&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; /etc/teleport/teleport.yaml

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Install]
&lt;span class=&quot;nv&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后再进行 create 就不会报错&lt;/p&gt;

&lt;h3 id=&quot;六添加其他节点&quot;&gt;六、添加其他节点&lt;/h3&gt;

&lt;p&gt;两台节点打通后，此时如果有其他机器则可以将其加入到对应集群中，以下以另一台内网机器为例&lt;/p&gt;

&lt;p&gt;由于在主节点 &lt;code class=&quot;highlighter-rouge&quot;&gt;auth_service&lt;/code&gt; 中已经预先指定了一个 static Token 用于其他节点加入( &lt;code class=&quot;highlighter-rouge&quot;&gt;proxy,node:jYektagNTmhjv9Dh&lt;/code&gt; )，所以其他节点只需要使用这个 Token 加入即可，在另一台内网主机上修改 Systemd 配置如下，然后启动即可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unit]
&lt;span class=&quot;nv&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Teleport SSH Service
&lt;span class=&quot;nv&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;network.target

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Service]
&lt;span class=&quot;nv&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;simple
&lt;span class=&quot;nv&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always
&lt;span class=&quot;nv&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/bin/teleport start &lt;span class=&quot;nt&quot;&gt;--roles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;node,proxy &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                                        &lt;span class=&quot;nt&quot;&gt;--token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;jYektagNTmhjv9Dh &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                                        &lt;span class=&quot;nt&quot;&gt;--auth-server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;172.16.0.80

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Install]
&lt;span class=&quot;nv&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时在内网的 Master 上可以查看到 Node 已经加入&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;test1.node ➜ tctl &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; /etc/teleport/teleport.yaml nodes &lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;Hostname    UUID                                 Address          Labels
&lt;span class=&quot;nt&quot;&gt;-----------&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;------------------------------------&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;----------------&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-----------------------&lt;/span&gt;
test2.node  abc786fe-9a60-4480-80f7-8edc20710e58 172.16.0.81:3022
mritd.test1 be9080fb-bdba-4823-9fb6-294e0b0dcce3 172.16.0.80:3022 &lt;span class=&quot;nv&quot;&gt;arch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;x86_64,role&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;七连接测试&quot;&gt;七、连接测试&lt;/h3&gt;

&lt;h4 id=&quot;71web-测试&quot;&gt;7.1、Web 测试&lt;/h4&gt;

&lt;p&gt;Teleport 支持 Web 页面访问，直接访问 &lt;code class=&quot;highlighter-rouge&quot;&gt;https://公网IP:3080&lt;/code&gt;，然后登陆即可，登陆后如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/9yf6k.png&quot; alt=&quot;Web login&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过 Cluster 选项可以切换不同集群，点击后面的用户名可以选择不同用户登录到不同主机(用户授权在添加用户时控制)，登陆成功后如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/m7hz5.png&quot; alt=&quot;Login Success&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过 Teleport 进行的所有操作可以通过审计菜单进行操作回放&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/c8a74.png&quot; alt=&quot;Audit&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;72命令行测试&quot;&gt;7.2、命令行测试&lt;/h4&gt;

&lt;p&gt;类 Uninx 系统下我们还是习惯使用终端登录，终端登录需要借助 Teleport 的命令行工具 &lt;code class=&quot;highlighter-rouge&quot;&gt;tsh&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;tsh&lt;/code&gt; 在下载的 release 压缩版中已经有了，具体使用文档请自行 help 和参考官方文档，以下为简单的使用示例&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;登录跳板机: 短时间内只需要登录一次即可，登录时需要输入密码及 OTP 口令&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TELEPORT_PROXY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;92.223.67.84
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TELEPORT_USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mritd
tsh login &lt;span class=&quot;nt&quot;&gt;--insecure&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;登录主机: 完成上一步 login 后就可以免密码登录任意主机&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# cluster 名字是上面设置的，在 web 界面也能看到&lt;/span&gt;
tsh ssh &lt;span class=&quot;nt&quot;&gt;--cluster&lt;/span&gt; nat root@test2.node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;复制文件: &lt;strong&gt;复制文件时不显示进度，并非卡死&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tsh scp &lt;span class=&quot;nt&quot;&gt;--cluster&lt;/span&gt; nat teleport-v2.3.5-linux-amd64-bin.tar.gz root@test2.node:/

-&amp;gt; teleport-v2.3.5-linux-amd64-bin.tar.gz &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;16797035&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;</content><author><name>Jevic</name></author><summary type="html">由于业务需求，以前账号管理混乱，所以很多人有生产服务器的 root 权限；所以目前需要一个能 ssh 登录线上服务器的工具，同时具有简单的审计功能；找了好久找到了这个小工具，以下记录一下搭建教程</summary></entry><entry><title type="html">Kubernetes 深度学习笔记</title><link href="http://0.0.0.0/2017/11/03/deep-learning-on-kubernetes/" rel="alternate" type="text/html" title="Kubernetes 深度学习笔记" /><published>2017-11-03T17:37:13+08:00</published><updated>2017-11-03T17:37:13+08:00</updated><id>http://0.0.0.0/2017/11/03/deep-learning-on-kubernetes</id><content type="html" xml:base="http://0.0.0.0/2017/11/03/deep-learning-on-kubernetes/">&lt;blockquote&gt;
  &lt;p&gt;本文主要记录下 Kubernetes 下运行深度学习框架如 Tensorflow、Caffe2 等一些坑，纯总结性文档&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;一先决条件&quot;&gt;一、先决条件&lt;/h3&gt;

&lt;p&gt;Kubernetes 运行深度学习应用实际上要解决的唯一问题就是 GPU 调用，以下只描述 Nvidia 相关的问题以及解决方法；要想完成 Kubernetes 对 GPU 调用，首先要满足以下条件:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Nvidia 显卡驱动安装正确&lt;/li&gt;
  &lt;li&gt;CUDA 安装正确&lt;/li&gt;
  &lt;li&gt;Nvidia Docker 安装正确&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于 Nvidia 驱动和 CUDA 请自行查找安装方法，如果这两部都搞不定，那么不用继续了&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;还有一点需要注意: &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/lib&lt;/code&gt; 这个目录不能处于单独分区中，具体原因下面阐述&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;二nvidia-docker-安装&quot;&gt;二、Nvidia Docker 安装&lt;/h3&gt;

&lt;p&gt;在安装 Nvidia Docker 之前，请确保 Nvidia 驱动以及 CUDA 安装成功，并且 &lt;code class=&quot;highlighter-rouge&quot;&gt;nvidia-smi&lt;/code&gt; 能正确显示，如下图所示(来源于网络)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNc79ly1fl3vz0yt6tj30wy0mg4qp.jpg&quot; alt=&quot;nvidia-smi&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nvidia Docker 安装极其简单，具体可参考 &lt;a href=&quot;https://github.com/NVIDIA/nvidia-docker&quot;&gt;官方文档&lt;/a&gt;，安装完成后请自行按照官方文档描述进行测试，这一步一般不会出现问题&lt;/p&gt;

&lt;p&gt;如果测试成功后，&lt;strong&gt;请查看 &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/lib/nvidia-docker/volumes&lt;/code&gt;&lt;/strong&gt; 目录下是否有文件，&lt;strong&gt;如果没有，那就意味着 Nvidia Docker 并未生成相关的驱动文件成功，需要单独执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker volume create --driver=nvidia-docker --name=nvidia_driver_$(modinfo -F version nvidia)&lt;/code&gt; 以生成该文件；该命令生成的方式是将已经安装到系统的相关文件硬链接至此，所以要求 &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/lib&lt;/code&gt; 目录不能在单独的分区&lt;/strong&gt;；驱动生成完成后应该会产生类似 &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/lib/nvidia-docker/volumes/nvidia_driver/375.66&lt;/code&gt; 的目录结构&lt;/p&gt;

&lt;h3 id=&quot;三kubernetes-配置&quot;&gt;三、Kubernetes 配置&lt;/h3&gt;

&lt;p&gt;当所有基础环境就绪后，最后需要开启 Kubernetes 对 GPU 支持；Kubernetes GPU 文档可以参考 &lt;a href=&quot;https://kubernetes.io/docs/tasks/manage-gpus/scheduling-gpus&quot;&gt;这里&lt;/a&gt;，实际主要就是在 kubelet 启动时增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;--feature-gates=&quot;Accelerators=true&quot;&lt;/code&gt; 参数，如下所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcly1fl4zj170jxj31is0z8ahj.jpg&quot; alt=&quot;Accelerators&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所有节点全部修改完成后重启 kubelet 即可，&lt;strong&gt;如果一台机器上有不同型号的显卡，同时希望 Pod 能区别使用不同的 GPU 则可以按照 &lt;a href=&quot;https://kubernetes.io/docs/tasks/manage-gpus/scheduling-gpus/#api&quot;&gt;官方文档&lt;/a&gt; 增加相应设置&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;四deployment-设置&quot;&gt;四、Deployment 设置&lt;/h3&gt;

&lt;p&gt;Deployment 部署采用一个 Tensorflow 镜像作为示例，部署配置如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: tensorflow
  labels:
    name: tensorflow
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: tensorflow
    spec:
      containers:
        - name: tensorflow
          image: tensorflow/tensorflow:1.4.0-rc0-gpu
          imagePullPolicy: IfNotPresent
          &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bash&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;-c&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;sleep 999999&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
          ports:
            - name: tensorflow
              containerPort: 8888
          resources: 
            limits: 
              alpha.kubernetes.io/nvidia-gpu: 1
          volumeMounts:
            - mountPath: /usr/local/nvidia
              name: nvidia-driver
            - mountPath: /dev/nvidia0
              name: nvidia0
            - mountPath: /dev/nvidia-uvm
              name: nvidia-uvm
            - mountPath: /dev/nvidia-uvm-tools
              name: nvidia-uvm-tools
            - mountPath: /dev/nvidiactl
              name: nvidiactl
      volumes:
        - name: nvidia-driver
          hostPath:
            path: /var/lib/nvidia-docker/volumes/nvidia_driver/375.66
        - name: nvidia0
          hostPath:
            path: /dev/nvidia0
        - name: nvidia-uvm
          hostPath:
            path: /dev/nvidia-uvm
        - name: nvidia-uvm-tools
          hostPath:
            path: /dev/nvidia-uvm-tools
        - name: nvidiactl
          hostPath:
            path: /dev/nvidiactl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Deployment 中运行的 Pod 需要挂载对应的宿主机设备文件以及驱动文件才能正确的调用宿主机 GPU，所以一定要确保前几步生成的相关驱动文件等没问题；如果有多个 nvidia 显卡的话可能需要挂载多个 nvidia 设备&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pod 运行成功后可执行以下代码测试 GPU 调用&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tensorflow&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Hello, TensorFlow!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;成功后截图如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcly1fl501nwxhyj31kw0ti7nd.jpg&quot; alt=&quot;Tensorflow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;</content><author><name>Jevic</name></author><summary type="html">本文主要记录下 Kubernetes 下运行深度学习框架如 Tensorflow、Caffe2 等一些坑，纯总结性文档</summary></entry><entry><title type="html">Kubernetes 1.8 kube-proxy 开启 ipvs</title><link href="http://0.0.0.0/2017/10/10/kube-proxy-use-ipvs-on-kubernetes-1.8/" rel="alternate" type="text/html" title="Kubernetes 1.8 kube-proxy 开启 ipvs" /><published>2017-10-10T17:19:04+08:00</published><updated>2017-10-10T17:19:04+08:00</updated><id>http://0.0.0.0/2017/10/10/kube-proxy-use-ipvs-on-kubernetes-1.8</id><content type="html" xml:base="http://0.0.0.0/2017/10/10/kube-proxy-use-ipvs-on-kubernetes-1.8/">&lt;blockquote&gt;
  &lt;p&gt;Kubernetes 1.8 发布已经好几天，1.8 对于 kube-proxy 组件增加了 ipvs 支持，以下记录一下 kube-proxy ipvs 开启教程&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;一环境准备&quot;&gt;一、环境准备&lt;/h3&gt;

&lt;p&gt;目前测试为 5 台虚拟机，CentOS 系统，etcd、kubernetes 全部采用 rpm 安装，使用 systemd 来做管理，网络组件采用 calico，Master 实现了 HA；基本环境如下&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;IP&lt;/th&gt;
      &lt;th&gt;组件&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;10.10.1.5&lt;/td&gt;
      &lt;td&gt;Master、Node、etcd&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.10.1.6&lt;/td&gt;
      &lt;td&gt;Master、Node、etcd&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.10.1.7&lt;/td&gt;
      &lt;td&gt;Master、Node、etcd&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.10.1.8&lt;/td&gt;
      &lt;td&gt;Node&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.10.1.9&lt;/td&gt;
      &lt;td&gt;Node&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;二注意事项&quot;&gt;二、注意事项&lt;/h3&gt;

&lt;p&gt;之所以把这个单独写一个标题是因为坑有点多，为了避免下面出现问题，先说一下注意事项:&lt;/p&gt;

&lt;h4 id=&quot;21selinux&quot;&gt;2.1、SELinux&lt;/h4&gt;

&lt;p&gt;如果对 SELinux 玩的不溜的朋友，我建议先关闭  SELinux，关闭方法如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 编辑 /etc/selinux/config 文件；确保 SELINUX=disabled&lt;/span&gt;
docker1.node ➜  ~ &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/selinux/config

&lt;span class=&quot;c&quot;&gt;# This file controls the state of SELinux on the system.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# SELINUX= can take one of these three values:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#     enforcing - SELinux security policy is enforced.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#     permissive - SELinux prints warnings instead of enforcing.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#     disabled - No SELinux policy is loaded.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SELINUX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;disabled
&lt;span class=&quot;c&quot;&gt;# SELINUXTYPE= can take one of three two values:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#     targeted - Targeted processes are protected,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#     minimum - Modification of targeted policy. Only selected processes are protected.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#     mls - Multi Level Security protection.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SELINUXTYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;targeted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;然后重启机器并验证&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker1.node ➜  ~ sestatus
SELinux status:                 disabled
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;22firewall&quot;&gt;2.2、Firewall&lt;/h4&gt;

&lt;p&gt;搭建时尽量关闭防火墙，如果你玩的很溜，那么请在测试没问题后再开启防火墙&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl stop firewalld
systemctl disable firewalld
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;23内核参数调整&quot;&gt;2.3、内核参数调整&lt;/h4&gt;

&lt;p&gt;确保内核已经开启如下参数，或者说确保 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/sysctl.conf&lt;/code&gt; 有如下配置&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker1.node ➜  ~ &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/sysctl.conf
&lt;span class=&quot;c&quot;&gt;# sysctl settings are defined through files in&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# /usr/lib/sysctl.d/, /run/sysctl.d/, and /etc/sysctl.d/.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Vendors settings live in /usr/lib/sysctl.d/.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# To override a whole file, create a new file with the same in&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# /etc/sysctl.d/ and put new settings there. To override&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# only specific settings, add a file with a lexically later&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# name in /etc/sysctl.d/ and put new settings there.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# For more information, see sysctl.conf(5) and sysctl.d(5).&lt;/span&gt;
net.ipv4.ip_forward&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
net.bridge.bridge-nf-call-iptables&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
net.bridge.bridge-nf-call-ip6tables&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;sysctl -p&lt;/code&gt; 使之生效&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker1.node ➜  ~ sysctl &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;
net.ipv4.ip_forward &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
net.bridge.bridge-nf-call-iptables &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
net.bridge.bridge-nf-call-ip6tables &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;24内核模块加载&quot;&gt;2.4、内核模块加载&lt;/h4&gt;

&lt;p&gt;由于 ipvs 已经加入到内核主干，所以需要内核模块支持，请确保内核已经加载了相应模块；如不确定，执行以下脚本，以确保内核加载相应模块，&lt;strong&gt;否则会出现 &lt;code class=&quot;highlighter-rouge&quot;&gt;failed to load kernel modules: [ip_vs_rr ip_vs_sh ip_vs_wrr]&lt;/code&gt; 错误&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /etc/sysconfig/modules/ipvs.modules &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
#!/bin/bash
ipvs_modules=&quot;ip_vs ip_vs_lc ip_vs_wlc ip_vs_rr ip_vs_wrr ip_vs_lblc ip_vs_lblcr ip_vs_dh ip_vs_sh ip_vs_fo ip_vs_nq ip_vs_sed ip_vs_ftp nf_conntrack_ipv4&quot;
for kernel_module in \&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ipvs_modules&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;; do
    /sbin/modinfo -F filename \&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kernel_module&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
    if [ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; -eq 0 ]; then
        /sbin/modprobe \&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kernel_module&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
    fi
done
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;chmod 755 /etc/sysconfig/modules/ipvs.modules &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; bash /etc/sysconfig/modules/ipvs.modules &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; lsmod | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;ip_vs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行后应该如下图所示，&lt;strong&gt;如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;lsmod | grep ip_vs&lt;/code&gt; 并未出现 &lt;code class=&quot;highlighter-rouge&quot;&gt;ip_vs_rr&lt;/code&gt; 等模块；那么请更换内核(一般不会，2.6 以后 ipvs 好像已经就合并进主干了)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/49wbb.jpg&quot; alt=&quot;Load kernel modules&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;三开启-ipvs-支持&quot;&gt;三、开启 ipvs 支持&lt;/h3&gt;

&lt;h4 id=&quot;31修改配置&quot;&gt;3.1、修改配置&lt;/h4&gt;

&lt;p&gt;修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/kubernetes/proxy&lt;/code&gt; 配置如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;###&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# kubernetes proxy config&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# default config should be adequate&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Add your own!&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_PROXY_ARGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--bind-address=10.10.1.8 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --hostname-override=docker4.node &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --masquerade-all &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --feature-gates=SupportIPVSProxyMode=true &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --proxy-mode=ipvs &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --ipvs-min-sync-period=5s &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --ipvs-sync-period=5s &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --ipvs-scheduler=rr &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --cluster-cidr=10.254.0.0/16&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;启用 ipvs 后与 1.7 版本的配置差异如下：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;--feature-gates=SupportIPVSProxyMode=true&lt;/code&gt; 选项，用于告诉 kube-proxy 开启 ipvs 支持，因为目前 ipvs 并未稳定&lt;/li&gt;
  &lt;li&gt;增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;ipvs-min-sync-period&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;--ipvs-sync-period&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;--ipvs-scheduler&lt;/code&gt; 三个参数用于调整 ipvs，具体参数值请自行查阅 ipvs 文档&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;--masquerade-all&lt;/code&gt; 选项，以确保反向流量通过&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;重点说一下 &lt;code class=&quot;highlighter-rouge&quot;&gt;--masquerade-all&lt;/code&gt; 选项: kube-proxy ipvs 是基于 NAT 实现的，当创建一个 service 后，kubernetes 会在每个节点上创建一个网卡，同时帮你将 Service IP(VIP) 绑定上，此时相当于每个 Node 都是一个 ds，而其他任何 Node 上的 Pod，甚至是宿主机服务(比如 kube-apiserver 的 6443)都可能成为 rs；按照正常的 lvs nat 模型，所有 rs 应该将 ds 设置成为默认网关，以便数据包在返回时能被 ds 正确修改；在 kubernetes 将 vip 设置到每个 Node 后，默认路由显然不可行，所以要设置 &lt;code class=&quot;highlighter-rouge&quot;&gt;--masquerade-all&lt;/code&gt; 选项，以便反向数据包能通过&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;以上描述可能并不精准，具体请看 &lt;a href=&quot;https://docs.google.com/document/d/1YEBWR4EWeCEWwxufXzRM0e82l_lYYzIXQiSayGaVQ8M/edit?usp=sharing&quot;&gt;Google 文档&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;32测试-ipvs&quot;&gt;3.2、测试 ipvs&lt;/h4&gt;

&lt;p&gt;修改完成后，重启 kube-proxy 使其生效&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl daemon-reload
systemctl restart kube-proxy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;重启后日志中应该能看到如下输出，不应该有其他提示 ipvs 的错误信息出现&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/o05rq.jpg&quot; alt=&quot;kube-proxy ipvs log&quot; /&gt;&lt;/p&gt;

&lt;p&gt;同时使用 ipvsadm 命令应该能看到相应的 service 的 ipvs 规则(ipvsadm 自己安装一下)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/d1ilk.jpg&quot; alt=&quot;ipvs role&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后进入 Pod 测试&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/42pjm.jpg&quot; alt=&quot;test ipvs1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;最后说一点: ipvs 尚未稳定，请慎用；而且 &lt;code class=&quot;highlighter-rouge&quot;&gt;--masquerade-all&lt;/code&gt; 选项与 Calico 安全策略控制不兼容，请酌情考虑使用(Calico 在做网络策略限制的时候要求不能开启此选项)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;</content><author><name>Jevic</name></author><summary type="html">Kubernetes 1.8 发布已经好几天，1.8 对于 kube-proxy 组件增加了 ipvs 支持，以下记录一下 kube-proxy ipvs 开启教程</summary></entry><entry><title type="html">Kubernetes 1.8 集群搭建</title><link href="http://0.0.0.0/2017/10/09/set-up-kubernetes-1.8-ha-cluster/" rel="alternate" type="text/html" title="Kubernetes 1.8 集群搭建" /><published>2017-10-09T22:48:03+08:00</published><updated>2017-10-09T22:48:03+08:00</updated><id>http://0.0.0.0/2017/10/09/set-up-kubernetes-1.8-ha-cluster</id><content type="html" xml:base="http://0.0.0.0/2017/10/09/set-up-kubernetes-1.8-ha-cluster/">&lt;blockquote&gt;
  &lt;p&gt;目前 Kubernetes 1.8.0 已经发布，1.8.0增加了很多新特性，比如 kube-proxy 组建的 ipvs 模式等，同时 RBAC 授权也做了一些调整，国庆没事干，所以试了一下；以下记录了 Kubernetes 1.8.0 的搭建过程&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;一环境准备&quot;&gt;一、环境准备&lt;/h3&gt;

&lt;p&gt;目前测试为 5 台虚拟机，etcd、kubernetes 全部采用 rpm 安装，使用 systemd 来做管理，网络组件采用 calico，Master 实现了 HA；基本环境如下&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;IP&lt;/th&gt;
      &lt;th&gt;组件&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;10.10.1.5&lt;/td&gt;
      &lt;td&gt;Master、Node、etcd&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.10.1.6&lt;/td&gt;
      &lt;td&gt;Master、Node、etcd&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.10.1.7&lt;/td&gt;
      &lt;td&gt;Master、Node、etcd&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.10.1.8&lt;/td&gt;
      &lt;td&gt;Node&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.10.1.9&lt;/td&gt;
      &lt;td&gt;Node&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;本文尽量以实际操作为主，因为写过一篇 &lt;a href=&quot;https://mritd.me/2017/07/21/set-up-kubernetes-ha-cluster-by-binary/&quot;&gt;Kubernetes 1.7 搭建文档&lt;/a&gt;，所以以下细节部分不在详细阐述，不懂得可以参考上一篇文章；本文所有安装工具均已打包上传到了 &lt;a href=&quot;https://pan.baidu.com/s/1nvwZCfv&quot;&gt;百度云&lt;/a&gt; 密码: &lt;code class=&quot;highlighter-rouge&quot;&gt;4zaz&lt;/code&gt;，可直接下载重复搭建过程，搭建前请自行 load 好 images 目录下的相关 docker 镜像&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;二搭建-etcd-集群&quot;&gt;二、搭建 Etcd 集群&lt;/h3&gt;

&lt;h4 id=&quot;21生成-etcd-证书&quot;&gt;2.1、生成 Etcd 证书&lt;/h4&gt;

&lt;p&gt;同样证书工具仍使用的是 &lt;a href=&quot;https://pkg.cfssl.org/&quot;&gt;cfssl&lt;/a&gt;，百度云的压缩包里已经包含了，下面直接上配置(&lt;strong&gt;注意，所有证书生成只需要在任意一台主机上生成一遍即可，我这里在 Master 上操作的&lt;/strong&gt;)&lt;/p&gt;

&lt;h5 id=&quot;etcd-csrjson&quot;&gt;etcd-csr.json&lt;/h5&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;algo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rsa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;names&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;O&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;etcd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;OU&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;etcd Security&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;L&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Beijing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Beijing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CN&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;etcd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hosts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10.10.1.5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10.10.1.6&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10.10.1.7&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10.10.1.8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10.10.1.9&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;etcd-gencertjson&quot;&gt;etcd-gencert.json&lt;/h5&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;signing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usages&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;signing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;key encipherment&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;server auth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;client auth&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;expiry&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;87600h&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;etcd-root-ca-csrjson&quot;&gt;etcd-root-ca-csr.json&lt;/h5&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;algo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rsa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4096&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;names&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;O&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;etcd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;OU&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;etcd Security&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;L&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Beijing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Beijing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CN&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;etcd-root-ca&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;最后生成证书&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cfssl gencert &lt;span class=&quot;nt&quot;&gt;--initca&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true &lt;/span&gt;etcd-root-ca-csr.json | cfssljson &lt;span class=&quot;nt&quot;&gt;--bare&lt;/span&gt; etcd-root-ca
cfssl gencert &lt;span class=&quot;nt&quot;&gt;--ca&lt;/span&gt; etcd-root-ca.pem &lt;span class=&quot;nt&quot;&gt;--ca-key&lt;/span&gt; etcd-root-ca-key.pem &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; etcd-gencert.json etcd-csr.json | cfssljson &lt;span class=&quot;nt&quot;&gt;--bare&lt;/span&gt; etcd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;证书生成后截图如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/6mn6y.jpg&quot; alt=&quot;Gen Etcd Cert&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;22搭建集群&quot;&gt;2.2、搭建集群&lt;/h4&gt;

&lt;p&gt;首先分发证书及 rpm 包&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 分发 rpm&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;IP &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;seq 5 7&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;scp etcd-3.2.7-1.fc28.x86_64.rpm root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt;:~
    ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; rpm &lt;span class=&quot;nt&quot;&gt;-ivh&lt;/span&gt; etcd-3.2.7-1.fc28.x86_64.rpm
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 分发证书&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;IP &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;seq 5 7&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; mkdir /etc/etcd/ssl
    scp &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.pem root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt;:/etc/etcd/ssl
    ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; chown &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; etcd:etcd /etc/etcd/ssl
    ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; chmod &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; 644 /etc/etcd/ssl/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
    ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; chmod 755 /etc/etcd/ssl
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 修改 etcd 数据目录权限组&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;IP &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;seq 5 7&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; chown &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; etcd:etcd /var/lib/etcd
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;然后修改配置如下(其他两个节点类似，只需要改监听地址和 Etcd Name 即可)&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker1.node ➜  ~ &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/etcd/etcd.conf

&lt;span class=&quot;c&quot;&gt;# [member]&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;etcd1
&lt;span class=&quot;nv&quot;&gt;ETCD_DATA_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/var/lib/etcd/etcd1.etcd&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_WAL_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/var/lib/etcd/wal&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_SNAPSHOT_COUNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;100&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_HEARTBEAT_INTERVAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;100&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_ELECTION_TIMEOUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1000&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_LISTEN_PEER_URLS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://10.10.1.5:2380&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_LISTEN_CLIENT_URLS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://10.10.1.5:2379,http://127.0.0.1:2379&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_MAX_SNAPSHOTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_MAX_WALS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_CORS=&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# [cluster]&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_INITIAL_ADVERTISE_PEER_URLS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://10.10.1.5:2380&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# if you use different ETCD_NAME (e.g. test), set ETCD_INITIAL_CLUSTER value for this name, i.e. &quot;test=http://...&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_INITIAL_CLUSTER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;etcd1=https://10.10.1.5:2380,etcd2=https://10.10.1.6:2380,etcd3=https://10.10.1.7:2380&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_INITIAL_CLUSTER_STATE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;new&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_INITIAL_CLUSTER_TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;etcd-cluster&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_ADVERTISE_CLIENT_URLS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://10.10.1.5:2379&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_DISCOVERY=&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_DISCOVERY_SRV=&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_DISCOVERY_FALLBACK=&quot;proxy&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_DISCOVERY_PROXY=&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_STRICT_RECONFIG_CHECK=&quot;false&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_AUTO_COMPACTION_RETENTION=&quot;0&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# [proxy]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_PROXY=&quot;off&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_PROXY_FAILURE_WAIT=&quot;5000&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_PROXY_REFRESH_INTERVAL=&quot;30000&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_PROXY_DIAL_TIMEOUT=&quot;1000&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_PROXY_WRITE_TIMEOUT=&quot;5000&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_PROXY_READ_TIMEOUT=&quot;0&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# [security]&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_CERT_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/etc/etcd/ssl/etcd.pem&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_KEY_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/etc/etcd/ssl/etcd-key.pem&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_CLIENT_CERT_AUTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_TRUSTED_CA_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/etc/etcd/ssl/etcd-root-ca.pem&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_AUTO_TLS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_PEER_CERT_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/etc/etcd/ssl/etcd.pem&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_PEER_KEY_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/etc/etcd/ssl/etcd-key.pem&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_PEER_CLIENT_CERT_AUTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_PEER_TRUSTED_CA_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/etc/etcd/ssl/etcd-root-ca.pem&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_PEER_AUTO_TLS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# [logging]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_DEBUG=&quot;false&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# examples for -log-package-levels etcdserver=WARNING,security=DEBUG&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_LOG_PACKAGE_LEVELS=&quot;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后启动集群并测试如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl daemon-reload
systemctl start etcd
systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;etcd

&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ETCDCTL_API&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3
etcdctl &lt;span class=&quot;nt&quot;&gt;--cacert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/etcd/ssl/etcd-root-ca.pem &lt;span class=&quot;nt&quot;&gt;--cert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/etcd/ssl/etcd.pem &lt;span class=&quot;nt&quot;&gt;--key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/etcd/ssl/etcd-key.pem &lt;span class=&quot;nt&quot;&gt;--endpoints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://10.10.1.5:2379,https://10.10.1.6:2379,https://10.10.1.7:2379 endpoint health
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/ecrgr.jpg&quot; alt=&quot;check etcd&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;三搭建-master-节点&quot;&gt;三、搭建 Master 节点&lt;/h3&gt;

&lt;h4 id=&quot;31生成-kubernetes-证书&quot;&gt;3.1、生成 Kubernetes 证书&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;生成证书配置文件需要借助 kubectl，所以先要安装一下 kubernetes-client 包&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rpm &lt;span class=&quot;nt&quot;&gt;-ivh&lt;/span&gt; kubernetes-client-1.8.0-1.el7.centos.x86_64.rpm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;生成证书配置如下&lt;/p&gt;

&lt;h5 id=&quot;admin-csrjson&quot;&gt;admin-csr.json&lt;/h5&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;admin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hosts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;algo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rsa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;names&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BeiJing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;L&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BeiJing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;O&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;system:masters&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;OU&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;System&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;k8s-gencertjson&quot;&gt;k8s-gencert.json&lt;/h5&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;signing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;expiry&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;87600h&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;profiles&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kubernetes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usages&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;signing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;key encipherment&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;server auth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;client auth&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;expiry&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;87600h&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;k8s-root-ca-csrjson&quot;&gt;k8s-root-ca-csr.json&lt;/h5&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kubernetes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;algo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rsa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4096&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;names&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BeiJing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;L&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BeiJing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;O&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;k8s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;OU&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;System&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;kube-proxy-csrjson&quot;&gt;kube-proxy-csr.json&lt;/h5&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;system:kube-proxy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hosts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;algo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rsa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;names&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BeiJing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;L&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BeiJing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;O&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;k8s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;OU&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;System&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;kubernetes-csrjson&quot;&gt;kubernetes-csr.json&lt;/h5&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kubernetes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hosts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10.254.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10.10.1.5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10.10.1.6&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10.10.1.7&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10.10.1.8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10.10.1.9&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kubernetes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kubernetes.default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kubernetes.default.svc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kubernetes.default.svc.cluster&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kubernetes.default.svc.cluster.local&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;algo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rsa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;names&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BeiJing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;L&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BeiJing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;O&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;k8s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;OU&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;System&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后生成证书及配置文件&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 生成证书&lt;/span&gt;
cfssl gencert &lt;span class=&quot;nt&quot;&gt;--initca&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true &lt;/span&gt;k8s-root-ca-csr.json | cfssljson &lt;span class=&quot;nt&quot;&gt;--bare&lt;/span&gt; k8s-root-ca

&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;targetName &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;kubernetes admin kube-proxy&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;cfssl gencert &lt;span class=&quot;nt&quot;&gt;--ca&lt;/span&gt; k8s-root-ca.pem &lt;span class=&quot;nt&quot;&gt;--ca-key&lt;/span&gt; k8s-root-ca-key.pem &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; k8s-gencert.json &lt;span class=&quot;nt&quot;&gt;--profile&lt;/span&gt; kubernetes &lt;span class=&quot;nv&quot;&gt;$targetName&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-csr&lt;/span&gt;.json | cfssljson &lt;span class=&quot;nt&quot;&gt;--bare&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$targetName&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 生成配置&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KUBE_APISERVER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://127.0.0.1:6443&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BOOTSTRAP_TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;head &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 16 /dev/urandom | od &lt;span class=&quot;nt&quot;&gt;-An&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; x | tr &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Tokne: &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BOOTSTRAP_TOKEN&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; token.csv &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BOOTSTRAP_TOKEN&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;,kubelet-bootstrap,10001,&quot;system:kubelet-bootstrap&quot;
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Create kubelet bootstrapping kubeconfig...&quot;&lt;/span&gt;
kubectl config set-cluster kubernetes &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--certificate-authority&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;k8s-root-ca.pem &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--embed-certs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KUBE_APISERVER&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--kubeconfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;bootstrap.kubeconfig
kubectl config set-credentials kubelet-bootstrap &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BOOTSTRAP_TOKEN&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--kubeconfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;bootstrap.kubeconfig
kubectl config set-context default &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--cluster&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kubernetes &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kubelet-bootstrap &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--kubeconfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;bootstrap.kubeconfig
kubectl config use-context default &lt;span class=&quot;nt&quot;&gt;--kubeconfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;bootstrap.kubeconfig

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Create kube-proxy kubeconfig...&quot;&lt;/span&gt;
kubectl config set-cluster kubernetes &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--certificate-authority&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;k8s-root-ca.pem &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--embed-certs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KUBE_APISERVER&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--kubeconfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kube-proxy.kubeconfig
kubectl config set-credentials kube-proxy &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--client-certificate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kube-proxy.pem &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--client-key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kube-proxy-key.pem &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--embed-certs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--kubeconfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kube-proxy.kubeconfig
kubectl config set-context default &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--cluster&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kubernetes &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kube-proxy &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--kubeconfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kube-proxy.kubeconfig
kubectl config use-context default &lt;span class=&quot;nt&quot;&gt;--kubeconfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kube-proxy.kubeconfig

&lt;span class=&quot;c&quot;&gt;# 生成高级审计配置&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; audit-policy.yaml &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
# Log all requests at the Metadata level.
apiVersion: audit.k8s.io/v1beta1
kind: Policy
rules:
- level: Metadata
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;32分发-rpm-及证书&quot;&gt;3.2、分发 rpm 及证书&lt;/h4&gt;

&lt;p&gt;创建好证书以后就要进行分发，同时由于 Master 也作为 Node 使用，所以以下命令中在 Master 上也安装了 kubelet、kube-proxy 组件&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 分发并安装 rpm&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;IP &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;seq 5 7&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;scp kubernetes&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.rpm root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt;:~&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; yum install &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; kubernetes&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.rpm
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 分发证书&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;IP &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;seq 5 7&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; mkdir /etc/kubernetes/ssl
    scp &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.pem root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt;:/etc/kubernetes/ssl
    scp &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.kubeconfig token.csv audit-policy.yaml root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt;:/etc/kubernetes
    ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; chown &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; kube:kube /etc/kubernetes/ssl
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 设置 log 目录权限&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;IP &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;seq 5 7&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /var/log/kube-audit /usr/libexec/kubernetes
    ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; chown &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; kube:kube /var/log/kube-audit /usr/libexec/kubernetes
    ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; chmod &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; 755 /var/log/kube-audit /usr/libexec/kubernetes
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;33-搭建-master-节点&quot;&gt;3.3、 搭建 Master 节点&lt;/h4&gt;

&lt;p&gt;证书与 rpm 都安装完成后，只需要修改配置(配置位于 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/kubernetes&lt;/code&gt; 目录)后启动相关组件即可&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;config 通用配置&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;###&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# kubernetes system config&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The following values are used to configure various aspects of all&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# kubernetes services, including&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   kube-apiserver.service&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   kube-controller-manager.service&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   kube-scheduler.service&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   kubelet.service&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   kube-proxy.service&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# logging to stderr means we get it in the systemd journal&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_LOGTOSTDERR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--logtostderr=true&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# journal message level, 0 is debug&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_LOG_LEVEL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--v=2&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Should this cluster be allowed to run privileged docker containers&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_ALLOW_PRIV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--allow-privileged=true&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# How the controller-manager, scheduler, and proxy find the apiserver&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_MASTER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--master=http://127.0.0.1:8080&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;apiserver-配置&quot;&gt;apiserver 配置&lt;/h5&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;###&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# kubernetes system config&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The following values are used to configure the kube-apiserver&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# The address on the local server to listen to.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_API_ADDRESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--advertise-address=10.10.1.5 --insecure-bind-address=127.0.0.1 --bind-address=10.10.1.5&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# The port on the local server to listen on.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_API_PORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--insecure-port=8080 --secure-port=6443&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Port minions listen on&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# KUBELET_PORT=&quot;--kubelet-port=10250&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Comma separated list of nodes in the etcd cluster&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_ETCD_SERVERS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--etcd-servers=https://10.10.1.5:2379,https://10.10.1.6:2379,https://10.10.1.7:2379&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Address range to use for services&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_SERVICE_ADDRESSES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--service-cluster-ip-range=10.254.0.0/16&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# default admission control policies&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_ADMISSION_CONTROL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--admission-control=NamespaceLifecycle,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota,NodeRestriction&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Add your own!&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_API_ARGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--authorization-mode=RBAC,Node &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --anonymous-auth=false &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --kubelet-https=true &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --enable-bootstrap-token-auth &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --token-auth-file=/etc/kubernetes/token.csv &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --service-node-port-range=30000-50000 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --tls-cert-file=/etc/kubernetes/ssl/kubernetes.pem &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --tls-private-key-file=/etc/kubernetes/ssl/kubernetes-key.pem &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --client-ca-file=/etc/kubernetes/ssl/k8s-root-ca.pem &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --service-account-key-file=/etc/kubernetes/ssl/k8s-root-ca.pem &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --etcd-quorum-read=true &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --storage-backend=etcd3 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --etcd-cafile=/etc/etcd/ssl/etcd-root-ca.pem &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --etcd-certfile=/etc/etcd/ssl/etcd.pem &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --etcd-keyfile=/etc/etcd/ssl/etcd-key.pem &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --enable-swagger-ui=true &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --apiserver-count=3 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --audit-policy-file=/etc/kubernetes/audit-policy.yaml &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --audit-log-maxage=30 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --audit-log-maxbackup=3 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --audit-log-maxsize=100 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --audit-log-path=/var/log/kube-audit/audit.log &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --event-ttl=1h&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意：API SERVER 对比 1.7 配置出现几项变动:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;移除了 &lt;code class=&quot;highlighter-rouge&quot;&gt;--runtime-config=rbac.authorization.k8s.io/v1beta1&lt;/code&gt; 配置，因为 RBAC 已经稳定，被纳入了 v1 api，不再需要指定开启&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--authorization-mode&lt;/code&gt; 授权模型增加了 &lt;code class=&quot;highlighter-rouge&quot;&gt;Node&lt;/code&gt; 参数，因为 1.8 后默认 &lt;code class=&quot;highlighter-rouge&quot;&gt;system:node&lt;/code&gt; role 不会自动授予 &lt;code class=&quot;highlighter-rouge&quot;&gt;system:nodes&lt;/code&gt; 组，具体请参看 &lt;a href=&quot;https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md#before-upgrading&quot;&gt;CHANGELOG&lt;/a&gt;(before-upgrading 段最后一条说明)&lt;/li&gt;
  &lt;li&gt;由于以上原因，&lt;code class=&quot;highlighter-rouge&quot;&gt;--admission-control&lt;/code&gt; 同时增加了 &lt;code class=&quot;highlighter-rouge&quot;&gt;NodeRestriction&lt;/code&gt; 参数，关于关于节点授权器请参考 &lt;a href=&quot;https://kubernetes.io/docs/admin/authorization/node/&quot;&gt;Using Node Authorization&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;--audit-policy-file&lt;/code&gt; 参数用于指定高级审计配置，具体可参考 &lt;a href=&quot;https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md#before-upgrading&quot;&gt;CHANGELOG&lt;/a&gt;(before-upgrading 第四条)、&lt;a href=&quot;https://kubernetes.io/docs/tasks/debug-application-cluster/audit/#advanced-audit&quot;&gt;Advanced audit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;移除 &lt;code class=&quot;highlighter-rouge&quot;&gt;--experimental-bootstrap-token-auth&lt;/code&gt; 参数，更换为 &lt;code class=&quot;highlighter-rouge&quot;&gt;--enable-bootstrap-token-auth&lt;/code&gt;，详情参考 &lt;a href=&quot;https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md#auth&quot;&gt;CHANGELOG&lt;/a&gt;(Auth 第二条)&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;controller-manager-配置&quot;&gt;controller-manager 配置&lt;/h5&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;###&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The following values are used to configure the kubernetes controller-manager&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# defaults from config and apiserver should be adequate&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Add your own!&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_CONTROLLER_MANAGER_ARGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--address=0.0.0.0 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --service-cluster-ip-range=10.254.0.0/16 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --cluster-name=kubernetes &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --cluster-signing-cert-file=/etc/kubernetes/ssl/k8s-root-ca.pem &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --cluster-signing-key-file=/etc/kubernetes/ssl/k8s-root-ca-key.pem &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --service-account-private-key-file=/etc/kubernetes/ssl/k8s-root-ca-key.pem &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --root-ca-file=/etc/kubernetes/ssl/k8s-root-ca.pem &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --leader-elect=true &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --node-monitor-grace-period=40s &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --node-monitor-period=5s &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --pod-eviction-timeout=5m0s&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;scheduler-配置&quot;&gt;scheduler 配置&lt;/h5&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;###&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# kubernetes scheduler config&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# default config should be adequate&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Add your own!&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_SCHEDULER_ARGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--leader-elect=true --address=0.0.0.0&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后启动 Master 相关组件并验证&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl daemon-reload
systemctl start kube-apiserver
systemctl start kube-controller-manager
systemctl start kube-scheduler
systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;kube-apiserver
systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;kube-controller-manager
systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;kube-scheduler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/klnwa.jpg&quot; alt=&quot;Master Success&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;四搭建-node-节点&quot;&gt;四、搭建 Node 节点&lt;/h3&gt;

&lt;h4 id=&quot;41分发-rpm-及证书&quot;&gt;4.1、分发 rpm 及证书&lt;/h4&gt;

&lt;p&gt;对于 Node 节点，只需要安装 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubernetes-node&lt;/code&gt; 即可，同时为了方便使用，这里也安装了 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubernetes-client&lt;/code&gt;，如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;IP &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;seq 8 9&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;scp kubernetes-node-1.8.0-1.el7.centos.x86_64.rpm kubernetes-client-1.8.0-1.el7.centos.x86_64.rpm root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt;:~
    ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; yum install &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; kubernetes-node-1.8.0-1.el7.centos.x86_64.rpm kubernetes-client-1.8.0-1.el7.centos.x86_64.rpm
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同时还要分发相关证书；这里将 Etcd 证书已进行了分发，是因为 &lt;strong&gt;虽然 Node 节点上没有 Etcd，但是如果部署网络组件，如 calico、flannel 等时，网络组件需要联通 Etcd 就会用到 Etcd 的相关证书。&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 分发 Kubernetes 证书&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;IP &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;seq 8 9&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; mkdir /etc/kubernetes/ssl
    scp &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.pem root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt;:/etc/kubernetes/ssl
    scp &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.kubeconfig token.csv audit-policy.yaml root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt;:/etc/kubernetes
    ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; chown &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; kube:kube /etc/kubernetes/ssl
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 分发 Etcd 证书&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;IP &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;seq 8 9&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /etc/etcd/ssl
    scp &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.pem root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt;:/etc/etcd/ssl
    ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; chmod &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; 644 /etc/etcd/ssl/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
    ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; chmod 755 /etc/etcd/ssl
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;42修改-node-配置&quot;&gt;4.2、修改 Node 配置&lt;/h4&gt;

&lt;p&gt;Node 上只需要修改 kubelet 和 kube-proxy 的配置即可&lt;/p&gt;

&lt;h5 id=&quot;config-通用配置&quot;&gt;config 通用配置&lt;/h5&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;###&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# kubernetes system config&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The following values are used to configure various aspects of all&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# kubernetes services, including&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   kube-apiserver.service&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   kube-controller-manager.service&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   kube-scheduler.service&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   kubelet.service&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   kube-proxy.service&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# logging to stderr means we get it in the systemd journal&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_LOGTOSTDERR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--logtostderr=true&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# journal message level, 0 is debug&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_LOG_LEVEL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--v=2&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Should this cluster be allowed to run privileged docker containers&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_ALLOW_PRIV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--allow-privileged=true&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# How the controller-manager, scheduler, and proxy find the apiserver&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# KUBE_MASTER=&quot;--master=http://127.0.0.1:8080&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;kubelet-配置&quot;&gt;kubelet 配置&lt;/h5&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;###&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# kubernetes kubelet (minion) config&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# The address for the info server to serve on (set to 0.0.0.0 or &quot;&quot; for all interfaces)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBELET_ADDRESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--address=10.10.1.8&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# The port for the info server to serve on&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# KUBELET_PORT=&quot;--port=10250&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# You may leave this blank to use the actual hostname&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBELET_HOSTNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--hostname-override=docker4.node&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# location of the api-server&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# KUBELET_API_SERVER=&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Add your own!&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBELET_ARGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--cgroup-driver=cgroupfs &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --cluster-dns=10.254.0.2 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --resolv-conf=/etc/resolv.conf &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --experimental-bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --kubeconfig=/etc/kubernetes/kubelet.kubeconfig &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --fail-swap-on=false &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --cert-dir=/etc/kubernetes/ssl &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --cluster-domain=cluster.local. &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --hairpin-mode=promiscuous-bridge &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --serialize-image-pulls=false &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --pod-infra-container-image=gcr.io/google_containers/pause-amd64:3.0&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意: kubelet 配置与 1.7 版本有一定改动&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;--fail-swap-on=false&lt;/code&gt; 选项，否则可能导致在开启 swap 分区的机器上无法启动 kubelet，详细可参考 &lt;a href=&quot;https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md#before-upgrading&quot;&gt;CHANGELOG&lt;/a&gt;(before-upgrading 第一条)&lt;/li&gt;
  &lt;li&gt;移除 &lt;code class=&quot;highlighter-rouge&quot;&gt;--require-kubeconfig&lt;/code&gt; 选项，已经过时废弃&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;proxy-配置&quot;&gt;proxy 配置&lt;/h5&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;###&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# kubernetes proxy config&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# default config should be adequate&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Add your own!&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_PROXY_ARGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--bind-address=10.10.1.8 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --hostname-override=docker4.node &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --cluster-cidr=10.254.0.0/16&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;kube-proxy 配置与 1.7 并无改变，最新 1.8 的 ipvs 模式将单独写一篇文章，这里不做介绍&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;43创建-nginx-代理&quot;&gt;4.3、创建 Nginx 代理&lt;/h4&gt;

&lt;p&gt;由于 HA 方案基于 Nginx 反代实现，所以每个 Node 要启动一个 Nginx 负载均衡 Master，具体参考 &lt;a href=&quot;https://mritd.me/2017/07/21/set-up-kubernetes-ha-cluster-by-binary/#41ha-master-%E7%AE%80%E8%BF%B0&quot;&gt;HA Master 简述&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;nginxconf&quot;&gt;nginx.conf&lt;/h5&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 创建配置目录&lt;/span&gt;
mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /etc/nginx

&lt;span class=&quot;c&quot;&gt;# 写入代理配置&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt;&amp;gt; /etc/nginx/nginx.conf
error_log stderr notice;

worker_processes auto;
events {
  multi_accept on;
  use epoll;
  worker_connections 1024;
}

stream {
    upstream kube_apiserver {
        least_conn;
        server 10.10.1.5:6443;
        server 10.10.1.6:6443;
        server 10.10.1.7:6443;
    }

    server {
        listen        0.0.0.0:6443;
        proxy_pass    kube_apiserver;
        proxy_timeout 10m;
        proxy_connect_timeout 1s;
    }
}
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# 更新权限&lt;/span&gt;
chmod +r /etc/nginx/nginx.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;nginx-proxyservice&quot;&gt;nginx-proxy.service&lt;/h5&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt;&amp;gt; /etc/systemd/system/nginx-proxy.service
[Unit]
Description=kubernetes apiserver docker wrapper
Wants=docker.socket
After=docker.service

[Service]
User=root
PermissionsStartOnly=true
ExecStart=/usr/bin/docker run -p 127.0.0.1:6443:6443 \\
                              -v /etc/nginx:/etc/nginx \\
                              --name nginx-proxy \\
                              --net=host \\
                              --restart=on-failure:5 \\
                              --memory=512M \\
                              nginx:1.13.5-alpine
ExecStartPre=-/usr/bin/docker rm -f nginx-proxy
ExecStop=/usr/bin/docker stop nginx-proxy
Restart=always
RestartSec=15s
TimeoutStartSec=30s

[Install]
WantedBy=multi-user.target
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;最后启动 Nginx 代理即可&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl daemon-reload
systemctl start nginx-proxy
systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;nginx-proxy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;44添加-node&quot;&gt;4.4、添加 Node&lt;/h4&gt;

&lt;p&gt;一切准备就绪后就可以添加 Node 了，首先由于我们采用了 &lt;a href=&quot;https://kubernetes.io/docs/admin/kubelet-tls-bootstrapping/&quot;&gt;TLS Bootstrapping&lt;/a&gt;，所以需要先创建一个 ClusterRoleBinding&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 在任意 master 执行即可&lt;/span&gt;
kubectl create clusterrolebinding kubelet-bootstrap &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--clusterrole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;system:node-bootstrapper &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kubelet-bootstrap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后启动 kubelet&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl daemon-reload
systemctl start kubelet
systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;kubelet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由于采用了 TLS Bootstrapping，所以 kubelet 启动后不会立即加入集群，而是进行证书申请，从日志中可以看到如下输出&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;10月 06 19:53:23 docker4.node kubelet[3797]: I1006 19:53:23.917261    3797 bootstrap.go:57] Using bootstrap kubeconfig to generate TLS client cert, key and kubeconfig file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时只需要在 master 允许其证书申请即可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl get csr | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;Pending | awk &lt;span class=&quot;s1&quot;&gt;'{print $1}'&lt;/span&gt; | xargs kubectl certificate approve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时可以看到 Node 已经加入了&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker1.node ➜  ~ kubectl get node
NAME           STATUS    ROLES     AGE       VERSION
docker4.node   Ready     &amp;lt;none&amp;gt;    14m       v1.8.0
docker5.node   Ready     &amp;lt;none&amp;gt;    3m        v1.8.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后再启动 kube-proxy 即可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl start kube-proxy
systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;kube-proxy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;再次提醒: 如果 kubelet 启动出现了类似 &lt;code class=&quot;highlighter-rouge&quot;&gt;system:node:xxxx&lt;/code&gt; 用户没有权限访问 API 的 RBAC 错误，那么一定是 API Server 授权控制器、准入控制配置有问题，请仔细阅读上面的文档进行更改&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;45master-作为-node&quot;&gt;4.5、Master 作为 Node&lt;/h4&gt;

&lt;p&gt;如果想讲 Master 也作为 Node 的话，请在 Master 上安装 kubernete-node rpm 包，配置与上面基本一致；&lt;strong&gt;区别于 Master 上不需要启动 nginx 做负载均衡，同时 &lt;code class=&quot;highlighter-rouge&quot;&gt;bootstrap.kubeconfig&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;kube-proxy.kubeconfig&lt;/code&gt; 中的 API Server 地址改成当前 Master IP 即可。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;最终成功后如下图所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/c4dde.jpg&quot; alt=&quot;cluster success&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;五部署-calico&quot;&gt;五、部署 Calico&lt;/h3&gt;

&lt;h4 id=&quot;51修改-calico-配置&quot;&gt;5.1、修改 Calico 配置&lt;/h4&gt;

&lt;p&gt;Calico 部署仍然采用 “混搭” 方式，即 Systemd 控制 calico node，cni 等由 kubernetes daemonset 安装，具体请参考 &lt;a href=&quot;https://mritd.me/2017/07/31/calico-yml-bug/&quot;&gt;Calico 部署踩坑记录&lt;/a&gt;，以下直接上代码&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 获取 calico.yaml&lt;/span&gt;
wget https://docs.projectcalico.org/v2.6/getting-started/kubernetes/installation/hosted/calico.yaml

&lt;span class=&quot;c&quot;&gt;# 替换 Etcd 地址&lt;/span&gt;
sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s@.*etcd_endpoints:.*@\ \ etcd_endpoints:\ \&quot;https://10.10.1.5:2379,https://10.10.1.6:2379,https://10.10.1.7:2379\&quot;@gi'&lt;/span&gt; calico.yaml

&lt;span class=&quot;c&quot;&gt;# 替换 Etcd 证书&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ETCD_CERT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/etcd/ssl/etcd.pem | base64 | tr &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ETCD_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/etcd/ssl/etcd-key.pem | base64 | tr &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ETCD_CA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/etcd/ssl/etcd-root-ca.pem | base64 | tr &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;

sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s@.*etcd-cert:.*@&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\ \ &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;etcd-cert:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ETCD_CERT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@gi&quot;&lt;/span&gt; calico.yaml
sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s@.*etcd-key:.*@&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\ \ &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;etcd-key:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ETCD_KEY&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@gi&quot;&lt;/span&gt; calico.yaml
sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s@.*etcd-ca:.*@&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\ \ &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;etcd-ca:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ETCD_CA&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@gi&quot;&lt;/span&gt; calico.yaml

sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s@.*etcd_ca:.*@\ \ etcd_ca:\ &quot;/calico-secrets/etcd-ca&quot;@gi'&lt;/span&gt; calico.yaml
sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s@.*etcd_cert:.*@\ \ etcd_cert:\ &quot;/calico-secrets/etcd-cert&quot;@gi'&lt;/span&gt; calico.yaml
sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s@.*etcd_key:.*@\ \ etcd_key:\ &quot;/calico-secrets/etcd-key&quot;@gi'&lt;/span&gt; calico.yaml

&lt;span class=&quot;c&quot;&gt;# 注释掉 calico-node 部分(由 Systemd 接管)&lt;/span&gt;
sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'103,189s@.*@#&amp;amp;@gi'&lt;/span&gt; calico.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;52创建-systemd-文件&quot;&gt;5.2、创建 Systemd 文件&lt;/h4&gt;

&lt;p&gt;上一步注释了 &lt;code class=&quot;highlighter-rouge&quot;&gt;calico.yaml&lt;/code&gt; 中 Calico Node 相关内容，为了防止自动获取 IP 出现问题，将其移动到 Systemd，Systemd service 配置如下，&lt;strong&gt;每个节点都要安装 calico-node 的 Service&lt;/strong&gt;，其他节点请自行修改 ip(被问我为啥是两个反引号 &lt;code class=&quot;highlighter-rouge&quot;&gt;\\&lt;/code&gt;，自己试就知道了)&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /usr/lib/systemd/system/calico-node.service &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
[Unit]
Description=calico node
After=docker.service
Requires=docker.service

[Service]
User=root
PermissionsStartOnly=true
ExecStart=/usr/bin/docker run   --net=host --privileged --name=calico-node \\
                                -e ETCD_ENDPOINTS=https://10.10.1.5:2379,https://10.10.1.6:2379,https://10.10.1.7:2379 \\
                                -e ETCD_CA_CERT_FILE=/etc/etcd/ssl/etcd-root-ca.pem \\
                                -e ETCD_CERT_FILE=/etc/etcd/ssl/etcd.pem \\
                                -e ETCD_KEY_FILE=/etc/etcd/ssl/etcd-key.pem \\
                                -e NODENAME=docker1.node \\
                                -e IP=10.10.1.5 \\
                                -e IP6= \\
                                -e AS= \\
                                -e CALICO_IPV4POOL_CIDR=10.20.0.0/16 \\
                                -e CALICO_IPV4POOL_IPIP=always \\
                                -e CALICO_LIBNETWORK_ENABLED=true \\
                                -e CALICO_NETWORKING_BACKEND=bird \\
                                -e CALICO_DISABLE_FILE_LOGGING=true \\
                                -e FELIX_IPV6SUPPORT=false \\
                                -e FELIX_DEFAULTENDPOINTTOHOSTACTION=ACCEPT \\
                                -e FELIX_LOGSEVERITYSCREEN=info \\
                                -v /etc/etcd/ssl/etcd-root-ca.pem:/etc/etcd/ssl/etcd-root-ca.pem \\
                                -v /etc/etcd/ssl/etcd.pem:/etc/etcd/ssl/etcd.pem \\
                                -v /etc/etcd/ssl/etcd-key.pem:/etc/etcd/ssl/etcd-key.pem \\
                                -v /var/run/calico:/var/run/calico \\
                                -v /lib/modules:/lib/modules \\
                                -v /run/docker/plugins:/run/docker/plugins \\
                                -v /var/run/docker.sock:/var/run/docker.sock \\
                                -v /var/log/calico:/var/log/calico \\
                                quay.io/calico/node:v2.6.1
ExecStop=/usr/bin/docker rm -f calico-node
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;53修改-kubelet-配置&quot;&gt;5.3、修改 kubelet 配置&lt;/h4&gt;

&lt;p&gt;根据官方文档要求 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubelet&lt;/code&gt; 配置必须增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;--network-plugin=cni&lt;/code&gt; 选项，所以需要修改 kubelet 配置&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;###&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# kubernetes kubelet (minion) config&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The address for the info server to serve on (set to 0.0.0.0 or &quot;&quot; for all interfaces)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBELET_ADDRESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--address=10.10.1.5&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The port for the info server to serve on&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# KUBELET_PORT=&quot;--port=10250&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# You may leave this blank to use the actual hostname&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBELET_HOSTNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--hostname-override=docker1.node&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# location of the api-server&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# KUBELET_API_SERVER=&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Add your own!&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBELET_ARGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--cgroup-driver=cgroupfs &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --network-plugin=cni &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --cluster-dns=10.254.0.2 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --resolv-conf=/etc/resolv.conf &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --experimental-bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --kubeconfig=/etc/kubernetes/kubelet.kubeconfig &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --fail-swap-on=false &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --cert-dir=/etc/kubernetes/ssl &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --cluster-domain=cluster.local. &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --hairpin-mode=promiscuous-bridge &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --serialize-image-pulls=false &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --pod-infra-container-image=gcr.io/google_containers/pause-amd64:3.0&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后重启即可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl daemon-reload
systemctl restart kubelet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl get node&lt;/code&gt; 会看到 Node 为 &lt;code class=&quot;highlighter-rouge&quot;&gt;NotReady&lt;/code&gt; 状态，属于正常情况&lt;/p&gt;

&lt;h4 id=&quot;54创建-calico-daemonset&quot;&gt;5.4、创建 Calico Daemonset&lt;/h4&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 先创建 RBAC&lt;/span&gt;
kubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; https://docs.projectcalico.org/v2.6/getting-started/kubernetes/installation/rbac.yaml

&lt;span class=&quot;c&quot;&gt;# 再创建 Calico Daemonset&lt;/span&gt;
kubectl create &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; calico.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;55创建-calico-node&quot;&gt;5.5、创建 Calico Node&lt;/h4&gt;

&lt;p&gt;Calico Node 采用 Systemd 方式启动，在每个节点配置好 Systemd service后，&lt;strong&gt;每个节点修改对应的 &lt;code class=&quot;highlighter-rouge&quot;&gt;calico-node.service&lt;/code&gt; 中的 IP 和节点名称，然后启动即可&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl daemon-reload
systemctl restart calico-node
sleep 5
systemctl restart kubelet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时检查 Node 应该都处于 Ready 状态&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/agxp3.jpg&quot; alt=&quot;Node Ready&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;最后测试一下跨主机通讯&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 创建 deployment&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt;&amp;gt; demo.deploy.yml
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: demo-deployment
spec:
  replicas: 5
  selector:
    matchLabels:
      app: demo
  template:
    metadata:
      labels:
        app: demo
    spec:
      containers:
      - name: demo
        image: mritd/demo
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;kubectl create &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; demo.deploy.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;进入其中一个 Pod，ping 另一个 Pod 的 IP 测试即可&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/00krx.jpg&quot; alt=&quot;Test Calico&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;六部署-dns&quot;&gt;六、部署 DNS&lt;/h3&gt;

&lt;h4 id=&quot;61部署集群-dns&quot;&gt;6.1、部署集群 DNS&lt;/h4&gt;

&lt;p&gt;DNS 组件部署非常简单，直接创建相应的 deployment 等即可；但是有一个事得说一嘴，Kubernets 一直在推那个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Addon Manager&lt;/code&gt; 的工具来管理 DNS 啥的，文档说的条条是道，就是不希望我们手动搞这些东西，防止意外修改云云… 但问题是关于那个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Addon Manager&lt;/code&gt; 咋用一句没提，虽然说里面就一个小脚本，看看也能懂；但是我还是选择手动 😌… 还有这个 DNS 配置文件好像又挪地方了，以前在 &lt;code class=&quot;highlighter-rouge&quot;&gt;contrib&lt;/code&gt; 项目下的…&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 获取文件&lt;/span&gt;
wget https://raw.githubusercontent.com/kubernetes/kubernetes/master/cluster/addons/dns/kube-dns.yaml.sed
mv kube-dns.yaml.sed kube-dns.yaml

&lt;span class=&quot;c&quot;&gt;# 修改配置&lt;/span&gt;
sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/$DNS_DOMAIN/cluster.local/gi'&lt;/span&gt; kube-dns.yaml
sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/$DNS_SERVER_IP/10.254.0.2/gi'&lt;/span&gt; kube-dns.yaml

&lt;span class=&quot;c&quot;&gt;# 创建&lt;/span&gt;
kubectl create &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; kube-dns.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;创建好以后如下所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/vg95n.jpg&quot; alt=&quot;DNS&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后创建两组 Pod 和 Service，进入 Pod 中 curl 另一个 Service 名称看看是否能解析；同时还要测试一下外网能否解析&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/x185c.jpg&quot; alt=&quot;Test DNS1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;测试外网&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/3k9gz.jpg&quot; alt=&quot;Test DNS2&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;62部署-dns-自动扩容部署&quot;&gt;6.2、部署 DNS 自动扩容部署&lt;/h4&gt;

&lt;p&gt;这个同样下载 yaml，然后创建一下即可，不需要修改任何配置&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://raw.githubusercontent.com/kubernetes/kubernetes/master/cluster/addons/dns-horizontal-autoscaler/dns-horizontal-autoscaler.yaml
kubectl create &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; dns-horizontal-autoscaler.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;部署完成后如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/mid1u.jpg&quot; alt=&quot;DNS autoscaler&quot; /&gt;&lt;/p&gt;

&lt;p&gt;自动扩容这里不做测试了，虚拟机吃不消了，详情自己参考 &lt;a href=&quot;https://kubernetes.io/docs/tasks/administer-cluster/dns-horizontal-autoscaling/&quot;&gt;Autoscale the DNS Service in a Cluster&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;kube-proxy ipvs 下一篇写，坑有点多，虽然搞定了，但是一篇写有点囫囵吞枣，后来想一想还是分开吧&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;</content><author><name>Jevic</name></author><summary type="html">目前 Kubernetes 1.8.0 已经发布，1.8.0增加了很多新特性，比如 kube-proxy 组建的 ipvs 模式等，同时 RBAC 授权也做了一些调整，国庆没事干，所以试了一下；以下记录了 Kubernetes 1.8.0 的搭建过程</summary></entry><entry><title type="html">Ceph 笔记(二)</title><link href="http://0.0.0.0/2017/05/30/ceph-note-2/" rel="alternate" type="text/html" title="Ceph 笔记(二)" /><published>2017-05-30T23:39:29+08:00</published><updated>2017-05-30T23:39:29+08:00</updated><id>http://0.0.0.0/2017/05/30/ceph-note-2</id><content type="html" xml:base="http://0.0.0.0/2017/05/30/ceph-note-2/">&lt;blockquote&gt;
  &lt;p&gt;本篇文章主要简述了 Ceph 的存储对象名词解释及其含义，以及对 Ceph 集群内 CRUSH bucket 调整、PG/PGP 参数调整等设置；同时参考了一些书籍资料简单的概述一下 Ceph 集群硬件要求等&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;一ceph-组件及定义&quot;&gt;一、Ceph 组件及定义&lt;/h3&gt;

&lt;h4 id=&quot;11对象&quot;&gt;1.1、对象&lt;/h4&gt;

&lt;p&gt;对象是 Ceph 中最小的存储单元，对象是一个数据和一个元数据绑定的整体；元数据中存放了具体数据的相关属性描述信息等；Ceph 为每个对象生成一个集群内唯一的对象标识符，以保证对象在集群内的唯一性；在传统文件系统的存储中，单个文件的大小是有一定限制的，而 Ceph 中对象随着其元数据区增大可以变得非常巨大&lt;/p&gt;

&lt;h4 id=&quot;12crush&quot;&gt;1.2、CRUSH&lt;/h4&gt;

&lt;p&gt;在传统的文件存储系统中，数据的元数据占据着极其重要的位置，每次系统中新增数据时，元数据首先被更新，然后才是实际的数据被写入；在较小的存储系统中(GB/TB)，这种将元数据存储在某个固定的存储节点或者磁盘阵列中的做法还可以满足需求；当数据量增大到 PB/ZB 级别时，元数据查找性能将会成为一个很大的瓶颈；同时元数据的统一存放还可能造成单点故障，即当元数据丢失后，实际数据将无法被找回；与传统文件存储系统不同的是，&lt;strong&gt;Ceph 使用可扩展散列下的受控复制(Controlled Replication Under Scalable Hashing,CRUSH)算法来精确地计算数据应该被写入哪里/从哪里读取；CRUSH按需计算元数据，而不是存储元数据，从而解决了传统文件存储系统的瓶颈&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;13crush-查找&quot;&gt;1.3、CRUSH 查找&lt;/h4&gt;

&lt;p&gt;在 Ceph 中，元数据的计算和负载是分布式的，并且只有在需要时才会执行；元数据的计算过程称之为 CRUSH 查找，不同于其他分布式文件系统，Ceph 的 CRUSH 查找是由客户端使用自己的资源来完成的，从而去除了中心查找带来的性能以及单点故障问题；CRUSH 查找时，客户端先通过 monitor 获取集群 map 副本，然后从 map 副本中获取集群配置信息；然后通过对象信息、池ID等生成对象；接着通过对象和 PG 数散列后得到 Ceph 池中最终存放该对象的 PG；最终在通过 CRUSH 算法确定该 PG 所需存储的 OSD 位置，&lt;strong&gt;一旦确定了 OSD 位置，那么客户端将直接与 OSD 通讯完成数据读取与写入，这直接去除了中间环节，保证了性能的极大提升&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;14crush-层级结构&quot;&gt;1.4、CRUSH 层级结构&lt;/h4&gt;

&lt;p&gt;在 Ceph 中，CRUSH 是完全支持各种基础设施和用户自定义的；CRUSH 设备列表中预先定义了一系列的设备，包括磁盘、节点、机架、行、开关、电源电路、房间、数据中心等等；这些组件称之为故障区(CRUSH bucket)，用户可以通过自己的配置把不同的 OSD 分布在不同区域；&lt;strong&gt;此后 Ceph 存储数据时根据 CRUSH bucket 结构，将会保证每份数据都会在所定义的物理组件之间完全隔离；&lt;/strong&gt;比如我们定义了多个机架上的不同 OSD，那么 Ceph 存储时就会智能的将数据副本分散到多个机架之上，防止某个机架上机器全部跪了以后数据全部丢失的情况&lt;/p&gt;

&lt;h4 id=&quot;15恢复和再平衡&quot;&gt;1.5、恢复和再平衡&lt;/h4&gt;

&lt;p&gt;当故障区内任何组件出现故障时，Ceph 都会将其标记为 down 和 out 状态；然后默认情况下 Ceph 会等待 300秒之后进行数据恢复和再平衡，这个值可以通过在配置文件中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;mon osd down out interval&lt;/code&gt; 参数来调整&lt;/p&gt;

&lt;h4 id=&quot;16pg&quot;&gt;1.6、PG&lt;/h4&gt;

&lt;p&gt;PG 是一组对象集合体，根据 Ceph 的复制级别，每个PG 中的数据会被复制到多个 OSD 上，以保证其高可用状态&lt;/p&gt;

&lt;h4 id=&quot;17ceph-池&quot;&gt;1.7、Ceph 池&lt;/h4&gt;

&lt;p&gt;Ceph 池是一个存储对象的逻辑分区，每一个池中都包含若干个 PG，进而实现将一定对象映射到集群内不同 OSD 中，&lt;strong&gt;池可以以复制方式或者纠错码方式创建，但不可同时使用这两种方式&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;二ceph-组件调整及操作&quot;&gt;二、Ceph 组件调整及操作&lt;/h3&gt;

&lt;h4 id=&quot;21池操作&quot;&gt;2.1、池操作&lt;/h4&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 创建池&lt;/span&gt;
rados mkpool test-pool
&lt;span class=&quot;c&quot;&gt;# 列出池&lt;/span&gt;
rados lspools
&lt;span class=&quot;c&quot;&gt;# 复制池&lt;/span&gt;
rados cppool test-pool cp-pool
&lt;span class=&quot;c&quot;&gt;# 删除池&lt;/span&gt;
rados rmpool test-pool test-pool &lt;span class=&quot;nt&quot;&gt;--yes-i-really-really-mean-it&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;22对象操作&quot;&gt;2.2、对象操作&lt;/h4&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 将对象加入到池内&lt;/span&gt;
rados put testfile anaconda-ks.cfg &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 列出池内对象&lt;/span&gt;
rados &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 检查对象信息&lt;/span&gt;
ceph osd map &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;testfile
&lt;span class=&quot;c&quot;&gt;# 删除对象&lt;/span&gt;
rados rm testfile &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;23修改-pg-和-pgp&quot;&gt;2.3、修改 PG 和 PGP&lt;/h4&gt;

&lt;p&gt;计算 PG 数为 Ceph 企业级存储必不可少的的一部分，其中集群内 PG 计算公式如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PG 总数 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;OSD 数 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 100&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; / 最大副本数
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对于单个池来讲，我们还应该为池设定 PG 数，其中池的 PG 数计算公式如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PG 总数 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;OSD 数 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 100&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; / 最大副本数 / 池数
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;PGP 是为了实现定位而设计的 PG，PGP 的值应该与 PG 数量保持一致；&lt;strong&gt;当池的 pg_num 增加的时候，池内所有 PG 都会一分为二，但是他们仍然保持着以前 OSD 的映射关系；当增加 pgp_num 的时候，Ceph 集群才会将 PG 进行 OSD 迁移，然后开始再平衡过程&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;获取现有 PG 和 PGP 值可以通过如下命令&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ceph osd pool get &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;pg_num
ceph osd pool get &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;pgp_num
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当计算好 PG 和 PGP 以后可以通过以下命令设置&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ceph osd pool &lt;span class=&quot;nb&quot;&gt;set test &lt;/span&gt;pgp_num 32
ceph osd pool &lt;span class=&quot;nb&quot;&gt;set test &lt;/span&gt;pgp_num 32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同样在创建 pool 的时候也可以同步指定&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ceph osd pool create POOLNAME PG PGP
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;24pool-副本数调整&quot;&gt;2.4、pool 副本数调整&lt;/h4&gt;

&lt;p&gt;默认情况，当创建一个新的 pool 时，向 pool 内存储的数据只会有 2 个副本，查看 pool 副本数可以通过如下命令&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ceph osd dump | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;pool
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当我们需要修改默认副本数以使其满足高可靠性需求时，可以通过如下命令完成&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ceph osd pool &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;POOLNAME size NUM
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;25定制机群布局&quot;&gt;2.5、定制机群布局&lt;/h4&gt;

&lt;p&gt;上面已经讲述了 CRUSH bucket 的概念，通过以下相关命令，我们可以定制自己的集群布局，以使 Ceph 完成数据的容灾处理&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 查看现有集群布局&lt;/span&gt;
ceph osd tree
&lt;span class=&quot;c&quot;&gt;# 添加机架&lt;/span&gt;
ceph osd crush add-bucket rack01 rack
ceph osd crush add-bucket rack02 rack
ceph osd crush add-bucket rack03 rack
&lt;span class=&quot;c&quot;&gt;# 移动主机到不同的机架(dockerX 为我的主机名)&lt;/span&gt;
ceph osd crush move docker1 &lt;span class=&quot;nv&quot;&gt;rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;rack01
ceph osd crush move docker2 &lt;span class=&quot;nv&quot;&gt;rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;rack02
ceph osd crush move docker3 &lt;span class=&quot;nv&quot;&gt;rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;rack03
&lt;span class=&quot;c&quot;&gt;# 移动每个机架到默认的根下&lt;/span&gt;
ceph osd crush move rack01 &lt;span class=&quot;nv&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;default
ceph osd crush move rack02 &lt;span class=&quot;nv&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;default
ceph osd crush move rack03 &lt;span class=&quot;nv&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;default
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最终集群整体布局如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  ~ ceph osd tree
ID WEIGHT  TYPE NAME            UP/DOWN REWEIGHT PRIMARY-AFFINITY
&lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt; 0.01469 root default
&lt;span class=&quot;nt&quot;&gt;-5&lt;/span&gt; 0.00490     rack rack01
&lt;span class=&quot;nt&quot;&gt;-2&lt;/span&gt; 0.00490         host docker1
 0 0.00490             osd.0         up  1.00000          1.00000
&lt;span class=&quot;nt&quot;&gt;-6&lt;/span&gt; 0.00490     rack rack02
&lt;span class=&quot;nt&quot;&gt;-3&lt;/span&gt; 0.00490         host docker2
 1 0.00490             osd.1         up  1.00000          1.00000
&lt;span class=&quot;nt&quot;&gt;-7&lt;/span&gt; 0.00490     rack rack03
&lt;span class=&quot;nt&quot;&gt;-4&lt;/span&gt; 0.00490         host docker3
 2 0.00490             osd.2         up  1.00000          1.00000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;三ceph-硬件配置&quot;&gt;三、Ceph 硬件配置&lt;/h3&gt;

&lt;p&gt;硬件规划一般是一个企业级存储的必要工作，以下简述了 Ceph 的一般硬件需求&lt;/p&gt;

&lt;h4 id=&quot;31监控需求&quot;&gt;3.1、监控需求&lt;/h4&gt;

&lt;p&gt;Ceph monitor 通过维护整个集群的 map 从而完成集群的健康处理；但是 monitor 并不参与实际的数据存储，所以实际上 monitor 节点 CPU 占用、内存占用都比较少；一般单核 CPU 加几个 G 的内存即可满足需求；虽然 monitor 节点不参与实际存储工作，但是 monitor 的网卡至少应该是冗余的，因为一旦网络出现故障则集群健康会难以保证&lt;/p&gt;

&lt;h4 id=&quot;32osd-需求&quot;&gt;3.2、OSD 需求&lt;/h4&gt;

&lt;p&gt;OSD 作为 Ceph 集群的主要存储设施，其会占用一定的 CPU 和内存资源；一般推荐做法是每个节点的每块硬盘作为一个 OSD；同时 OSD 还需要写入日志，所以应当为 OSD 集成日志留有充足的空间；在出现故障时，OSD 需求的资源可能会更多，所以 OSD 节点根据实际情况(每个 OSD 会有一个线程)应该分配更多的 CPU 和内存；固态硬盘也会增加 OSD 存取速度和恢复速度&lt;/p&gt;

&lt;h4 id=&quot;33mds-需求&quot;&gt;3.3、MDS 需求&lt;/h4&gt;

&lt;p&gt;MDS 服务专门为 CephFS 存储元数据，所以相对于 monitor 和 OSD 节点，这个 MDS 节点的 CPU 需求会大得多，同时内存占用也是海量的，所以 MDS 一般会使用一个强劲的物理机单独搭建&lt;/p&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;</content><author><name>Jevic</name></author><summary type="html">本篇文章主要简述了 Ceph 的存储对象名词解释及其含义，以及对 Ceph 集群内 CRUSH bucket 调整、PG/PGP 参数调整等设置；同时参考了一些书籍资料简单的概述一下 Ceph 集群硬件要求等</summary></entry><entry><title type="html">docker registry</title><link href="http://0.0.0.0/2016/12/23/docker-registry/" rel="alternate" type="text/html" title="docker registry" /><published>2016-12-23T21:16:52+08:00</published><updated>2016-12-23T21:16:52+08:00</updated><id>http://0.0.0.0/2016/12/23/docker-registry</id><content type="html" xml:base="http://0.0.0.0/2016/12/23/docker-registry/">&lt;p&gt;关于私有仓库配置docker官网给出的参考示例 其实已经很详尽了，但是还是不免在配置过程中 踩坑。这里根据官网文档整理了配置示例供大家参考！&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;host文件&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
192.168.11.10   hub.test.io 
192.168.11.20   node1
192.168.11.30   node2

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;时间同步分别执行&quot;&gt;时间同步(分别执行)：&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@hub &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# yum install -y ntpdate &amp;amp;&amp;amp; ntpdate cn.pool.ntp.org&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@node1 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# yum install -y ntpdate &amp;amp;&amp;amp; ntpdate cn.pool.ntp.org&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@hub &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# crontab -l&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/5 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; ntpdate cn.pool.ntp.org
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;1仓库服务端设置-hubtestio&quot;&gt;1.仓库服务端设置 hub.test.io：&lt;/h2&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@hub &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# docker pull registry&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@hub &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# cat /etc/hosts   //内网没有DNS情况下修改hosts,修改主机名&lt;/span&gt;
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.11.10 hub.test.io
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@hub ~]# hostname    
hub.test.io
说明：如果私有仓库用的不是域名而是IP，请加上此设置：
- &lt;span class=&quot;c&quot;&gt;# sed -i '/^\[ v3_ca \]$/a subjectAltName = IP:192.168.10.10' /etc/ssl/openssl.cnf&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@hub &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# mkdir /opt/registry &amp;amp;&amp;amp; cd /opt/registry&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@hub registry]# mkdir auth certs
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@hub registry]# docker run &lt;span class=&quot;nt&quot;&gt;--entrypoint&lt;/span&gt; htpasswd registry:latest &lt;span class=&quot;nt&quot;&gt;-Bbn&lt;/span&gt; username password &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; auth/htpasswd  //自行更换用户名密码
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@hub registry]# &lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;auth/htpasswd   // 下面一行为空，切记不要修改生成后的文件
admin:&lt;span class=&quot;nv&quot;&gt;$2y$05$LSRMXpIbnvnj8ErzbRvKq&lt;/span&gt;.F04Qf3oajP7dFWQIjJBrFAoDXKM1I16

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@hub registry]# openssl req &lt;span class=&quot;nt&quot;&gt;-newkey&lt;/span&gt; rsa:4096 &lt;span class=&quot;nt&quot;&gt;-nodes&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sha256&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-keyout&lt;/span&gt; certs/ca.key &lt;span class=&quot;nt&quot;&gt;-x509&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-days&lt;/span&gt; 365 &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; certs/ca.crt
Generating a 4096 bit RSA private key
........
........
....++writing new private key to certs/ca.key
&lt;span class=&quot;nt&quot;&gt;-----&lt;/span&gt;
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter &lt;span class=&quot;s1&quot;&gt;'.'&lt;/span&gt;, the field will be left blank.
&lt;span class=&quot;nt&quot;&gt;-----&lt;/span&gt;
Country Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2 letter code&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;XX]:
State or Province Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;full name&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;:
Locality Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;eg, city&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Default City]:
Organization Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;eg, company&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Default Company Ltd]:
Organizational Unit Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;eg, section&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;:
Common Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;eg, your name or your servers hostname&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;:hub.test.io
Email Address &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;:
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@hub registry]# mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /etc/docker/certs.d/hub.test.io &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cp certs/ca.crt /etc/docker/certs.d/hub.test.io
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@hub registry]# &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; /etc/docker/certs.d/hub.test.io/
ca.crt
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@hub registry]# systemctl daemon-reload &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; systemctl restart docker
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@hub registry]# &lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;start.sh
&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 443:5000 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; registry &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--restart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /var/lib/registry:/var/lib/registry &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;/auth:/auth &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;REGISTRY_AUTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;htpasswd &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;REGISTRY_AUTH_HTPASSWD_REALM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Registry Realm&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;REGISTRY_AUTH_HTPASSWD_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/auth/htpasswd &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;/certs:/certs &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;REGISTRY_HTTP_TLS_CERTIFICATE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/certs/ca.crt &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;REGISTRY_HTTP_TLS_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/certs/ca.key &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
registry:latest
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@hub registry]# tree   //最终的目录结构
&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
├── auth
│   └── htpasswd
├── certs
│   ├── ca.crt
│   └── ca.key
└── start.sh
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@hub registry]# docker login hub.test.io
Username: admin
Password: 
Login Succeeded
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@hub registry]# docker tag pause-amd64:3.0 hub.test.io/pause-amd64:3.0
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@hub registry]# docker push hub.test.io/pause-amd64:3.0
The push refers to a repository &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;hub.test.io/pause-amd64]
5f70bf18a086: Pushed 
41ff149e94f2: Pushed 
3.0: digest: sha256:ec6581792f828ab138bc7ed65205dbd4d7df966249179b7afbb9f6cac729771b size: 939
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;客户端&quot;&gt;客户端：&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.仓库配置:
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@node1 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# mkdir /etc/docker/certs.d/hub.test.io &lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@node1 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# scp hub.test.io:/etc/docker/certs.d/hub.test.io/ca.crt /etc/docker/certs.d/hub.test.io&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;### 或者通过添加仓库地址配置: ###&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@node1 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# vim /lib/systemd/system/docker.service&lt;/span&gt;
.....
&lt;span class=&quot;nt&quot;&gt;--insecure-registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hub.test.io&quot;&lt;/span&gt;
.....

2.登陆仓库并下载镜像：
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@node1 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# docker login hub.test.io&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@node1 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# docker pull hub.test.io/pause-amd64:3.0&lt;/span&gt;
3.0: Pulling from pause-amd64
a3ed95caeb02: Pull &lt;span class=&quot;nb&quot;&gt;complete 
&lt;/span&gt;f11233434377: Pull &lt;span class=&quot;nb&quot;&gt;complete 
&lt;/span&gt;Digest: sha256:ec6581792f828ab138bc7ed65205dbd4d7df966249179b7afbb9f6cac729771b
Status: Downloaded newer image &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;hub.test.io/pause-amd64:3.0
至此私有仓库就搭建完成了
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;更多配置详解 请查看 &lt;a href=&quot;https://docs.docker.com/registry/&quot;&gt;Docker官方registry配置文档&lt;/a&gt;&lt;/p&gt;</content><author><name>Jevic</name></author><summary type="html">关于私有仓库配置docker官网给出的参考示例 其实已经很详尽了，但是还是不免在配置过程中 踩坑。这里根据官网文档整理了配置示例供大家参考！</summary></entry></feed>