<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://0.0.0.0/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0/" rel="alternate" type="text/html" /><updated>2017-12-29T18:05:23+08:00</updated><id>http://0.0.0.0/</id><title type="html">Jevic</title><subtitle>前路漫漫,忆往昔......</subtitle><author><name>Jevic</name></author><entry><title type="html">Kafka 配置文件详解</title><link href="http://0.0.0.0/2017/12/29/kafka-server-config/" rel="alternate" type="text/html" title="Kafka 配置文件详解" /><published>2017-12-29T17:24:37+08:00</published><updated>2017-12-29T17:24:37+08:00</updated><id>http://0.0.0.0/2017/12/29/kafka-server-config</id><content type="html" xml:base="http://0.0.0.0/2017/12/29/kafka-server-config/">&lt;h2 id=&quot;kafka-参数说明&quot;&gt;kafka 参数说明&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;server.properties配置如下：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;broker.id&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
num.network.threads&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2
num.io.threads&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8
socket.send.buffer.bytes&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1048576
socket.receive.buffer.bytes&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1048576
socket.request.max.bytes&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;104857600
log.dirs&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/tmp/kafka-logs
num.partitions&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2
log.retention.hours&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;168
 
log.segment.bytes&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;536870912
log.retention.check.interval.ms&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;60000
log.cleaner.enable&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false
 
&lt;/span&gt;zookeeper.connect&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;localhost:2181
zookeeper.connection.timeout.ms&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1000000
 
指定每一个server.properties对应项的含义：
参数
说明&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;解释&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
broker.id &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
每一个broker在集群中的唯一表示，要求是正数。当该服务器的IP地址发生改变时，broker.id没有变化，则不会影响consumers的消息情况
log.dirs&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/data/kafka-logs
kafka数据的存放地址，多个地址的话用逗号分割 /data/kafka-logs-1，/data/kafka-logs-2
port &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;9092
broker server服务端口
message.max.bytes &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;6525000
表示消息体的最大大小，单位是字节
num.network.threads &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4
broker处理消息的最大线程数，一般情况下不需要去修改
num.io.threads &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8
broker处理磁盘IO的线程数，数值应该大于你的硬盘数
background.threads &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4
一些后台任务处理的线程数，例如过期消息文件的删除等，一般情况下不需要去做修改
queued.max.requests &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;500
等待IO线程处理的请求队列最大数，若是等待IO的请求超过这个数值，那么会停止接受外部消息，应该是一种自我保护机制。
host.name
broker的主机地址，若是设置了，那么会绑定到这个地址上，若是没有，会绑定到所有的接口上，并将其中之一发送到ZK，一般不设置
socket.send.buffer.bytes&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;100&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;1024
socket的发送缓冲区，socket的调优参数SO_SNDBUFF
socket.receive.buffer.bytes &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;100&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;1024
socket的接受缓冲区，socket的调优参数SO_RCVBUFF
socket.request.max.bytes &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;100&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;1024&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;1024
socket请求的最大数值，防止serverOOM，message.max.bytes必然要小于socket.request.max.bytes，会被topic创建时的指定参数覆盖
log.segment.bytes &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1024&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;1024&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;1024
topic的分区是以一堆segment文件存储的，这个控制每个segment的大小，会被topic创建时的指定参数覆盖
log.roll.hours &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;24&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;7
这个参数会在日志segment没有达到log.segment.bytes设置的大小，也会强制新建一个segment会被 topic创建时的指定参数覆盖
log.cleanup.policy &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; delete
日志清理策略选择有：delete和compact主要针对过期数据的处理，或是日志文件达到限制的额度，会被 topic创建时的指定参数覆盖
log.retention.minutes&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3days
数据存储的最大时间超过这个时间会根据log.cleanup.policy设置的策略处理数据，也就是消费端能够多久去消费数据
log.retention.bytes和log.retention.minutes任意一个达到要求，都会执行删除，会被topic创建时的指定参数覆盖
log.retention.bytes&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt;
topic每个分区的最大文件大小，一个topic的大小限制 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 分区数&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;log.retention.bytes。-1没有大小限log.retention.bytes和log.retention.minutes任意一个达到要求，都会执行删除，会被topic创建时的指定参数覆盖
log.retention.check.interval.ms&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5minutes
文件大小检查的周期时间，是否处罚 log.cleanup.policy中设置的策略
log.cleaner.enable&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false
&lt;/span&gt;是否开启日志压缩
log.cleaner.threads &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2
日志压缩运行的线程数
log.cleaner.io.max.bytes.per.second&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;None
日志压缩时候处理的最大大小
log.cleaner.dedupe.buffer.size&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;500&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;1024&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;1024
日志压缩去重时候的缓存空间，在空间允许的情况下，越大越好
log.cleaner.io.buffer.size&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;512&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;1024
日志清理时候用到的IO块大小一般不需要修改
log.cleaner.io.buffer.load.factor &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.9
日志清理中hash表的扩大因子一般不需要修改
log.cleaner.backoff.ms &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;15000
检查是否处罚日志清理的间隔
log.cleaner.min.cleanable.ratio&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.5
日志清理的频率控制，越大意味着更高效的清理，同时会存在一些空间上的浪费，会被topic创建时的指定参数覆盖
log.cleaner.delete.retention.ms &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1day
对于压缩的日志保留的最长时间，也是客户端消费消息的最长时间，同log.retention.minutes的区别在于一个控制未压缩数据，一个控制压缩后的数据。会被topic创建时的指定参数覆盖
log.index.size.max.bytes &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;1024&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;1024
对于segment日志的索引文件大小限制，会被topic创建时的指定参数覆盖
log.index.interval.bytes &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4096
当执行一个fetch操作后，需要一定的空间来扫描最近的offset大小，设置越大，代表扫描速度越快，但是也更好内存，一般情况下不需要搭理这个参数
log.flush.interval.messages&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;None
log文件”sync”到磁盘之前累积的消息条数,因为磁盘IO操作是一个慢操作,但又是一个”数据可靠性&lt;span class=&quot;s2&quot;&gt;&quot;的必要手段,所以此参数的设置,需要在&quot;&lt;/span&gt;数据可靠性&lt;span class=&quot;s2&quot;&gt;&quot;与&quot;&lt;/span&gt;性能&lt;span class=&quot;s2&quot;&gt;&quot;之间做必要的权衡.如果此值过大,将会导致每次&quot;&lt;/span&gt;fsync&lt;span class=&quot;s2&quot;&gt;&quot;的时间较长(IO阻塞),如果此值过小,将会导致&quot;&lt;/span&gt;fsync&lt;span class=&quot;s2&quot;&gt;&quot;的次数较多,这也意味着整体的client请求有一定的延迟.物理server故障,将会导致没有fsync的消息丢失.
log.flush.scheduler.interval.ms =3000
检查是否需要固化到硬盘的时间间隔
log.flush.interval.ms = None
仅仅通过interval来控制消息的磁盘写入时机,是不足的.此参数用于控制&quot;&lt;/span&gt;fsync&lt;span class=&quot;s2&quot;&gt;&quot;的时间间隔,如果消息量始终没有达到阀值,但是离上一次磁盘同步的时间间隔达到阀值,也将触发.
log.delete.delay.ms =60000
文件在索引中清除后保留的时间一般不需要去修改
log.flush.offset.checkpoint.interval.ms =60000
控制上次固化硬盘的时间点，以便于数据恢复一般不需要去修改
auto.create.topics.enable =true
是否允许自动创建topic，若是false，就需要通过命令创建topic
default.replication.factor =1
是否允许自动创建topic，若是false，就需要通过命令创建topic
num.partitions =1
每个topic的分区个数，若是在topic创建时候没有指定的话会被topic创建时的指定参数覆盖
 
 
以下是kafka中Leader,replicas配置参数
 
controller.socket.timeout.ms =30000
partition leader与replicas之间通讯时,socket的超时时间
controller.message.queue.size=10
partition leader与replicas数据同步时,消息的队列尺寸
replica.lag.time.max.ms =10000
replicas响应partition leader的最长等待时间，若是超过这个时间，就将replicas列入ISR(in-sync replicas)，并认为它是死的，不会再加入管理中
replica.lag.max.messages =4000
如果follower落后与leader太多,将会认为此follower[或者说partition relicas]已经失效
##通常,在follower与leader通讯时,因为网络延迟或者链接断开,总会导致replicas中消息同步滞后
##如果消息之后太多,leader将认为此follower网络延迟较大或者消息吞吐能力有限,将会把此replicas迁移
##到其他follower中.
##在broker数量较少,或者网络不足的环境中,建议提高此值.
replica.socket.timeout.ms=30*1000
follower与leader之间的socket超时时间
replica.socket.receive.buffer.bytes=64*1024
leader复制时候的socket缓存大小
replica.fetch.max.bytes =1024*1024
replicas每次获取数据的最大大小
replica.fetch.wait.max.ms =500
replicas同leader之间通信的最大等待时间，失败了会重试
replica.fetch.min.bytes =1
fetch的最小数据尺寸,如果leader中尚未同步的数据不足此值,将会阻塞,直到满足条件
num.replica.fetchers=1
leader进行复制的线程数，增大这个数值会增加follower的IO
replica.high.watermark.checkpoint.interval.ms =5000
每个replica检查是否将最高水位进行固化的频率
controlled.shutdown.enable =false
是否允许控制器关闭broker ,若是设置为true,会关闭所有在这个broker上的leader，并转移到其他broker
controlled.shutdown.max.retries =3
控制器关闭的尝试次数
controlled.shutdown.retry.backoff.ms =5000
每次关闭尝试的时间间隔
leader.imbalance.per.broker.percentage =10
leader的不平衡比例，若是超过这个数值，会对分区进行重新的平衡
leader.imbalance.check.interval.seconds =300
检查leader是否不平衡的时间间隔
offset.metadata.max.bytes
客户端保留offset信息的最大空间大小
kafka中zookeeper参数配置
 
zookeeper.connect = localhost:2181
zookeeper集群的地址，可以是多个，多个之间用逗号分割 hostname1:port1,hostname2:port2,hostname3:port3
zookeeper.session.timeout.ms=6000
ZooKeeper的最大超时时间，就是心跳的间隔，若是没有反映，那么认为已经死了，不易过大
zookeeper.connection.timeout.ms =6000
ZooKeeper的连接超时时间
zookeeper.sync.time.ms =2000
ZooKeeper集群中leader和follower之间的同步实际那

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Jevic</name></author><summary type="html">kafka 参数说明 server.properties配置如下：</summary></entry><entry><title type="html">虚拟专用网络 openvpn</title><link href="http://0.0.0.0/2017/12/29/linux-openvpn/" rel="alternate" type="text/html" title="虚拟专用网络 openvpn" /><published>2017-12-29T14:33:17+08:00</published><updated>2017-12-29T14:33:17+08:00</updated><id>http://0.0.0.0/2017/12/29/linux-openvpn</id><content type="html" xml:base="http://0.0.0.0/2017/12/29/linux-openvpn/">&lt;h2 id=&quot;配置安装环境&quot;&gt;配置安装环境&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn ~]# yum install &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; gcc gcc-c++ pam-devel cmake openssl penssl-devel
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn ~]# yum install &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; lrzsz    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Secure 上传下载&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;## 2.关闭SELINUX、清除防火墙设置&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn ~]# vim /etc/selinx/config
&lt;span class=&quot;c&quot;&gt;#     disabled - No SELinux policy is loaded.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SELINUX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;disabled
  
&lt;span class=&quot;c&quot;&gt;## 3.开启路由转发功能&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn ~]# &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;net.ipv4.ip_forward = 1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/sysctl.conf
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn ~]# sysctl &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;
net.ipv4.ip_forward &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1


&lt;span class=&quot;c&quot;&gt;## 4.防火墙规则设置&lt;/span&gt;
Centos7下：
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn ~]# systemctl disable firewalld
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn ~]# systemctl stop firewalld
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn ~]# yum install iptables-services &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn ~]# iptables &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; iptables &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; nat &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt;  （清除所有规则）
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn ~]# iptables &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; nat &lt;span class=&quot;nt&quot;&gt;-nL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; iptables &lt;span class=&quot;nt&quot;&gt;-nL&lt;/span&gt;   
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn ~]# iptables &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; nat &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; POSTROUTING &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; eth0 &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; 10.8.0.0/24 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; MASQUERADE
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn ~]# iptables &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; udp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 3307 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT     &lt;span class=&quot;c&quot;&gt;## 3307为服务开放的端口&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn ~]# service iptables save
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn openvpn]# iptables &lt;span class=&quot;nt&quot;&gt;-nL&lt;/span&gt;
Chain INPUT &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;policy ACCEPT&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&quot;nb&quot;&gt;source               &lt;/span&gt;destination         
ACCEPT     udp  &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;  0.0.0.0/0            0.0.0.0/0            udp dpt:3307
......
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn openvpn]# iptables &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; nat &lt;span class=&quot;nt&quot;&gt;-nL&lt;/span&gt;
Chain PREROUTING &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;policy ACCEPT&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
......       
Chain POSTROUTING &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;policy ACCEPT&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&quot;nb&quot;&gt;source               &lt;/span&gt;destination         
MASQUERADE  all  &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;  10.8.0.0/24          0.0.0.0/0 


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;安装-lzo-和-openvpn&quot;&gt;安装 LZO 和 openvpn&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;下载地址：http://pan.baidu.com/s/1kTxS4AF&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn ~]# &lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-zxf&lt;/span&gt; lzo-2.06.tar.gz 
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn ~]# &lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-zxf&lt;/span&gt; openvpn-2.2.2.tar.gz 
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn ~]#cd lzo-2.06
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn lzo-2.06]# ./configure &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn ~]# &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;openvpn-2.2.2
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn openvpn-2.2.2]# &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn openvpn-2.2.2]# ./configure 
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn openvpn-2.2.2]# make &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;配置openvpn&quot;&gt;配置openVPN&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn ~]# mkdir /etc/openvpn
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn ~]# cp &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; openvpn-2.2.2/easy-rsa/ /etc/openvpn/
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn ~]# &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /etc/openvpn/easy-rsa/2.0/
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn 2.0]# vi vars 
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KEY_COUNTRY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CN&quot;&lt;/span&gt; 
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KEY_PROVINCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;GD&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KEY_CITY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SZ&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KEY_ORG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;YJ&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KEY_EMAIL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test@test.cn&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KEY_EMAIL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mail@host.domain
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KEY_CN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;changeme
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KEY_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;changeme
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KEY_OU&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;changeme
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PKCS11_MODULE_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;changeme
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PKCS11_PIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1234
 
 
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn 2.0]# &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ./vars
NOTE: If you run ./clean-all, I will be doing a rm &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; on /etc/openvpn/easy-rsa/2.0/keys
初始化证书授权中心，创建CA证书，输出信息中已经引用了之前所设置的变量值，这里一路回车即可
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn 2.0]# ./clean-all 
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn 2.0]# ./build-ca （默认，一路回车即可）
Generating a 1024 bit RSA private key
.............++++++
.......................++++++
&lt;span class=&quot;nt&quot;&gt;-----&lt;/span&gt;
Country Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2 letter code&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;CN]:
State or Province Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;full name&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;GD]:
Locality Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;eg, city&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;SZ]:
Organization Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;eg, company&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;HF]:
Organizational Unit Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;eg, section&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;changeme]:
Common Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;eg, your name or your server&lt;span class=&quot;s1&quot;&gt;'s hostname) [changeme]:
Name [changeme]:
Email Address [mail@host.domain]:

创建Diffie Hellman 参数,Diffie Hellman 用于增强安全性，在OpenVPN是必须的！
[root@openvpn ~]# ./build-dh  

[root@openvpn 2.0]# ./build-key-server server （创建服务器证书和密钥！“server&quot;可以自行设定，这里默认为server）
emailAddress          :IA5STRING:'&lt;/span&gt;mail@host.domain&lt;span class=&quot;s1&quot;&gt;' （前面选项一路回车，下面两项手动输入”y&quot;）
Certificate is to be certified until Jun 13 06:31:17 2025 GMT (3650 days)
Sign the certificate? [y/n]:y
1 out of 1 certificate requests certified, commit? [y/n]y
Write out database with 1 new entries
Data Base Updated

[root@openvpn 2.0]# ./build-key client （客户端证书和密钥，名称自定义，这里默认也是client）
emailAddress          :IA5STRING:'&lt;/span&gt;mail@host.domain&lt;span class=&quot;s1&quot;&gt;' （前面选项一路回车，下面两项手动输入”y&quot;）
Certificate is to be certified until Jun 13 06:31:43 2025 GMT (3650 days)
Sign the certificate? [y/n]:y      （这两项都是 “y&quot;）
1 out of 1 certificate requests certified, commit? [y/n]y
Write out database with 1 new entries
Data Base Updated
至此所需证书及密钥都已经生成完毕。


复制服务器证书文件到/etc/openvpn/ 下
[root@openvpn keys]# cp dh1024.pem ca.crt server.crt server.key /etc/openvpn/
[root@openvpn keys]# sz ca.crt client.crt client.key (下载到本地，客户端使用)

复制服务器配置文件到/etc/openvpn下，并编辑添加配置相关参数：
[root@openvpn keys]# cp /root/openvpn-2.2.2/sample-config-files/server.conf  /etc/openvpn/server.conf
[root@openvpn keys]# vi /etc/openvpn/server.conf
local 10.1.50.222    # VPN服务器地址
port 3307    # 端口号
proto udp  # 协议类型
dev tun
ca /etc/openvpn/ca.crt
cert /etc/openvpn/ltyserver.crt
key /etc/openvpn/ltyserver.key  # This file should be kept secret
dh /etc/openvpn/dh1024.pem
server 10.8.0.0 255.255.255.0  #vpn客户端地址段
ifconfig-pool-persist ipp.txt
push &quot;route 10.1.50.0 255.255.0.0&quot;
push &quot;route 10.1.10.0 255.255.0.0&quot;
push &quot;redirect-gateway&quot;   #使客户端的默认网关指向VPN,所有连接从VPN转发
push &quot;dhcp-option DNS 10.1.254.1&quot;
push &quot;dhcp-option DNS 202.96.134.133&quot;
keepalive 10 120
comp-lzo
persist-key
persist-tun
status openvpn-status.log
verb 3
#吊销证书参数 初始安装时无需设置,否则报错无法启动
;crl-verify /etc/openvpn/easy-rsa/2.0/keys/crl.pem  


[root@openvpn keys]# openvpn --config /etc/openvpn/server.conf       启动服务
.....................................................
Tue Jun 16 03:11:17 2015 Initialization Sequence Completed （初始化顺序完成）
服务端配置完成，启动程序，查看是否监听3307的udp端口
默认为udp，并且看到多出来一块网卡tun0，IP为10.8.0.1

添加开机自启：
[root@openvpn ~]# grep &quot;openvpn&quot; /etc/rc.d/rc.local 
/usr/local/sbin/openvpn --daemon --config /etc/openvpn/server.conf

下载客户端证书、密钥、客户端配置文件
[root@openvpn ]# sz openvpn-2.2.2/sample/sample-config-files/client.conf
修改以下4项配置：
remote x.x.x.x 3307
ca ca.crt
cert client.crt
key client.key

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;客户端证书文件脚本&quot;&gt;客户端证书文件脚本&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@ ~]# &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/openvpn/easy-rsa/2.0/autoclientkey.sh
&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## 创建用户证书文件&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PWD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/openvpn/easy-rsa/2.0
&lt;span class=&quot;nv&quot;&gt;KONG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;n&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PWD&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;## 创建证书文件&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; vars
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;sleep 1
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$KONG&lt;/span&gt;
sleep 1
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$KONG&lt;/span&gt;
sleep 1
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$KONG&lt;/span&gt;
sleep 1
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$KONG&lt;/span&gt;
sleep 1
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$KONG&lt;/span&gt;
sleep 1
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;y&quot;&lt;/span&gt;
sleep 1
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;y&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;|./build-key &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;keys/
&lt;span class=&quot;c&quot;&gt;## 修改客户端配置文件&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## cp openvpn-2.2.2/sample-config-files/client.conf /etc/openvpn/easy-rsa/2.0/keys/client.ovpn&lt;/span&gt;
sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s/client.crt/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.crt/g&quot;&lt;/span&gt; client.ovpn
sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s/client.key/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.key/g&quot;&lt;/span&gt; client.ovpn

&lt;span class=&quot;c&quot;&gt;## 打包文件并sz上传到本地&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## &lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-zcvf&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;.tar.gz &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;.crt &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;.key ca.crt client.ovpn
sz &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;.tar.gz

&lt;span class=&quot;c&quot;&gt;## 恢复默认客户端配置文件&lt;/span&gt;
sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/client/g&quot;&lt;/span&gt; client.ovpn
sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/client/g&quot;&lt;/span&gt; client.ovpn

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;常用操作&quot;&gt;常用操作&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
删除账号
注销用户证书
1. 进入 OpenVPN 安装目录
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn ~]# &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /etc/openvpn/easy-rsa/2.0/ 
2. 执行 vars 命令 
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn ~]# &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; ./var
3. 使用 revoke-full 命令，吊销客户端证书。命令格式为： 
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn ~]# ./revoke-full client1 
这条命令执行完成之后，会在 keys 目录下面，生成一个 crl.pem 文件，这个文件中包含了吊销证书的名单。 
成功注销某个证书之后，可以打开　keys/index.txt 文件，可以看到被注销的证书前面，已标记为R． 
4. 确保服务端配置文件打开了 crl-verify 选项 
在服务端的配置文件 server.conf 中，加入这样一行： 
如果 server.conf 文件和 crl.pem 没有在同一目录下面，则 crl.pem 应该写绝对路径，例如: 
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@openvpn ~]# &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/openvpn/server.conf
crl-verify  /openvpn-2.0.5/easy-rsa/2.0/keys/crl.pem 

访问控制
iptables &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; FORWARD &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; tun0 &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; 10.10.10.0/30 &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; 10.10.10.4 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
意思是只允许10.10.10.0网段的IP访问10.10.10.4，如许访问多个IP，及添加多条命令即可。

Openvpn的负载均衡和高可用
搭建另一台openvpn服务器，将原来的ca.crt  ca.key server.key server.crt server.csr 复制到/etc/openvpn 目录下,在客户端配置文件当中添加3条命令：
remote 192.168.3.96 1195  &lt;span class=&quot;c&quot;&gt;#openvpn 服务器ip&lt;/span&gt;
remote-random   &lt;span class=&quot;c&quot;&gt;#开启远程随机服务器&lt;/span&gt;
resolv-retry 60   &lt;span class=&quot;c&quot;&gt;#开启断开重连60s&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;</content><author><name>Jevic</name></author><summary type="html">配置安装环境</summary></entry><entry><title type="html">sublimeText3 插件配置快捷操作</title><link href="http://0.0.0.0/2017/12/29/sublimetext3/" rel="alternate" type="text/html" title="sublimeText3 插件配置快捷操作" /><published>2017-12-29T13:07:51+08:00</published><updated>2017-12-29T13:07:51+08:00</updated><id>http://0.0.0.0/2017/12/29/sublimetext3</id><content type="html" xml:base="http://0.0.0.0/2017/12/29/sublimetext3/">&lt;h2 id=&quot;sublimetext3-for-mac-os&quot;&gt;SublimeText3 for Mac OS&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;工欲善其事必先利其器&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;禁止自动更新&quot;&gt;禁止自动更新&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://ourpypwzb.bkt.clouddn.com/sublimeText_User.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;添加 “update_check”: false,&lt;/li&gt;
  &lt;li&gt;点击菜单栏 Help –&amp;gt; license 输入以下注册信息&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;—– BEGIN LICENSE —–
Michael Barnes
Single User License
EA7E-821385
8A353C41 872A0D5C DF9B2950 AFF6F667
C458EA6D 8EA3C286 98D1D650 131A97AB
AA919AEC EF20E143 B361B1E7 4C8B7F04
B085E65E 2F5F5360 8489D422 FB8FC1AA
93F6323C FD7F7544 3F39C318 D95E6480
FCCC7561 8A4A1741 68FA4223 ADCEDE07
200C25BE DBBC4855 C4CFB774 C5EC138C
0FEC1CEF D9DCECEC D3A5DAD1 01316C36
—— END LICENSE ——
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;安装-package-control&quot;&gt;安装 Package Control&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;所有插件都需要使用此工具来进行安装!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;打开 Sublime Text 3&lt;/li&gt;
  &lt;li&gt;点击顶部菜单的 View -&amp;gt; Show Console&lt;/li&gt;
  &lt;li&gt;输入以下代码或者直接访问此链接获取 https://packagecontrol.io/installation#st3&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://ourpypwzb.bkt.clouddn.com/package01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;点击回车 安装完后即可通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;Command + Shift + P&lt;/code&gt; 打开 Package Control 来安装插件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ourpypwzb.bkt.clouddn.com/package02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1&gt;#&lt;/h1&gt;

&lt;h2 id=&quot;插件&quot;&gt;插件&lt;/h2&gt;
&lt;h3 id=&quot;推荐插件&quot;&gt;推荐插件&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Emmet 概括的说，Emmet(其前身是Zen Coding) 是一个可以让你更快更高效地编写HTML/CSS，可以节省你大量时间的插件。 
调用Emmet快捷键：⌃⌥↩。&lt;/li&gt;
  &lt;li&gt;Git 这个插件会将git整合进你的SublimeText，使的你可以在SublimeText中运行Git命令，包括添加，提交文件，查看日志，文件注解以及其它Git功能。&lt;/li&gt;
  &lt;li&gt;AutoFileName 自动补全文件路径，非常方便。&lt;/li&gt;
  &lt;li&gt;DocBlockr DocBlockr会成为你编写代码文档的有效工具。当输入/**并且按下Tab键的时候，这个插件会自动解析任何一个函数并且为你准备好合适的模板&lt;/li&gt;
  &lt;li&gt;SFTP 快速编辑远程服务器文件&lt;/li&gt;
  &lt;li&gt;SublimeLinter 行内语法检测插件，支持： C/C++, Java, Python, PHP, js, HTML, CSS, etc.&lt;/li&gt;
  &lt;li&gt;Alignment 简单到极致的多行选择和多行选择对齐插件&lt;/li&gt;
  &lt;li&gt;Markdown-preview Markdown&lt;/li&gt;
  &lt;li&gt;ChineseLocalization Sublime 汉化插件&lt;/li&gt;
  &lt;li&gt;Anaconda Python&lt;/li&gt;
  &lt;li&gt;ctags
    &lt;h3 id=&quot;view-html插件&quot;&gt;view HTML插件&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;shift + command + p&lt;/li&gt;
      &lt;li&gt;输入pcip 选择Install Package并回车&lt;/li&gt;
      &lt;li&gt;view 回车安装&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[  
{ &quot;keys&quot;: [&quot;f2&quot;], &quot;command&quot;: &quot;open_in_browser&quot; },
]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://ourpypwzb.bkt.clouddn.com/viewhtml_01.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://ourpypwzb.bkt.clouddn.com/viewhtml_02.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://ourpypwzb.bkt.clouddn.com/viewhtml_set_03.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://ourpypwzb.bkt.clouddn.com/viewhtml_key_04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;浏览markdown文件&quot;&gt;浏览markdown文件&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Command + Shift + P&lt;/li&gt;
  &lt;li&gt;pcip&lt;/li&gt;
  &lt;li&gt;mp&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;python-必备&quot;&gt;Python 必备&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;anaconda&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;color_scheme&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;Packages/Color Scheme - Default/Monokai.tmTheme&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;font_size&quot;&lt;/span&gt;: 14,
    &lt;span class=&quot;s2&quot;&gt;&quot;ignored_packages&quot;&lt;/span&gt;:
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Vintage&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;anaconda_linting&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;## 取消Python 编写时白色框框提示&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;sublimetext3-for-mac-os-常用快捷键&quot;&gt;SublimeText3 for Mac OS 常用快捷键&lt;/h2&gt;
&lt;h3 id=&quot;符号说明&quot;&gt;符号说明&lt;/h3&gt;

&lt;p&gt;⌘：command 
⌃：control 
⌥：option 
⇧：shift 
↩：enter 
⌫：delete 
打开/关闭/前往&lt;/p&gt;

&lt;h4 id=&quot;快捷键-功能&quot;&gt;快捷键 功能&lt;/h4&gt;
&lt;p&gt;⌘⇧N 打开一个新的sublime窗口 
⌘N 新建文件 
⌘⇧W 关闭sublime，关闭所有文件 
⌘W 关闭当前文件 
⌘P 跳转、前往文件、前往项目、命令提示、前往method等等（Goto anything） 
⌘⇧T 重新打开最近关闭的文件 
⌘T 前往文件 
⌘⌃P 前往项目 
⌘R 前往method 
⌘⇧P 命令提示 
⌃G 前往行 
⌘KB 开关侧栏 
⌃` 打开控制台 
⌃- 光标跳回上一个位置 
⌃⇧- 光标恢复位置&lt;/p&gt;
&lt;h4 id=&quot;快捷键-编辑&quot;&gt;快捷键 编辑&lt;/h4&gt;

&lt;p&gt;⌘A 全选 
⌘L 选择行（重复按下将下一行加入选择） 
⌘D 选择词（重复按下时多重选择相同的词进行多重编辑） 
⌃⇧M 选择括号的内容 
⌘⇧↩ 在当前行前插入新行 
⌘↩ 在当前行后插入新行 
⌃⇧K 删除行 
⌘KK 从光标处删除至行尾 
⌘K⌫ 从光标处删除至行首 
⌘⇧D 复制（多）行 
⌘J 合并（多）行 
⌘KU 改为大写 
⌘KL 改为小写 
⌘C 复制 
⌘X 剪切 
⌘V 粘贴 
⌘/ 注释 
⌘⌥/ 块注释 
⌘Z 撤销 
⌘Y 恢复撤销 
⌘⇧V 粘贴并自动缩进 
⌘⌥V 从历史中选择粘贴 
⌃M 跳转至对应的括号 
⌘U 软撤销（可撤销光标移动） 
⌘⇧U 软重做（可重做光标移动） 
⌘⇧S 保存所有文件 
⌘] 向右缩进 
⌘[ 向左缩进 
⌘⌥T 特殊符号集 
⌘⇧L 将选区转换成多个单行选区&lt;/p&gt;

&lt;h4 id=&quot;查找替换&quot;&gt;查找/替换&lt;/h4&gt;
&lt;p&gt;⌘f 查找 
⌘⌥f 查找并替换 
⌘⌥g 查找下一个符合当前所选的内容 
⌘⌃g 查找所有符合当前选择的内容进行多重编辑 
⌘⇧F 在所有打开的文件中进行查找&lt;/p&gt;
&lt;h4 id=&quot;拆分窗口标签页&quot;&gt;拆分窗口/标签页&lt;/h4&gt;

&lt;p&gt;⌘⌥[1,2,3,4] 单列、双列、三列、四列 
⌘⌥5 网格（4组） 
⌃[1,2,3,4] 焦点移动到相应的组（分屏编号） 
⌃⇧[1,2,3,4] 将当前文件移动到相应的组（分屏编号） 
⌘[1,2,3,4] 选择相应的标签页&lt;/p&gt;
&lt;h4 id=&quot;快捷操作&quot;&gt;快捷操作&lt;/h4&gt;

&lt;p&gt;⌘⌃上下键 两行交换位置 
⌘KB 显示/隐藏侧边&lt;/p&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;</content><author><name>Jevic</name></author><summary type="html">SublimeText3 for Mac OS 工欲善其事必先利其器</summary></entry><entry><title type="html">jenkens-gitlab-docker 自动化构建镜像(一)</title><link href="http://0.0.0.0/2017/12/26/docker-jenkins-gitlab-images/" rel="alternate" type="text/html" title="jenkens-gitlab-docker 自动化构建镜像(一)" /><published>2017-12-26T21:51:44+08:00</published><updated>2017-12-26T21:51:44+08:00</updated><id>http://0.0.0.0/2017/12/26/docker-jenkins-gitlab-images</id><content type="html" xml:base="http://0.0.0.0/2017/12/26/docker-jenkins-gitlab-images/">&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;gitlab来管理dockerfile 源码&lt;/li&gt;
    &lt;li&gt;使用jenkins来构建部署应用的docker 镜像并自动push到私有仓库
      &lt;ul&gt;
        &lt;li&gt;通过执行相关自定义操作来进行应用的自动测试、部署应用操作&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;进而减少不必要的人为手动操作,驱动自动化的应用部署极大提升效率,实现持续集成与构建!&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;此示例演示了镜像的自动构建操作，更多的例如自动部署应用 后续补充……&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;安装-docker&quot;&gt;安装 Docker&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;省略…… 请自行查看docker官方文档&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;运行jenkins&quot;&gt;运行Jenkins&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;https://hub.docker.com/r/jevic/jenkins/&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; jenkins &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8080:8080 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 50000:50000 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /data/ci/jenkins:/var/jenkins_home &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
jevic/jenkins:docker-latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;运行gitlab-ce-中文社区版-9x-版本&quot;&gt;运行gitlab-ce 中文社区版 (9.x 版本)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;https://hub.docker.com/r/twang2218/gitlab-ce-zh/&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: '2'
services:
    gitlab:
      image: 'twang2218/gitlab-ce-zh:9.2.10'
      restart: unless-stopped
      hostname: 'gitlab.jevic.cn'
      environment:
        TZ: 'Asia/Shanghai'
      ports:
        - '80:80'
        - '443:443'
        - '22:22'
      volumes:
        - config:/etc/gitlab
        - data:/var/opt/gitlab
        - logs:/var/log/gitlab
volumes:
    config:
    data:
    logs:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;配置jenkins&quot;&gt;配置jenkins&lt;/h2&gt;

&lt;h3 id=&quot;安装插件&quot;&gt;安装插件&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://ok6h8mla5.bkt.clouddn.com/jenkins-docker-plugin.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://ok6h8mla5.bkt.clouddn.com/jenkins-gitlab-plugs.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;系统设置&quot;&gt;系统设置&lt;/h3&gt;

&lt;h4 id=&quot;配置私有仓库地址以及认证信息&quot;&gt;配置私有仓库地址以及认证信息&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://ok6h8mla5.bkt.clouddn.com/jenkins-registry-user.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;设置docker-服务&quot;&gt;设置docker 服务&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;新增一个云  选择 docker&lt;/li&gt;
  &lt;li&gt;unix:///var/run/docker.sock
&lt;img src=&quot;http://ok6h8mla5.bkt.clouddn.com/jenkins-docker-cloud.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;获取用户token&quot;&gt;获取用户Token&lt;/h4&gt;

&lt;p&gt;返回主面板 -&amp;gt; 用户 -&amp;gt; 点击admin -&amp;gt; 设置&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ok6h8mla5.bkt.clouddn.com/jenkins-admon-token.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;创建任务&quot;&gt;创建任务&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://ok6h8mla5.bkt.clouddn.com/jenkins-jobs-01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h5 id=&quot;源码管理&quot;&gt;源码管理&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;http://ok6h8mla5.bkt.clouddn.com/jenkins-gitlab-nginx-master.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;触发器&quot;&gt;触发器&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;触发远程构建 钩子&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use the following URL to trigger build remotely:
JENKINS_URL/job/webhook/build?token=TOKEN_NAME 或者 
/buildWithParameters?token=TOKEN_NAME&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ok6h8mla5.bkt.clouddn.com/jenkins-chufaqi.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;构建环境默认&quot;&gt;构建环境默认&lt;/h5&gt;
&lt;h5 id=&quot;构建&quot;&gt;构建&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;以构建次数为标签 hub.jevic.com/nginx/nginx:${BUILD_NUMBER}
&lt;img src=&quot;http://ok6h8mla5.bkt.clouddn.com/jenkins-docker-build.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;gitlab-项目配置&quot;&gt;gitlab 项目配置&lt;/h2&gt;

&lt;h3 id=&quot;创建新的项目-nginx&quot;&gt;创建新的项目 nginx&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;例如: http://jevic@gitlab.jevic.cn/jevic/nginx.git&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;设置---集成webhook&quot;&gt;设置 -&amp;gt; 集成webhook&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;URL 格式如下:
    &lt;ul&gt;
      &lt;li&gt;http://ci.jevic.cn/buildByToken/build?job=webhook&amp;amp;token=[API-TOKEN]&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;示例:
    &lt;ul&gt;
      &lt;li&gt;http://ci.jevic.cn:8080/buildByToken/build?job=webhook&amp;amp;token=494e32323dfsdfaeb0c49f8sdfa232615&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ok6h8mla5.bkt.clouddn.com/jenkins-gitlab-webhook.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;测试
&lt;img src=&quot;http://ok6h8mla5.bkt.clouddn.com/jenkins-gitlab-webhook-02.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;运行任务&quot;&gt;运行任务&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;push 代码到仓库&lt;/li&gt;
  &lt;li&gt;查看jenkins 构建任务运行状态&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;工作目录
[root@jevic.cn webhook]# pwd
/data/ci/jenkins/workspace/webhook
[root@jevic.cn webhook]# ls
Dockerfile  README.md

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://ok6h8mla5.bkt.clouddn.com/jenkens-webhook-jobs-ok%20%281%29.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;查看仓库
&lt;img src=&quot;http://ok6h8mla5.bkt.clouddn.com/jenkins-registry-harbor.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;</content><author><name>Jevic</name></author><summary type="html">gitlab来管理dockerfile 源码 使用jenkins来构建部署应用的docker 镜像并自动push到私有仓库 通过执行相关自定义操作来进行应用的自动测试、部署应用操作 进而减少不必要的人为手动操作,驱动自动化的应用部署极大提升效率,实现持续集成与构建!</summary></entry><entry><title type="html">Zabbix Docker运行及报警监控</title><link href="http://0.0.0.0/2017/12/02/linux-zabbix-docker-install/" rel="alternate" type="text/html" title="Zabbix Docker运行及报警监控" /><published>2017-12-02T16:50:24+08:00</published><updated>2017-12-02T16:50:24+08:00</updated><id>http://0.0.0.0/2017/12/02/linux-zabbix-docker-install</id><content type="html" xml:base="http://0.0.0.0/2017/12/02/linux-zabbix-docker-install/">&lt;h2 id=&quot;zabbix&quot;&gt;Zabbix&lt;/h2&gt;
&lt;p&gt;使用官方Docker 镜像运行Zabbix 
&lt;a href=&quot;https://github.com/jevic/docker/tree/master/zabbix&quot;&gt;docker-compose&lt;/a&gt; 编排文件&lt;/p&gt;

&lt;h4 id=&quot;server-配置&quot;&gt;Server 配置&lt;/h4&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@zabbix etc]# &lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;zabbix_server.conf
&lt;span class=&quot;nv&quot;&gt;PidFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/tmp/zabbix_server.pid
&lt;span class=&quot;nv&quot;&gt;LogFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/tmp/zabbix_server.log
&lt;span class=&quot;nv&quot;&gt;DBHost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;x.x.x.x
&lt;span class=&quot;nv&quot;&gt;DBName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;zabbix
&lt;span class=&quot;nv&quot;&gt;DBUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;zabbix
&lt;span class=&quot;nv&quot;&gt;DBPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;zabbix_pwd
&lt;span class=&quot;nv&quot;&gt;DBSocket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/tmp/mysql.sock
&lt;span class=&quot;nv&quot;&gt;Include&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/zabbix/etc/zabbix_server.conf.d/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.conf
&lt;span class=&quot;nv&quot;&gt;StartPollers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;16
&lt;span class=&quot;nv&quot;&gt;SNMPTrapperFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/log/snmptrap/snmptrap.log
&lt;span class=&quot;nv&quot;&gt;Timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4
&lt;span class=&quot;nv&quot;&gt;AlertScriptsPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/zabbix/share/zabbix/alertscripts
&lt;span class=&quot;nv&quot;&gt;ExternalScripts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/zabbix/share/zabbix/externalscripts
&lt;span class=&quot;nv&quot;&gt;LogSlowQueries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3000

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;报警设置&quot;&gt;报警设置&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jevic/wxalarm&quot;&gt;报警接口应用&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ok6h8mla5.bkt.clouddn.com/zabbix01.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://ok6h8mla5.bkt.clouddn.com/zabbix02.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://ok6h8mla5.bkt.clouddn.com/zabbix03.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://ok6h8mla5.bkt.clouddn.com/zabbix04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 脚本参数:
{ALERT.SUBJECT}
{ALERT.MESSAGE}

2. 动作:
默认接收人: 
服务器:{HOSTNAME1}发生: {TRIGGER.NAME} 故障!
告警主机:{HOSTNAME1}
告警时间:{EVENT.DATE} {EVENT.TIME}
告警等级:{TRIGGER.SEVERITY}
告警信息: {TRIGGER.NAME}
告警项目:{TRIGGER.KEY1}
问题详情:{ITEM.NAME}:{ITEM.VALUE}

服务器:{HOSTNAME1}: {TRIGGER.NAME}已恢复!
告警主机:{HOSTNAME1}
告警时间:{EVENT.DATE} {EVENT.TIME}
告警等级:{TRIGGER.SEVERITY}
告警信息: {TRIGGER.NAME}
告警项目:{TRIGGER.KEY1}
问题详情:{ITEM.NAME}:{ITEM.VALUE}


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;模板&quot;&gt;模板&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;https://monitoringartist.github.io/zabbix-searcher/#&lt;/li&gt;
  &lt;li&gt;模板 -&amp;gt; 应用集 -&amp;gt; 监控项 -&amp;gt; 触发器&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://ok6h8mla5.bkt.clouddn.com/zabbix-temlpate-01.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://ok6h8mla5.bkt.clouddn.com/zabbix-template-02.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://ok6h8mla5.bkt.clouddn.com/zabbix-template-03.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://ok6h8mla5.bkt.clouddn.com/zabbix-template-04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;触发器多参数示例&quot;&gt;触发器多参数示例&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{Template  DT general  monitor for 302:ngx_status[count,499].last()}&amp;gt;10

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;agent-配置文件&quot;&gt;agent 配置文件&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UserParameter=chk_timezone,if [ `date +%Z` != CST ];then echo 0 ;else echo 1;fi
UserParameter=tcp_status[*],/data/script/tcp_status.sh $1
UserParameter=chk_kt_rsync,/data/script/chk_kt_sync.sh
UserParameter=chk_openfile,/usr/sbin/lsof -n|wc -l
UserParameter=ngx_status[*],/data/script/ngx_status.sh $1 $2
UserParameter=chk_nginx_process,/bin/ps -ef|grep nginx|grep -v grep|wc -l
UserParameter=chk_io_usage,/usr/bin/iostat -x 1 2 | /usr/bin/perl -lane '$cnt++ and next if /Device/; $max &amp;lt; $F[-1] and $max = $F[-1] if $cnt &amp;gt; 1; END{ print $max || 0.00 }'
UserParameter=find_disk,/data/script/find_disk.sh
UserParameter=chk_disk_io[*],/data/script/chk_disk_io.sh $1 $2
UserParameter=chk_thread[*],/data/script/chk_thread.sh $1

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Jevic</name></author><summary type="html">Zabbix 使用官方Docker 镜像运行Zabbix docker-compose 编排文件</summary></entry><entry><title type="html">CI/CD 之 GitLab CI</title><link href="http://0.0.0.0/2017/11/28/ci-cd-gitlab-ci/" rel="alternate" type="text/html" title="CI/CD 之 GitLab CI" /><published>2017-11-28T17:43:23+08:00</published><updated>2017-11-28T17:43:23+08:00</updated><id>http://0.0.0.0/2017/11/28/ci-cd-gitlab-ci</id><content type="html" xml:base="http://0.0.0.0/2017/11/28/ci-cd-gitlab-ci/">&lt;blockquote&gt;
  &lt;p&gt;接着上篇文章整理，这篇文章主要介绍一下 GitLab CI 相关功能，并通过 GitLab CI 实现自动化构建项目；项目中所用的示例项目已经上传到了 &lt;a href=&quot;https://github.com/mritd/GitLabCI-TestProject&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;一环境准备&quot;&gt;一、环境准备&lt;/h3&gt;

&lt;p&gt;首先需要有一台 GitLab 服务器，然后需要有个项目；这里示例项目以 Spring Boot 项目为例，然后最好有一台专门用来 Build 的机器，实际生产中如果 Build 任务不频繁可适当用一些业务机器进行 Build；本文示例所有组件将采用 Docker 启动， GitLab HA 等不在本文阐述范围内&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Docker Version : 1.13.1&lt;/li&gt;
  &lt;li&gt;GitLab Version : 10.1.4-ce.0&lt;/li&gt;
  &lt;li&gt;GitLab Runner Version : 10.1.0&lt;/li&gt;
  &lt;li&gt;GitLab IP : 172.16.0.37&lt;/li&gt;
  &lt;li&gt;GitLab Runner IP : 172.16.0.36&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;二gitlab-ci-简介&quot;&gt;二、GitLab CI 简介&lt;/h3&gt;

&lt;p&gt;GitLab CI 是 GitLab 默认集成的 CI 功能，GitLab CI 通过在项目内 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitlab-ci.yaml&lt;/code&gt; 配置文件读取 CI 任务并进行相应处理；GitLab CI 通过其称为 GitLab Runner 的 Agent 端进行 build 操作；Runner 本身可以使用多种方式安装，比如使用 Docker 镜像启动等；Runner 在进行 build 操作时也可以选择多种 build 环境提供者；比如直接在 Runner 所在宿主机 build、通过新创建虚拟机(vmware、virtualbox)进行 build等；同时 Runner 支持 Docker 作为 build 提供者，即每次 build 新启动容器进行 build；GitLab CI 其大致架构如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/wejnz.png&quot; alt=&quot;GitLab&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;三搭建-gitlab-服务器&quot;&gt;三、搭建 GitLab 服务器&lt;/h3&gt;

&lt;h4 id=&quot;31gitlab-搭建&quot;&gt;3.1、GitLab 搭建&lt;/h4&gt;

&lt;p&gt;GitLab 搭建这里直接使用 docker compose 启动，compose 配置如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: &lt;span class=&quot;s1&quot;&gt;'2'&lt;/span&gt;
services:
  gitlab:
    image: &lt;span class=&quot;s1&quot;&gt;'gitlab/gitlab-ce:10.1.4-ce.0'&lt;/span&gt;
    restart: always
    container_name: gitlab
    hostname: &lt;span class=&quot;s1&quot;&gt;'git.mritd.me'&lt;/span&gt;
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url &lt;span class=&quot;s1&quot;&gt;'http://git.mritd.me'&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Add any other gitlab.rb configuration here, each on its own line&lt;/span&gt;
    ports:
      - &lt;span class=&quot;s1&quot;&gt;'80:80'&lt;/span&gt;
      - &lt;span class=&quot;s1&quot;&gt;'443:443'&lt;/span&gt;
      - &lt;span class=&quot;s1&quot;&gt;'8022:22'&lt;/span&gt;
    volumes:
      - &lt;span class=&quot;s1&quot;&gt;'./data/gitlab/config:/etc/gitlab'&lt;/span&gt;
      - &lt;span class=&quot;s1&quot;&gt;'./data/gitlab/logs:/var/log/gitlab'&lt;/span&gt;
      - &lt;span class=&quot;s1&quot;&gt;'./data/gitlab/data:/var/opt/gitlab'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;直接启动后，首次登陆需要设置初始密码如下，默认用户为 &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/5go94.png&quot; alt=&quot;gitkab init&quot; /&gt;&lt;/p&gt;

&lt;p&gt;登陆成功后创建一个用户(该用户最好给予 Admin 权限，以后操作以该用户为例)，并且创建一个测试 Group 和 Project，如下所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/vtyhi.png&quot; alt=&quot;Create User&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/3b7gl.png&quot; alt=&quot;Test Project&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;32增加示例项目&quot;&gt;3.2、增加示例项目&lt;/h4&gt;

&lt;p&gt;这里示例项目采用 Java 的 SpringBoot 项目，并采用 Gradle 构建，其他语言原理一样；&lt;strong&gt;如果不熟悉 Java 的没必要死磕此步配置，任意语言(最好 Java)整一个能用的 Web 项目就行，并不强求一定 Java 并且使用 Gradle 构建，以下只是一个样例项目&lt;/strong&gt;；SpringBoot 可以采用 &lt;a href=&quot;https://start.spring.io/&quot;&gt;Spring Initializr&lt;/a&gt; 直接生成(依赖要加入 WEB)，如下所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/0wx6d.png&quot; alt=&quot;Spring Initializr&quot; /&gt;&lt;/p&gt;

&lt;p&gt;将项目导入 IDEA，然后创建一个 index 示例页面，主要修改如下&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;build.gradle&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;buildscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;springBootVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1.5.8.RELEASE'&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mavenCentral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;classpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'java'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'eclipse'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'idea'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.springframework.boot'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'me.mritd'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0.0.1-SNAPSHOT'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sourceCompatibility&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.8&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mavenCentral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'org.springframework.boot:spring-boot-starter'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'org.springframework.boot:spring-boot-starter-web'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'org.springframework.boot:spring-boot-starter-thymeleaf'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testCompile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'org.springframework.boot:spring-boot-starter-test'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;新建一个 HomeController&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mritd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TestProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*******************************************************************************
 * Copyright (c) 2005-2017 Mritd, Inc.
 * TestProject
 * me.mritd.TestProject
 * Created by mritd on 2017/11/24 下午12:23.
 * Description: 
 *******************************************************************************/&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomeController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;index&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;templates 下新建 index.html&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Title&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Test...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后项目整体结构如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/5k12p.png&quot; alt=&quot;TestProject&quot; /&gt;&lt;/p&gt;

&lt;p&gt;执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;assemble&lt;/code&gt; Task 打包出可执行 jar 包，并运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;java -jar TestProject-0.0.1-SNAPSHOT.jar&lt;/code&gt; 测试下能启动访问页面即可&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/xoj3d.png&quot; alt=&quot;TestProject assemble&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后将项目提交到 GitLab 后如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/1fuex.png&quot; alt=&quot;init Project&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;四gitlab-ci-配置&quot;&gt;四、GitLab CI 配置&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;针对这一章节创建基础镜像以及项目镜像，这里仅以 Java 项目为例；其他语言原理相通，按照其他语言对应的运行环境修改即可&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;41增加-runner&quot;&gt;4.1、增加 Runner&lt;/h4&gt;

&lt;p&gt;GitLab CI 在进行构建时会将任务下发给 Runner，让 Runner 去执行；所以先要添加一个 Runner，Runner 这里采用 Docker Compose 启动，build 方式也使用 Docker 方式 Build；compose 文件如下&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;gitlab-runner&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gitlab-runner&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gitlab/gitlab-runner:alpine-v10.1.0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;network_mode&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;host&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/var/run/docker.sock:/var/run/docker.sock&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./config.toml:/etc/gitlab-runner/config.toml&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;extra_hosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;git.mritd.me:172.16.0.37&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;在启动前，我们需要先 touch 一下这个 config.toml 配置文件&lt;/strong&gt;；该文件是 Runner 的运行配置，此后 Runner 所有配置都会写入这个文件(不 touch 出来 docker-compose 发现不存在会挂载一个目录进去，导致 Runner 启动失败)；启动 docker-compose 后，&lt;strong&gt;需要进入容器执行注册，让 Runner 主动去连接 GitLab 服务器&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 生成 Runner 配置文件&lt;/span&gt;
touch config.toml
&lt;span class=&quot;c&quot;&gt;# 启动 Runner&lt;/span&gt;
docker-compose up &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 激活 Runner&lt;/span&gt;
docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; gitlab-runner gitlab-runner register
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在执行上一条激活命令后，会按照提示让你输入一些信息；&lt;strong&gt;首先输入 GitLab 地址，然后是 Runner Token，Runner Token 可以从 GitLab 设置中查看&lt;/strong&gt;，如下所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/mfqg7.png&quot; alt=&quot;Runner Token&quot; /&gt;&lt;/p&gt;

&lt;p&gt;整体注册流程如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/r7xay.png&quot; alt=&quot;Runner registry&quot; /&gt;&lt;/p&gt;

&lt;p&gt;注册完成后，在 GitLab Runner 设置中就可以看到刚刚注册的 Runner，如下所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/xv03e.png&quot; alt=&quot;Runner List&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Runner 注册成功后会将配置写入到 config.toml 配置文件；由于两个测试宿主机都没有配置内网 DNS，所以为了保证 runner 在使用 docker build 时能正确的找到 GitLab 仓库地址，还需要增加一个 docker 的 host 映射( &lt;code class=&quot;highlighter-rouge&quot;&gt;extra_hosts&lt;/code&gt; )；同时为了能调用 宿主机 Docker 和持久化 build 的一些缓存还挂载了一些文件和目录；完整的 配置如下(配置文件可以做一些更高级的配置，具体参考 &lt;a href=&quot;https://docs.gitlab.com/runner/configuration/advanced-configuration.html&quot;&gt;官方文档&lt;/a&gt; )&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;config.toml&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-toml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;py&quot;&gt;concurrent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;check_interval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[[runners]]&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Test Runner&quot;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://git.mritd.me&quot;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c279ec1ac08aec98c7141c7cf2d474&quot;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;executor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;docker&quot;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;builds_dir&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/gitlab/runner-builds&quot;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;cache_dir&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/gitlab/runner-cache&quot;&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;[runners.docker]&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;tls_verify&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;debian&quot;&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;privileged&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;disable_cache&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;shm_size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;volumes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;[&quot;/data/gitlab-runner:/gitlab&quot;,&quot;/var/run/docker.sock:/var/run/docker.sock&quot;,&quot;/data/maven_repo:/data/repo&quot;,&quot;/data/maven_repo:/data/maven&quot;,&quot;/data/gradle:/data/gradle&quot;,&quot;/data/sonar_cache:/root/.sonar&quot;,&quot;/data/androidsdk:/usr/local/android&quot;,&quot;/data/node_modules:/data/node_modules&quot;]&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;extra_hosts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;[&quot;git.mritd.me:172.16.0.37&quot;]&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;[runners.cache]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意，这里声明的 Volumes 会在每个运行的容器中都生效；也就是说 build 时新开启的每个容器都会被挂载这些目录&lt;/strong&gt;；修改完成后重启 runner 容器即可，由于 runner 中没啥可保存的东西，所以可以直接 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose down &amp;amp;&amp;amp; docker-compose up -d&lt;/code&gt; 重启&lt;/p&gt;

&lt;h4 id=&quot;42创建基础镜像&quot;&gt;4.2、创建基础镜像&lt;/h4&gt;

&lt;p&gt;由于示例项目是一个 Java 项目，而且是采用 Spring Boot 的，所以该项目想要运行起来只需要一个 java 环境即可，中间件已经被打包到了 jar 包中；以下是一个作为基础运行环境的 openjdk 镜像的 Dockerfile&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM alpine:edge 

LABEL &lt;span class=&quot;nv&quot;&gt;maintainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mritd &amp;lt;mritd1234@gmail.com&amp;gt;&quot;&lt;/span&gt;

ENV JAVA_HOME /usr/lib/jvm/java-1.8-openjdk
ENV PATH &lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin

RUN apk add &lt;span class=&quot;nt&quot;&gt;--update&lt;/span&gt; bash curl &lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;wget ca-certificates unzip &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        openjdk8 font-adobe-100dpi ttf-dejavu fontconfig &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /var/cache/apk/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;

CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bash&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;这个 openjdk Dockerfile 升级到了 8.151 版本，并且集成了一些字体相关的软件，以解决在 Java 中某些验证码库无法运行问题，详见 &lt;a href=&quot;https://mritd.me/2017/09/27/alpine-3.6-openjdk-8-bug/&quot;&gt;Alpine 3.6 OpenJDK 8 Bug&lt;/a&gt;&lt;/strong&gt;；使用这个 Dockerfile，在当前目录执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker build -t mritd/openjdk:8 .&lt;/code&gt; build 一个 openjdk8 的基础镜像，然后将其推送到私服，或者 Docker Hub 即可&lt;/p&gt;

&lt;h4 id=&quot;43创建项目镜像&quot;&gt;4.3、创建项目镜像&lt;/h4&gt;

&lt;p&gt;有了基本的 openjdk 的 docker 镜像后，针对于项目每次 build 都应该生成一个包含发布物的 docker 镜像，所以对于项目来说还需要一个项目本身的 Dockerfile；&lt;strong&gt;项目的 Dockerfile 有两种使用方式；一种是动态生成 Dockerfile，然后每次使用新生成的 Dockerfile 去 build；还有一种是写一个通用的 Dockerfile，build 时利用 ARG 参数传入变量&lt;/strong&gt;；这里采用第二种方式，以下为一个可以反复使用的 Dockerfile&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM mritd/openjdk:8-144-01

MAINTAINER mritd &amp;lt;mritd1234@gmail.com&amp;gt;

ARG PROJECT_BUILD_FINALNAME

ENV TZ &lt;span class=&quot;s1&quot;&gt;'Asia/Shanghai'&lt;/span&gt;
ENV PROJECT_BUILD_FINALNAME &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_BUILD_FINALNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;


COPY build/libs/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_BUILD_FINALNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.jar /&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_BUILD_FINALNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.jar

CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bash&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;-c&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;java -jar /&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_BUILD_FINALNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.jar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;该 Dockerfile 通过声明一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;PROJECT_BUILD_FINALNAME&lt;/code&gt; 变量来表示项目的发布物名称；然后将其复制到根目录下，最终利用 java 执行这个 jar 包；所以每次 build 之前只要能拿到项目发布物的名称即可&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;44gradle-修改&quot;&gt;4.4、Gradle 修改&lt;/h4&gt;

&lt;p&gt;上面已经创建了一个标准的通用型 Dockerfile，每次 build 镜像只要传入 &lt;code class=&quot;highlighter-rouge&quot;&gt;PROJECT_BUILD_FINALNAME&lt;/code&gt; 这个最终发布物名称即可；对于发布物名称来说，最好不要固定死；当然不论是 Java 还是其他语言的项目我们都能将最终发布物变成一个固定名字，最不济可以写脚本重命名一下；但是不建议那么干，最好保留版本号信息，以便于异常情况下进入容器能够分辨；对于当前 Java 项目来说，想要拿到 &lt;code class=&quot;highlighter-rouge&quot;&gt;PROJECT_BUILD_FINALNAME&lt;/code&gt; 很简单，我们只需要略微修改一下 Gradle 的 build 脚本，让其每次打包 jar 包时将项目的名称及版本号导出到文件中即可；同时这里也加入了镜像版本号的处理，Gradle 脚本修改如下&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;build.gradle 最后面增加如下&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;bootRepackage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;mainClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'me.mritd.TestProject.TestProjectApplication'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;executable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;doLast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;envFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;build/tmp/PROJECT_ENV&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Create ${archivesBaseName} ENV File ===&amp;gt; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;envFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createNewFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Export ${archivesBaseName} Build Version ===&amp;gt; ${version}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;envFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;export PROJECT_BUILD_FINALNAME=${archivesBaseName}-${version}\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Generate Docker image tag...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;envFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;export BUILD_DATE=`date +%Y%m%d%H%M%S`\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;envFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;export IMAGE_NAME=mritd/test:`echo \${CI_BUILD_REF_NAME} | tr '/' '-'`-`echo \${CI_COMMIT_SHA} | cut -c1-8`-\${BUILD_DATE}\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;envFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;export LATEST_IMAGE_NAME=mritd/test:latest\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;这一步操作实际上是修改了 &lt;code class=&quot;highlighter-rouge&quot;&gt;bootRepackage&lt;/code&gt; 这个 Task(不了解 Gradle 或者不是 Java 项目的请忽略)，在其结束后创建了一个叫 &lt;code class=&quot;highlighter-rouge&quot;&gt;PROJECT_ENV&lt;/code&gt; 的文件，里面实际上就是写入了一些 bash 环境变量声明，以方便后面 source 一下这个文件拿到一些变量，然后用户 build 镜像使用&lt;/strong&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;PROJECT_ENV&lt;/code&gt; 最终生成如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_BUILD_FINALNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;TestProject-0.0.1-SNAPSHOT
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BUILD_DATE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;date +%Y%m%d%H%M%S&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mritd/test:&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CI_BUILD_REF_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; | tr &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;-&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CI_COMMIT_SHA&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; | cut &lt;span class=&quot;nt&quot;&gt;-c1-8&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BUILD_DATE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LATEST_IMAGE_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mritd/test:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/gr6kc.png&quot; alt=&quot;PROJECT_ENV&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;45创建-ci-配置文件&quot;&gt;4.5、创建 CI 配置文件&lt;/h4&gt;

&lt;p&gt;一切准备就绪以后，就可以编写 CI 脚本了；GitLab 依靠读取项目根目录下的 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitlab-ci.yml&lt;/code&gt; 文件来执行相应的 CI 操作；以下为测试项目的 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitlab-ci.yml&lt;/code&gt; 配置&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 调试开启&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#before_script:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#  - pwd&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#  - env&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$CI_PROJECT_NAME/$CI_COMMIT_REF_NAME-$CI_COMMIT_SHA&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;stages&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;deploy&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;auto-build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mritd/build:2.1.1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gradle --no-daemon clean assemble&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mritd/docker-kubectl:v1.7.4&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;deploy&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;source build/tmp/PROJECT_ENV&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo &quot;Build Docker Image ==&amp;gt; ${IMAGE_NAME}&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker build -t ${IMAGE_NAME} --build-arg PROJECT_BUILD_FINALNAME=${PROJECT_BUILD_FINALNAME} .&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    - docker push ${IMAGE_NAME}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker tag ${IMAGE_NAME} ${LATEST_IMAGE_NAME}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    - docker push ${LATEST_IMAGE_NAME}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    - docker rmi ${IMAGE_NAME} ${LATEST_IMAGE_NAME}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    - kubectl --kubeconfig ${KUBE_CONFIG} set image deployment/test test=$IMAGE_NAME&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;develop&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/^chore.*$/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;关于 CI 配置的一些简要说明如下&lt;/strong&gt;&lt;/p&gt;

&lt;h5 id=&quot;stages&quot;&gt;stages&lt;/h5&gt;

&lt;p&gt;stages 字段定义了整个 CI 一共有哪些阶段流程，以上的 CI 配置中，定义了该项目的 CI 总共分为 &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;deploy&lt;/code&gt; 两个阶段；GitLab CI 会根据其顺序执行对应阶段下的所有任务；&lt;strong&gt;在正常生产环境流程可以定义很多个，比如可以有 &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;publish&lt;/code&gt;，甚至可能有代码扫描的 &lt;code class=&quot;highlighter-rouge&quot;&gt;sonar&lt;/code&gt; 阶段等；这些阶段没有任何限制，完全是自定义的&lt;/strong&gt;，上面的阶段定义好后在 CI 中表现如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/8c7gs.png&quot; alt=&quot;stages&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;task&quot;&gt;task&lt;/h5&gt;

&lt;p&gt;task 隶属于 stages 之下；也就是说一个阶段可以有多个任务，任务执行顺序默认不指定会并发执行；对于上面的 CI 配置来说 &lt;code class=&quot;highlighter-rouge&quot;&gt;auto-build&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy&lt;/code&gt; 都是 task，他们通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;stage: xxxx&lt;/code&gt; 这个标签来指定他们隶属于哪个 stage；当 Runner 使用 Docker 作为 build 提供者时，我们可以在 task 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;image&lt;/code&gt; 标签下声明该 task 要使用哪个镜像运行，不指定则默认为 Runner 注册时的镜像(这里是 debian)；&lt;strong&gt;同时 task 还有一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;tags&lt;/code&gt; 的标签，该标签指明了这个任务将可以在哪些 Runner 上运行；这个标签可以从 Runner 页面看到，实际上就是 Runner 注册时输入的哪个 tag；对于某些特殊的项目，比如 IOS 项目，则必须在特定机器上执行，所以此时指定 tags 标签很有用&lt;/strong&gt;，当 task 运行后如下图所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/qzvlh.png&quot; alt=&quot;Task&quot; /&gt;&lt;/p&gt;

&lt;p&gt;除此之外 task 还能指定 &lt;code class=&quot;highlighter-rouge&quot;&gt;only&lt;/code&gt; 标签用于限定那些分支才能触发这个 task，如果分支名字不满足则不会触发；&lt;strong&gt;默认情况下，这些 task 都是自动执行的，如果感觉某些任务太过危险，则可以通过增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;when: manual&lt;/code&gt; 改为手动执行；注意: 手动执行被 GitLab 认为是高权限的写操作，所以只有项目管理员才能手动运行一个 task，直白的说就是管理员才能点击&lt;/strong&gt;；手动执行如下图所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/vcjci.png&quot; alt=&quot;manual task&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;cache&quot;&gt;cache&lt;/h5&gt;

&lt;p&gt;cache 这个参数用于定义全局那些文件将被 cache；&lt;strong&gt;在 GitLab CI 中，跨 stage 是不能保存东西的；也就是说在第一步 build 的操作生成的 jar 包，到第二部打包 docker image 时就会被删除；GitLab 会保证每个 stage 中任务在执行时都将工作目录(Docker 容器 中)还原到跟 GitLab 代码仓库中一模一样，多余文件及变更都会被删除&lt;/strong&gt;；正常情况下，第一步 build 生成 jar 包应当立即推送到 nexus 私服；但是这里测试没有搭建，所以只能放到本地；但是放到本地下一个 task 就会删除它，所以利用 &lt;code class=&quot;highlighter-rouge&quot;&gt;cache&lt;/code&gt; 这个参数将 &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; 目录 cache 住，保证其跨 stage 也能存在&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关于 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitlab-ci.yml&lt;/code&gt; 具体配置更完整的请参考 &lt;a href=&quot;https://docs.gitlab.com/ee/ci/yaml/&quot;&gt;官方文档&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;五其他相关&quot;&gt;五、其他相关&lt;/h3&gt;

&lt;h4 id=&quot;51gitlab-内置环境变量&quot;&gt;5.1、GitLab 内置环境变量&lt;/h4&gt;

&lt;p&gt;上面已经基本搞定了一个项目的 CI，但是有些变量可能并未说清楚；比如在创建的 &lt;code class=&quot;highlighter-rouge&quot;&gt;PROJECT_ENV&lt;/code&gt; 文件中引用了 &lt;code class=&quot;highlighter-rouge&quot;&gt;${CI_COMMIT_SHA}&lt;/code&gt; 变量；这种变量其实是 GitLab CI 的内置隐藏变量，这些变量在每次 CI 调用 Runner 运行某个任务时都会传递到对应的 Runner 的执行环境中；&lt;strong&gt;也就是说这些变量在每次的任务容器 SHELL 环境中都会存在，可以直接引用&lt;/strong&gt;，具体的完整环境变量列表可以从 &lt;a href=&quot;https://docs.gitlab.com/ee/ci/variables/&quot;&gt;官方文档&lt;/a&gt; 中获取；如果想知道环境变量具体的值，实际上可以通过在任务执行前用 &lt;code class=&quot;highlighter-rouge&quot;&gt;env&lt;/code&gt; 指令打印出来，如下所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/la9kn.png&quot; alt=&quot;env&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/0175j.png&quot; alt=&quot;env task&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;52gitlab-自定义环境变量&quot;&gt;5.2、GitLab 自定义环境变量&lt;/h4&gt;

&lt;p&gt;在某些情况下，我们希望 CI 能自动的发布或者修改一些东西；比如将 jar 包上传到 nexus、将 docker 镜像 push 到私服；这些动作往往需要一个高权限或者说有可写入对应仓库权限的账户来支持，但是这些账户又不想写到项目的 CI 配置里；因为这样很不安全，谁都能看到；此时我们可以将这些敏感变量写入到 GitLab 自定义环境变量中，GitLab 会像对待内置变量一样将其传送到 Runner 端，以供我们使用；GitLab 中自定义的环境变量可以有两种，一种是项目级别的，只能够在当前项目使用，如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/ennug.png&quot; alt=&quot;project env&quot; /&gt;&lt;/p&gt;

&lt;p&gt;另一种是组级别的，可以在整个组内的所有项目中使用，如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/si8ig.png&quot; alt=&quot;group env&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这两种变量添加后都可以在 CI 的脚本中直接引用&lt;/p&gt;

&lt;h4 id=&quot;53kubernetes-集成&quot;&gt;5.3、Kubernetes 集成&lt;/h4&gt;

&lt;p&gt;对于 Kubernetes 集成实际上有两种方案，一种是对接 Kubernetes 的 api，纯代码实现；另一种取巧的方案是调用 kubectl 工具，用 kubectl 工具来实现滚动升级；这里采用后一种取巧的方式，将 kubectl 二进制文件封装到镜像中，然后在 deploy 阶段使用这个镜像直接部署就可以&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/bu17r.png&quot; alt=&quot;kubectl&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;mritd/docker-kubectl:v1.7.4&lt;/code&gt; 这个镜像的 Dockerfile 如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM docker:dind 

LABEL &lt;span class=&quot;nv&quot;&gt;maintainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mritd &amp;lt;mritd1234@gmail.com&amp;gt;&quot;&lt;/span&gt;

ARG &lt;span class=&quot;nv&quot;&gt;TZ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Asia/Shanghai&quot;&lt;/span&gt;

ENV TZ &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TZ&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

ENV KUBE_VERSION v1.8.0

RUN apk upgrade &lt;span class=&quot;nt&quot;&gt;--update&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk add bash tzdata wget ca-certificates &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; wget https://storage.googleapis.com/kubernetes-release/release/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KUBE_VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/bin/linux/amd64/kubectl &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; /usr/local/bin/kubectl &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; chmod +x /usr/local/bin/kubectl &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ln &lt;span class=&quot;nt&quot;&gt;-sf&lt;/span&gt; /usr/share/zoneinfo/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TZ&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; /etc/localtime &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TZ&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /etc/timezone &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /var/cache/apk/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;

CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/bin/bash&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里面的 &lt;code class=&quot;highlighter-rouge&quot;&gt;${KUBE_CONFIG}&lt;/code&gt; 是一个自定义的环境变量，对于测试环境我将配置文件直接挂载入了容器中，然后 &lt;code class=&quot;highlighter-rouge&quot;&gt;${KUBE_CONFIG}&lt;/code&gt; 只是指定了一个配置文件位置，实际生产环境中可以选择将配置文件变成自定义环境变量使用&lt;/p&gt;

&lt;h4 id=&quot;54gitlab-ci-总结&quot;&gt;5.4、GitLab CI 总结&lt;/h4&gt;

&lt;p&gt;关于 GitLab CI 上面已经讲了很多，但是并不全面，也不算太细致；因为这东西说起来实际太多了，现在目测已经 1W 多字了；以下总结一下 GitLab CI 的总体思想，当思路清晰了以后，我想后面的只是查查文档自己试一试就行了&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CS 架构&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitLab 作为 Server 端，控制 Runner 端执行一系列的 CI 任务；代码 clone 等无需关心，GitLab 会自动处理好一切；Runner 每次都会启动新的容器执行 CI 任务&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;容器即环境&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在 Runner 使用 Docker build 的前提下；&lt;strong&gt;所有依赖切换、环境切换应当由切换不同镜像实现，即 build 那就使用 build 的镜像，deploy 就用带有 deploy 功能的镜像；通过不同镜像容器实现完整的环境隔离&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CI即脚本&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;不同的 CI 任务实际上就是在使用不同镜像的容器中执行 SHELL 命令，自动化 CI 就是执行预先写好的一些小脚本&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;敏感信息走环境变量&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一切重要的敏感信息，如账户密码等，不要写到 CI 配置中，直接放到 GitLab 的环境变量中；GitLab 会保证将其推送到远端 Runner 的 SHELL 变量中&lt;/p&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;</content><author><name>Jevic</name></author><summary type="html">接着上篇文章整理，这篇文章主要介绍一下 GitLab CI 相关功能，并通过 GitLab CI 实现自动化构建项目；项目中所用的示例项目已经上传到了 GitHub</summary></entry><entry><title type="html">CI/CD 之 Dockerfile</title><link href="http://0.0.0.0/2017/11/12/ci-cd-dockerfile/" rel="alternate" type="text/html" title="CI/CD 之 Dockerfile" /><published>2017-11-12T22:46:53+08:00</published><updated>2017-11-12T22:46:53+08:00</updated><id>http://0.0.0.0/2017/11/12/ci-cd-dockerfile</id><content type="html" xml:base="http://0.0.0.0/2017/11/12/ci-cd-dockerfile/">&lt;blockquote&gt;
  &lt;p&gt;最近准备整理一下关于 CI/CD 的相关文档，写一个关于 CI/CD 的系列文章，这篇先从最基本的 Dockerfile 书写开始，本系列文章默认读者已经熟悉 Docker、Kubernetes 相关工具&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;一基础镜像选择&quot;&gt;一、基础镜像选择&lt;/h3&gt;

&lt;p&gt;这里的基础镜像指的是实际项目运行时的基础环境镜像，比如 Java 的 JDK 基础镜像、Nodejs 的基础镜像等；在制作项目的基础镜像时，我个人认为应当考虑一下几点因素:&lt;/p&gt;

&lt;h4 id=&quot;11可维护性&quot;&gt;1.1、可维护性&lt;/h4&gt;

&lt;p&gt;可维护性应当放在首要位置，如果在制作基础镜像时，选择了一个你根本不熟悉的基础镜像，或者说你完全不知道这个基础镜像里有哪些环境变量、Entrypoint 脚本做了什么时，请果断放弃这个基础镜像，选择一个你自己更加熟悉的基础镜像，不要为以后挖坑；还有就是如果对应的应用已经有官方镜像，那么尽量采用官方的，因为你可以省去维护 &lt;strong&gt;自己造的轮子&lt;/strong&gt; 的精力，&lt;strong&gt;除非你对基础镜像制作已经得心应手，否则请不要造轮子&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;12稳定性&quot;&gt;1.2、稳定性&lt;/h4&gt;

&lt;p&gt;基础镜像稳定性实际上是个很微妙的话题，因为普遍来说成熟的 Linux 发行版都很稳定；但是对于不同发行版镜像之间还是存在差异的，比如 alpine 的镜像用的是 musl libc，而 debian 用的是 glibc，某些依赖 glibc 的程序可能无法在 alpine 上工作；alpine 版本的 nginx 能使用 http2，debian 版本 nginx 则不行，因为 openssl 版本不同；甚至在相同发行版不同版本之间也会有差异，譬如 openjdk alpine 3.6 版本 java 某些图形库无法工作，在 alpine edge 上安装最新的 openjdk 却没问题等；所以稳定性这个话题对于基础镜像自己来说，他永远稳定，但是对于你的应用来说，则不同基础镜像会产生不同的稳定性；&lt;strong&gt;最后，如果你完全熟悉你的应用，甚至应用层代码也是你写的，那么你可以根据你的习惯和喜好去选择基础镜像，因为你能把控应用运行时依赖；否则的话，请尽量选择 debian 这种比较成熟的发行版作为基础镜像，因为它在普遍上兼容性更好一点；还有尽量不要使用 CentOS 作为基础镜像，因为他的体积将会成为大规模网络分发瓶颈&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;13易用性&quot;&gt;1.3、易用性&lt;/h4&gt;

&lt;p&gt;易用性简单地说就是是否可调试，因为有些极端情况下，并不是应用只要运行起来就没事了；可能出现一些很棘手的问题需要你进入容器进行调试，此时你的镜像易用性就会体现出来；譬如一个 Java 项目你的基础镜像是 JRE，那么 JDK 的调试工具将完全不可用，还有就是如果你的基础镜像选择了 alpine，那么它默认没有 bash，可能你的脚本无法在里面工作；&lt;strong&gt;所有在选择基础镜像的时候最好也考虑一下未来极端情况的可调试性&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;二格式化及注意事项&quot;&gt;二、格式化及注意事项&lt;/h3&gt;

&lt;h4 id=&quot;21书写格式&quot;&gt;2.1、书写格式&lt;/h4&gt;

&lt;p&gt;Dockerfile 类似一堆 shell 命令的堆砌，实际上在构建阶段也可以简单的看做是一个 shell 脚本；但是为了更高效的利用缓存层，通常都会在一个 RUN 命令中连续书写大量的脚本命令，这时候一个良好的书写格式可以使 Dockerfile 看起来更加清晰易懂，也方便以后维护；我个人比较推崇的格式是按照 &lt;a href=&quot;https://github.com/nginxinc/docker-nginx/blob/master/mainline/alpine/Dockerfile&quot;&gt;nginx-alpine官方 Dockerfile&lt;/a&gt; 的样式来书写，这个 Dockerfile 大致包括了以下规则:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;换行以 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt; 开头保持每行对齐，看起来干净又舒服&lt;/li&gt;
  &lt;li&gt;安装大量软件包时，每个包一行并添加换行符，虽然会造成很多行，但是看起来很清晰；也可根据实际需要增加每行软件包个数，但是建议不要超过 5 个&lt;/li&gt;
  &lt;li&gt;configure 的配置尽量放在统一的变量里，并做好合理换行，方便以后集中化修改&lt;/li&gt;
  &lt;li&gt;注释同样和对应命令对齐，并保持单行长度不超出视野，即不能造成拉动滚动条才能看完你的注释&lt;/li&gt;
  &lt;li&gt;alpine 作为基础镜像的话，必要时可以使用 scanelf 来减少安装依赖&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除了以上规则，说下我个人的一些小习惯，仅供参考:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;当需要编译时，尽量避免多次 &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; 目录，必须进入目录编译时可以开启子 shell 使其完成后还停留但在当前目录，避免 &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; 进去再 &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; 回来，如&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;xxxx &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./configure &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ../
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;可以变为&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;xxx &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./configure &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;同样意义的操作统一放在相邻行处理，比如镜像需要安装两个软件，做两次 &lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt;，那么没必要安装完一个删除一个安装包，可以在最后统一的进行清理动作，简而言之是 &lt;strong&gt;合并具有相同目的的命令&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;尽量使用网络资源，也就是说尽量不要在当前目录下放置那种二进制文件，然后进行 &lt;code class=&quot;highlighter-rouge&quot;&gt;ADD&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;COPY&lt;/code&gt; 操作，因为一般 Dockerfile 都是存放到 git 仓库的，同目录下的二进制变动会给 git 仓库带来很大负担&lt;/li&gt;
  &lt;li&gt;调整好镜像时区，最好内置一下 bash，可能以后临时进入容器会处理一些东西&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt; 时指定具体的版本号，防止后续升级或者更换主机 build 造成不可预知的结果&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;22合理利用缓存&quot;&gt;2.2、合理利用缓存&lt;/h4&gt;

&lt;p&gt;Docker 在 build 或者说是拉取镜像时是以层为单位作为缓存的；通俗的讲，一个 Dockerfile 命令就会形成一个镜像层(不绝对)，尤其是 &lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt; 命令形成的镜像层可能会很大；此时应当合理组织 Dockerfile，以便每次拉取或者 build 时高效的利用缓存层&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;重复 build 的缓存利用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Docker 在进行 build 操作时，对于同一个 Dockerfile 来说，&lt;strong&gt;只要执行过一次 build，那么下次 build 将从命令更改处开始&lt;/strong&gt;；简单的例子如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM alpine:3.6

COPY test.jar /test.jar

RUN apk add openjdk8 &lt;span class=&quot;nt&quot;&gt;--no-cache&lt;/span&gt;

CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;java&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;-jar&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;/test.tar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;假设我们的项目发布物为 &lt;code class=&quot;highlighter-rouge&quot;&gt;test.jar&lt;/code&gt;，那么以上 Dockerfile 放到 CI 里每次 build 都会相当慢，原因就是 &lt;strong&gt;每次更改的发布物为 &lt;code class=&quot;highlighter-rouge&quot;&gt;test.jar&lt;/code&gt;，那么也就是相当于每次 build 失效位置从 &lt;code class=&quot;highlighter-rouge&quot;&gt;COPY&lt;/code&gt; 命令开始，这将导致下面的 &lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt; 命令每次都会不走缓存重复执行，当 &lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt; 命令涉及网络下载等复杂动作时这会极大拖慢 build 进度&lt;/strong&gt;，解决方案很简单，移动一下 &lt;code class=&quot;highlighter-rouge&quot;&gt;COPY&lt;/code&gt; 命令即可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM alpine:3.6

RUN apk add openjdk8 &lt;span class=&quot;nt&quot;&gt;--no-cache&lt;/span&gt;

COPY test.jar /test.jar

CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;java&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;-jar&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;/test.tar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时每次 build 失效位置仍然是 &lt;code class=&quot;highlighter-rouge&quot;&gt;COPY&lt;/code&gt; 命令，但是上面的 &lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt; 命令层已经被 build 过，而且无任何改变，那么每次 build 时 &lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt; 命令都会命中缓存层从而秒过&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;多次拉取的缓存利用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同上面的 build 一个原理，在 Docker 进行 pull 操作时，也是按照镜像层来进行缓存；当项目进行更新版本，那么只要当前主机 pull 过一次上一个版本的项目，那么下一次将会直接 pull 变更的层，也就是说上面安装 openjdk 的层将会复用；这种情况为了看起来清晰一点也可以将 Dockerfile 拆分成两个&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenJDK8 base&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM alpine:3.6

RUN RUN apk add openjdk8 &lt;span class=&quot;nt&quot;&gt;--no-cache&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Java Web image&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM xxx.com/base/openjdk8

COPY test.jar /test.jar

CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;java&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;-jar&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;/test.tar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;三镜像安全&quot;&gt;三、镜像安全&lt;/h3&gt;

&lt;h4 id=&quot;31用户切换&quot;&gt;3.1、用户切换&lt;/h4&gt;

&lt;p&gt;当我们不在 Dockerfile 中指定内部用户时，那么默认以 root 用户运行；由于 Linux 系统权限判定是根据 UID、GID 来进行的，也就是说 &lt;strong&gt;容器里面的 root 用户有权限访问宿主机 root 用户的东西；所以一旦挂载错误(比如将 &lt;code class=&quot;highlighter-rouge&quot;&gt;/root/.ssh&lt;/code&gt; 目录挂载进去)，并且里面的用户具有高权限那么就很危险&lt;/strong&gt;；通常习惯是遵从最小权限原则，也就是说尽量保证容器里的程序以低权限运行，此时可以在 Dockerfile 中通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;USER&lt;/code&gt; 命令指定后续运行命令所使用的账户，通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;WORKDIR&lt;/code&gt; 指定后续命令在那个目录下执行&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM alpine:3.6

RUN apk add openjdk8 &lt;span class=&quot;nt&quot;&gt;--no-cache&lt;/span&gt;

COPY test.jar /test.jar

USER testuser:testuser

WORKDIR /tmp

CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;java&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;-jar&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;/test.tar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;有时直接使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;USER&lt;/code&gt; 指令来切换用户并不算方便，比如你的镜像需要挂载外部存储，如果外部存储中文件权限被意外修改，你的程序接下来可能就会启动失败；此时可以使用一下两个小工具来动态切换用户，巧妙的做法是 &lt;strong&gt;在正式运行程序之前先使用 root 用户进行权限修复，然后使用以下工具切换到具体用户运行&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tianon/gosu&quot;&gt;gosu&lt;/a&gt; Golang 实现的一个切换用户身份执行其他程序的小工具&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hlovdal/su-exec&quot;&gt;su-exec&lt;/a&gt; C 实现的一个更轻量级的用户切换工具&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体的 Dockerfile 可以参见我写的 elasticsearch 的 &lt;a href=&quot;https://github.com/mritd/dockerfile/blob/master/elasticsearch/docker-entrypoint.sh&quot;&gt;entrypoint 脚本&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;32容器运行时&quot;&gt;3.2、容器运行时&lt;/h4&gt;

&lt;p&gt;并不是每个容器都一定能切换到低权限用户来运行的，可能某些程序就希望在 root 下运行，此时一定要确认好容器是否需要 &lt;strong&gt;特权模式&lt;/strong&gt; 运行；因为一旦开启了特权模式运行的容器将有能力修改宿主机内核参数等重要设置；具体的 Docker 容器运行设置前请参考 &lt;a href=&quot;https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;关于 Dockerfile 方面暂时总结出这些，可能也会有遗漏，待后续补充吧；同时欢迎各位提出相关修改意见 😊&lt;/p&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;</content><author><name>Jevic</name></author><summary type="html">最近准备整理一下关于 CI/CD 的相关文档，写一个关于 CI/CD 的系列文章，这篇先从最基本的 Dockerfile 书写开始，本系列文章默认读者已经熟悉 Docker、Kubernetes 相关工具</summary></entry><entry><title type="html">Teleport 跳板机部署</title><link href="http://0.0.0.0/2017/11/09/set-up-teleport/" rel="alternate" type="text/html" title="Teleport 跳板机部署" /><published>2017-11-09T16:47:51+08:00</published><updated>2017-11-09T16:47:51+08:00</updated><id>http://0.0.0.0/2017/11/09/set-up-teleport</id><content type="html" xml:base="http://0.0.0.0/2017/11/09/set-up-teleport/">&lt;blockquote&gt;
  &lt;p&gt;由于业务需求，以前账号管理混乱，所以很多人有生产服务器的 root 权限；所以目前需要一个能 ssh 登录线上服务器的工具，同时具有简单的审计功能；找了好久找到了这个小工具，以下记录一下搭建教程&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;一环境准备&quot;&gt;一、环境准备&lt;/h3&gt;

&lt;p&gt;目前准备了 3 台虚拟机，两台位于内网 NAT 之后，一台位于公网可以直接链接；使用时客户端通过工具连接到公网跳板机上，然后实现自动跳转到内网任意主机；并且具有相应的操作回放审计，通过宿主机账户限制用户权限&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;ip&lt;/th&gt;
      &lt;th&gt;节点&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;92.223.67.84&lt;/td&gt;
      &lt;td&gt;公网 Master&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;172.16.0.80&lt;/td&gt;
      &lt;td&gt;内网 Master&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;172.16.0.81&lt;/td&gt;
      &lt;td&gt;内网 Node&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;二teleport-工作模式&quot;&gt;二、Teleport 工作模式&lt;/h3&gt;

&lt;p&gt;Teleport 工作时从宏观上看是以集群为单位，也就是说&lt;strong&gt;公网算作一个集群，内网算作另一个集群，内网集群通过 ssh 隧道保持跟公网的链接状态，同时内网机群允许公网集群用户连接&lt;/strong&gt;，大体工作模式如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/hsnj8.png&quot; alt=&quot;Teleport 工作模式&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;三搭建公网-master&quot;&gt;三、搭建公网 Master&lt;/h3&gt;

&lt;h4 id=&quot;31配置-systemd&quot;&gt;3.1、配置 Systemd&lt;/h4&gt;

&lt;p&gt;首先下载相关可执行文件并复制到 Path 目录下，然后创建一下配置目录等&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://github.com/gravitational/teleport/releases/download/v2.3.5/teleport-v2.3.5-linux-amd64-bin.tar.gz
&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-zxvf&lt;/span&gt; teleport-v2.3.5-linux-amd64-bin.tar.gz
mv teleport/tctl teleport/teleport teleport/tsh /usr/local/bin
mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /etc/teleport /data/teleport
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后为了让服务后台运行创建一个 systemd service 配置文件&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /etc/systemd/system/teleport.service &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
[Unit]
Description=Teleport SSH Service
After=network.target

[Service]
Type=simple
Restart=always
ExecStart=/usr/local/bin/teleport start -c /etc/teleport/teleport.yaml

[Install]
WantedBy=multi-user.target
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;32配置-teleport&quot;&gt;3.2、配置 Teleport&lt;/h4&gt;

&lt;p&gt;Systemd 配置完成后，就需要写一个 Teleport 的配置文件来让 Teleport 启动，具体选项含义可以参考 &lt;a href=&quot;https://gravitational.com/teleport/docs/2.3/admin-guide/&quot;&gt;官方文档&lt;/a&gt;；以下为我的配置样例&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# By default, this file should be stored in /etc/teleport.yaml&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This section of the configuration file applies to all teleport&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# services.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;teleport&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# nodename allows to assign an alternative name this node can be reached by.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# by default it's equal to hostname&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;nodename&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mritd.master&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Data directory where Teleport keeps its data, like keys/users for&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# authentication (if using the default BoltDB back-end)&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;data_dir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/data/teleport&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# one-time invitation token used to join a cluster. it is not used on&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# subsequent starts&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;auth_token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jYektagNTmhjv9Dh&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# when running in multi-homed or NATed environments Teleport nodes need&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# to know which IP it will be reachable at by other nodes&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;advertise_ip&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;92.223.67.84&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# list of auth servers in a cluster. you will have more than one auth server&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# if you configure teleport auth to run in HA configuration&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;auth_servers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.0.0:3025&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.0.0:3025&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Teleport throttles all connections to avoid abuse. These settings allow&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# you to adjust the default limits&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;connection_limits&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;max_connections&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1000&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;max_users&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;250&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Logging configuration. Possible output values are 'stdout', 'stderr' and&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 'syslog'. Possible severity values are INFO, WARN and ERROR (default).&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;stdout&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;severity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;INFO&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Type of storage used for keys. You need to configure this to use etcd&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# backend if you want to run Teleport in HA configuration.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bolt&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Cipher algorithms that the server supports. This section only needs to be&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# set if you want to override the defaults.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ciphers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aes128-ctr&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aes192-ctr&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aes256-ctr&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aes128-gcm@openssh.com&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;arcfour256&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;arcfour128&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Key exchange algorithms that the server supports. This section only needs&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# to be set if you want to override the defaults.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;kex_algos&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;curve25519-sha256@libssh.org&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ecdh-sha2-nistp256&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ecdh-sha2-nistp384&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ecdh-sha2-nistp521&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;diffie-hellman-group14-sha1&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;diffie-hellman-group1-sha1&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Message authentication code (MAC) algorithms that the server supports.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# This section only needs to be set if you want to override the defaults.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mac_algos&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hmac-sha2-256-etm@openssh.com&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hmac-sha2-256&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hmac-sha1&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hmac-sha1-96&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This section configures the 'auth service':&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;auth_service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Turns 'auth' role on. Default is 'yes'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;authentication&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# default authentication type. possible values are 'local', 'oidc' and 'saml'&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# only local authentication (Teleport's own user DB) is supported in the open&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# source version&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;local&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# second_factor can be off, otp, or u2f&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;second_factor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;otp&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# this section is used if second_factor is set to 'u2f'&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#u2f:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    # app_id must point to the URL of the Teleport Web UI (proxy) accessible&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    # by the end users&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    app_id: https://localhost:3080&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    # facets must list all proxy servers if there are more than one deployed&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    facets:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    - https://localhost:3080&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# IP and the port to bind to. Other Teleport nodes will be connecting to&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# this port (AKA &quot;Auth API&quot; or &quot;Cluster API&quot;) to validate client&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# certificates&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;listen_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.0.0:3025&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Pre-defined tokens for adding new nodes to a cluster. Each token specifies&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# the role a new node will be allowed to assume. The more secure way to&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# add nodes is to use `ttl node add --ttl` command to generate auto-expiring&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# tokens.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# We recommend to use tools like `pwgen` to generate sufficiently random&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# tokens of 32+ byte length.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;proxy,node:jYektagNTmhjv9Dh&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;auth:jYektagNTmhjv9Dh&quot;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Optional &quot;cluster name&quot; is needed when configuring trust between multiple&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# auth servers. A cluster name is used as part of a signature in certificates&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# generated by this CA.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# By default an automatically generated GUID is used.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# IMPORTANT: if you change cluster_name, it will invalidate all generated&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# certificates and keys (may need to wipe out /var/lib/teleport directory)&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;cluster_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;mritd&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This section configures the 'node service':&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;ssh_service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Turns 'ssh' role on. Default is 'yes'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# IP and the port for SSH service to bind to.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;listen_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.0.0:3022&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# See explanation of labels in &quot;Labeling Nodes&quot; section below&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# List of the commands to periodically execute. Their output will be used as node labels.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# See &quot;Labeling Nodes&quot; section below for more information.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;arch&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;# this command will add a label like 'arch=x86_64' to a node&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;uname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;-p&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;period&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1h0m0s&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# enables reading ~/.tsh/environment before creating a session. by default&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# set to false, can be set true here or as a command line flag.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;permit_user_env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This section configures the 'proxy servie'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;proxy_service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Turns 'proxy' role on. Default is 'yes'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# SSH forwarding/proxy address. Command line (CLI) clients always begin their&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# SSH sessions by connecting to this port&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;listen_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.0.0:3023&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Reverse tunnel listening address. An auth server (CA) can establish an&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# outbound (from behind the firewall) connection to this address.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# This will allow users of the outside CA to connect to behind-the-firewall&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# nodes.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tunnel_listen_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.0.0:3024&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# The HTTPS listen address to serve the Web UI and also to authenticate the&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# command line (CLI) users via password+HOTP&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;web_listen_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.0.0:3080&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# TLS certificate for the HTTPS connection. Configuring these properly is&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# critical for Teleport security.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#https_key_file: /var/lib/teleport/webproxy_key.pem&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#https_cert_file: /var/lib/teleport/webproxy_cert.pem&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后启动 Teleport 即可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;teleport
systemctl start teleport
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果启动出现如下错误&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;error: Could not load host key: /etc/ssh/ssh_host_ecdsa_key
error: Could not load host key: /etc/ssh/ssh_host_ed25519_key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;请执行 ssh-keygen 命令自行生成相关秘钥&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; ecdsa &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; /etc/ssh/ssh_host_ecdsa_key
ssh-keygen &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; ed25519 &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; /etc/ssh/ssh_host_ed25519_key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;33添加用户&quot;&gt;3.3、添加用户&lt;/h4&gt;

&lt;p&gt;公网这台 Teleport 将会作为主要的接入机器，所以在此节点内添加的用户将有权限登录所有集群，包括内网的另一个集群；所以为了方便以后操作先添加一个用户&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 添加一个用户名为 mritd 的用户，该用户在所有集群具有 root 用户权限&lt;/span&gt;
tctl &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; /etc/teleport/teleport.yaml users add mritd root
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;添加成功后会返回一个 OTP 认证初始化地址，浏览器访问后可以使用 Google 扫描 OTP 二维码从而在登录时增加一层 OTP 认证&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/chuyf.png&quot; alt=&quot;OTP CMD&quot; /&gt;&lt;/p&gt;

&lt;p&gt;访问该地址后初始化密码及 OTP&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/czwmd.png&quot; alt=&quot;init OTP&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;四搭建内网-master&quot;&gt;四、搭建内网 Master&lt;/h3&gt;

&lt;p&gt;内网搭建 Master 和公网类似，只不过为了安全将所有 &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0.0&lt;/code&gt; 的地址全部换成内网 IP 即可，以下为内网的配置信息&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# By default, this file should be stored in /etc/teleport.yaml&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This section of the configuration file applies to all teleport&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# services.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;teleport&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# nodename allows to assign an alternative name this node can be reached by.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# by default it's equal to hostname&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;nodename&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mritd.test1&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Data directory where Teleport keeps its data, like keys/users for&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# authentication (if using the default BoltDB back-end)&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;data_dir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/data/teleport&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# one-time invitation token used to join a cluster. it is not used on&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# subsequent starts&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;auth_token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jYektagNTmhjv9Dh&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# when running in multi-homed or NATed environments Teleport nodes need&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# to know which IP it will be reachable at by other nodes&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;advertise_ip&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;172.16.0.80&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# list of auth servers in a cluster. you will have more than one auth server&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# if you configure teleport auth to run in HA configuration&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;auth_servers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;172.16.0.80:3025&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Teleport throttles all connections to avoid abuse. These settings allow&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# you to adjust the default limits&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;connection_limits&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;max_connections&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1000&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;max_users&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;250&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Logging configuration. Possible output values are 'stdout', 'stderr' and&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 'syslog'. Possible severity values are INFO, WARN and ERROR (default).&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;stdout&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;severity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;INFO&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Type of storage used for keys. You need to configure this to use etcd&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# backend if you want to run Teleport in HA configuration.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bolt&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Cipher algorithms that the server supports. This section only needs to be&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# set if you want to override the defaults. &lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ciphers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aes128-ctr&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aes192-ctr&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aes256-ctr&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aes128-gcm@openssh.com&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;arcfour256&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;arcfour128&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Key exchange algorithms that the server supports. This section only needs&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# to be set if you want to override the defaults.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;kex_algos&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;curve25519-sha256@libssh.org&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ecdh-sha2-nistp256&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ecdh-sha2-nistp384&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ecdh-sha2-nistp521&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;diffie-hellman-group14-sha1&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;diffie-hellman-group1-sha1&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Message authentication code (MAC) algorithms that the server supports.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# This section only needs to be set if you want to override the defaults.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mac_algos&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hmac-sha2-256-etm@openssh.com&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hmac-sha2-256&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hmac-sha1&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hmac-sha1-96&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This section configures the 'auth service':&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;auth_service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Turns 'auth' role on. Default is 'yes'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;authentication&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# default authentication type. possible values are 'local', 'oidc' and 'saml'&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# only local authentication (Teleport's own user DB) is supported in the open&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# source version&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;local&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# second_factor can be off, otp, or u2f&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;second_factor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;otp&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# this section is used if second_factor is set to 'u2f'&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#u2f:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    # app_id must point to the URL of the Teleport Web UI (proxy) accessible&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    # by the end users&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    app_id: https://localhost:3080&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    # facets must list all proxy servers if there are more than one deployed&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    facets:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    - https://localhost:3080&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# IP and the port to bind to. Other Teleport nodes will be connecting to&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# this port (AKA &quot;Auth API&quot; or &quot;Cluster API&quot;) to validate client&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# certificates&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;listen_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;172.16.0.80:3025&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Pre-defined tokens for adding new nodes to a cluster. Each token specifies&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# the role a new node will be allowed to assume. The more secure way to&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# add nodes is to use `ttl node add --ttl` command to generate auto-expiring&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# tokens.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# We recommend to use tools like `pwgen` to generate sufficiently random&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# tokens of 32+ byte length.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;proxy,node:jYektagNTmhjv9Dh&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;auth:jYektagNTmhjv9Dh&quot;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Optional &quot;cluster name&quot; is needed when configuring trust between multiple&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# auth servers. A cluster name is used as part of a signature in certificates&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# generated by this CA.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# By default an automatically generated GUID is used.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# IMPORTANT: if you change cluster_name, it will invalidate all generated&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# certificates and keys (may need to wipe out /var/lib/teleport directory)&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;cluster_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;nat&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This section configures the 'node service':&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;ssh_service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Turns 'ssh' role on. Default is 'yes'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# IP and the port for SSH service to bind to.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;listen_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;172.16.0.80:3022&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# See explanation of labels in &quot;Labeling Nodes&quot; section below&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# List of the commands to periodically execute. Their output will be used as node labels.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# See &quot;Labeling Nodes&quot; section below for more information.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;arch&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;# this command will add a label like 'arch=x86_64' to a node&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;uname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;-p&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;period&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1h0m0s&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# enables reading ~/.tsh/environment before creating a session. by default&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# set to false, can be set true here or as a command line flag.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;permit_user_env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This section configures the 'proxy servie'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;proxy_service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Turns 'proxy' role on. Default is 'yes'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# SSH forwarding/proxy address. Command line (CLI) clients always begin their&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# SSH sessions by connecting to this port&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;listen_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;172.16.0.80:3023&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Reverse tunnel listening address. An auth server (CA) can establish an&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# outbound (from behind the firewall) connection to this address.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# This will allow users of the outside CA to connect to behind-the-firewall&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# nodes.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tunnel_listen_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;172.16.0.80:3024&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# The HTTPS listen address to serve the Web UI and also to authenticate the&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# command line (CLI) users via password+HOTP&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;web_listen_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;172.16.0.80:3080&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# TLS certificate for the HTTPS connection. Configuring these properly is&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# critical for Teleport security.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#https_key_file: /var/lib/teleport/webproxy_key.pem&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#https_cert_file: /var/lib/teleport/webproxy_cert.pem&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;配置完成后直接启动即可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;teleport
systemctl start teleport
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;五将内网集群链接至公网&quot;&gt;五、将内网集群链接至公网&lt;/h3&gt;

&lt;p&gt;上文已经讲过，Teleport 通过公网链接内网主机的方式是让内网集群向公网打通一条 ssh 隧道，然后再进行通讯；具体配置如下&lt;/p&gt;

&lt;h4 id=&quot;51公网-master-开启授信集群&quot;&gt;5.1、公网 Master 开启授信集群&lt;/h4&gt;

&lt;p&gt;在公网 Master 增加 Token 配置，以允许持有该 Token 的其他内网集群连接到此，修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/teleport/teleport.yaml&lt;/code&gt; 增加一个 token 即可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tokens:
    - &lt;span class=&quot;s2&quot;&gt;&quot;proxy,node:jYektagNTmhjv9Dh&quot;&lt;/span&gt;
    - &lt;span class=&quot;s2&quot;&gt;&quot;auth:jYektagNTmhjv9Dh&quot;&lt;/span&gt;
    - &lt;span class=&quot;s2&quot;&gt;&quot;trusted_cluster:xiomwWcrKinFw4Vs&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后重启 Teleport&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl restart teleport
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;52内网-master-链接公网-master&quot;&gt;5.2、内网 Master 链接公网 Master&lt;/h4&gt;

&lt;p&gt;当公网集群开启了允许其他集群链接后，内网集群只需要创建配置进行连接即可，创建配置(cluster.yaml)如下&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# cluster.yaml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;trusted_cluster&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v2&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# the trusted cluster name MUST match the 'cluster_name' setting of the&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# cluster&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;local_cluster&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# this field allows to create tunnels that are disabled, but can be enabled later.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# the token expected by the &quot;main&quot; cluster:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;xiomwWcrKinFw4Vs&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# the address in 'host:port' form of the reverse tunnel listening port on the&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# &quot;master&quot; proxy server:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;tunnel_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;92.223.67.84:3024&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# the address in 'host:port' form of the web listening port on the&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# &quot;master&quot; proxy server:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;web_proxy_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;92.223.67.84:3080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行以下命令使内网集群通过 ssh 隧道连接到公网集群&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tctl &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; /etc/teleport/teleport.yaml create /etc/teleport/cluster.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意，如果在启动公网和内网集群时没有指定受信的证书( &lt;code class=&quot;highlighter-rouge&quot;&gt;https_cert_file&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;https_key_file&lt;/code&gt; )，那么默认 Teleport 将会生成一个自签名证书，此时在 create 受信集群时将会产生如下错误:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;the trusted cluster uses misconfigured HTTP/TLS certificate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时需要在 &lt;strong&gt;待添加集群(内网)&lt;/strong&gt; 启动时增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;--insecure&lt;/code&gt; 参数，即 Systemd 配置修改如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unit]
&lt;span class=&quot;nv&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Teleport SSH Service
&lt;span class=&quot;nv&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;network.target

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Service]
&lt;span class=&quot;nv&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;simple
&lt;span class=&quot;nv&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always
&lt;span class=&quot;nv&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/bin/teleport start &lt;span class=&quot;nt&quot;&gt;--insecure&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; /etc/teleport/teleport.yaml

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Install]
&lt;span class=&quot;nv&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后再进行 create 就不会报错&lt;/p&gt;

&lt;h3 id=&quot;六添加其他节点&quot;&gt;六、添加其他节点&lt;/h3&gt;

&lt;p&gt;两台节点打通后，此时如果有其他机器则可以将其加入到对应集群中，以下以另一台内网机器为例&lt;/p&gt;

&lt;p&gt;由于在主节点 &lt;code class=&quot;highlighter-rouge&quot;&gt;auth_service&lt;/code&gt; 中已经预先指定了一个 static Token 用于其他节点加入( &lt;code class=&quot;highlighter-rouge&quot;&gt;proxy,node:jYektagNTmhjv9Dh&lt;/code&gt; )，所以其他节点只需要使用这个 Token 加入即可，在另一台内网主机上修改 Systemd 配置如下，然后启动即可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unit]
&lt;span class=&quot;nv&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Teleport SSH Service
&lt;span class=&quot;nv&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;network.target

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Service]
&lt;span class=&quot;nv&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;simple
&lt;span class=&quot;nv&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always
&lt;span class=&quot;nv&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/bin/teleport start &lt;span class=&quot;nt&quot;&gt;--roles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;node,proxy &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                                        &lt;span class=&quot;nt&quot;&gt;--token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;jYektagNTmhjv9Dh &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                                        &lt;span class=&quot;nt&quot;&gt;--auth-server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;172.16.0.80

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Install]
&lt;span class=&quot;nv&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时在内网的 Master 上可以查看到 Node 已经加入&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;test1.node ➜ tctl &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; /etc/teleport/teleport.yaml nodes &lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;Hostname    UUID                                 Address          Labels
&lt;span class=&quot;nt&quot;&gt;-----------&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;------------------------------------&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;----------------&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-----------------------&lt;/span&gt;
test2.node  abc786fe-9a60-4480-80f7-8edc20710e58 172.16.0.81:3022
mritd.test1 be9080fb-bdba-4823-9fb6-294e0b0dcce3 172.16.0.80:3022 &lt;span class=&quot;nv&quot;&gt;arch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;x86_64,role&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;七连接测试&quot;&gt;七、连接测试&lt;/h3&gt;

&lt;h4 id=&quot;71web-测试&quot;&gt;7.1、Web 测试&lt;/h4&gt;

&lt;p&gt;Teleport 支持 Web 页面访问，直接访问 &lt;code class=&quot;highlighter-rouge&quot;&gt;https://公网IP:3080&lt;/code&gt;，然后登陆即可，登陆后如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/9yf6k.png&quot; alt=&quot;Web login&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过 Cluster 选项可以切换不同集群，点击后面的用户名可以选择不同用户登录到不同主机(用户授权在添加用户时控制)，登陆成功后如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/m7hz5.png&quot; alt=&quot;Login Success&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过 Teleport 进行的所有操作可以通过审计菜单进行操作回放&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/c8a74.png&quot; alt=&quot;Audit&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;72命令行测试&quot;&gt;7.2、命令行测试&lt;/h4&gt;

&lt;p&gt;类 Uninx 系统下我们还是习惯使用终端登录，终端登录需要借助 Teleport 的命令行工具 &lt;code class=&quot;highlighter-rouge&quot;&gt;tsh&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;tsh&lt;/code&gt; 在下载的 release 压缩版中已经有了，具体使用文档请自行 help 和参考官方文档，以下为简单的使用示例&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;登录跳板机: 短时间内只需要登录一次即可，登录时需要输入密码及 OTP 口令&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TELEPORT_PROXY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;92.223.67.84
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TELEPORT_USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mritd
tsh login &lt;span class=&quot;nt&quot;&gt;--insecure&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;登录主机: 完成上一步 login 后就可以免密码登录任意主机&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# cluster 名字是上面设置的，在 web 界面也能看到&lt;/span&gt;
tsh ssh &lt;span class=&quot;nt&quot;&gt;--cluster&lt;/span&gt; nat root@test2.node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;复制文件: &lt;strong&gt;复制文件时不显示进度，并非卡死&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tsh scp &lt;span class=&quot;nt&quot;&gt;--cluster&lt;/span&gt; nat teleport-v2.3.5-linux-amd64-bin.tar.gz root@test2.node:/

-&amp;gt; teleport-v2.3.5-linux-amd64-bin.tar.gz &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;16797035&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;</content><author><name>Jevic</name></author><summary type="html">由于业务需求，以前账号管理混乱，所以很多人有生产服务器的 root 权限；所以目前需要一个能 ssh 登录线上服务器的工具，同时具有简单的审计功能；找了好久找到了这个小工具，以下记录一下搭建教程</summary></entry><entry><title type="html">Kubernetes 深度学习笔记</title><link href="http://0.0.0.0/2017/11/03/deep-learning-on-kubernetes/" rel="alternate" type="text/html" title="Kubernetes 深度学习笔记" /><published>2017-11-03T17:37:13+08:00</published><updated>2017-11-03T17:37:13+08:00</updated><id>http://0.0.0.0/2017/11/03/deep-learning-on-kubernetes</id><content type="html" xml:base="http://0.0.0.0/2017/11/03/deep-learning-on-kubernetes/">&lt;blockquote&gt;
  &lt;p&gt;本文主要记录下 Kubernetes 下运行深度学习框架如 Tensorflow、Caffe2 等一些坑，纯总结性文档&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;一先决条件&quot;&gt;一、先决条件&lt;/h3&gt;

&lt;p&gt;Kubernetes 运行深度学习应用实际上要解决的唯一问题就是 GPU 调用，以下只描述 Nvidia 相关的问题以及解决方法；要想完成 Kubernetes 对 GPU 调用，首先要满足以下条件:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Nvidia 显卡驱动安装正确&lt;/li&gt;
  &lt;li&gt;CUDA 安装正确&lt;/li&gt;
  &lt;li&gt;Nvidia Docker 安装正确&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于 Nvidia 驱动和 CUDA 请自行查找安装方法，如果这两部都搞不定，那么不用继续了&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;还有一点需要注意: &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/lib&lt;/code&gt; 这个目录不能处于单独分区中，具体原因下面阐述&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;二nvidia-docker-安装&quot;&gt;二、Nvidia Docker 安装&lt;/h3&gt;

&lt;p&gt;在安装 Nvidia Docker 之前，请确保 Nvidia 驱动以及 CUDA 安装成功，并且 &lt;code class=&quot;highlighter-rouge&quot;&gt;nvidia-smi&lt;/code&gt; 能正确显示，如下图所示(来源于网络)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNc79ly1fl3vz0yt6tj30wy0mg4qp.jpg&quot; alt=&quot;nvidia-smi&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nvidia Docker 安装极其简单，具体可参考 &lt;a href=&quot;https://github.com/NVIDIA/nvidia-docker&quot;&gt;官方文档&lt;/a&gt;，安装完成后请自行按照官方文档描述进行测试，这一步一般不会出现问题&lt;/p&gt;

&lt;p&gt;如果测试成功后，&lt;strong&gt;请查看 &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/lib/nvidia-docker/volumes&lt;/code&gt;&lt;/strong&gt; 目录下是否有文件，&lt;strong&gt;如果没有，那就意味着 Nvidia Docker 并未生成相关的驱动文件成功，需要单独执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker volume create --driver=nvidia-docker --name=nvidia_driver_$(modinfo -F version nvidia)&lt;/code&gt; 以生成该文件；该命令生成的方式是将已经安装到系统的相关文件硬链接至此，所以要求 &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/lib&lt;/code&gt; 目录不能在单独的分区&lt;/strong&gt;；驱动生成完成后应该会产生类似 &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/lib/nvidia-docker/volumes/nvidia_driver/375.66&lt;/code&gt; 的目录结构&lt;/p&gt;

&lt;h3 id=&quot;三kubernetes-配置&quot;&gt;三、Kubernetes 配置&lt;/h3&gt;

&lt;p&gt;当所有基础环境就绪后，最后需要开启 Kubernetes 对 GPU 支持；Kubernetes GPU 文档可以参考 &lt;a href=&quot;https://kubernetes.io/docs/tasks/manage-gpus/scheduling-gpus&quot;&gt;这里&lt;/a&gt;，实际主要就是在 kubelet 启动时增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;--feature-gates=&quot;Accelerators=true&quot;&lt;/code&gt; 参数，如下所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcly1fl4zj170jxj31is0z8ahj.jpg&quot; alt=&quot;Accelerators&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所有节点全部修改完成后重启 kubelet 即可，&lt;strong&gt;如果一台机器上有不同型号的显卡，同时希望 Pod 能区别使用不同的 GPU 则可以按照 &lt;a href=&quot;https://kubernetes.io/docs/tasks/manage-gpus/scheduling-gpus/#api&quot;&gt;官方文档&lt;/a&gt; 增加相应设置&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;四deployment-设置&quot;&gt;四、Deployment 设置&lt;/h3&gt;

&lt;p&gt;Deployment 部署采用一个 Tensorflow 镜像作为示例，部署配置如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: tensorflow
  labels:
    name: tensorflow
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: tensorflow
    spec:
      containers:
        - name: tensorflow
          image: tensorflow/tensorflow:1.4.0-rc0-gpu
          imagePullPolicy: IfNotPresent
          &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bash&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;-c&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;sleep 999999&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
          ports:
            - name: tensorflow
              containerPort: 8888
          resources: 
            limits: 
              alpha.kubernetes.io/nvidia-gpu: 1
          volumeMounts:
            - mountPath: /usr/local/nvidia
              name: nvidia-driver
            - mountPath: /dev/nvidia0
              name: nvidia0
            - mountPath: /dev/nvidia-uvm
              name: nvidia-uvm
            - mountPath: /dev/nvidia-uvm-tools
              name: nvidia-uvm-tools
            - mountPath: /dev/nvidiactl
              name: nvidiactl
      volumes:
        - name: nvidia-driver
          hostPath:
            path: /var/lib/nvidia-docker/volumes/nvidia_driver/375.66
        - name: nvidia0
          hostPath:
            path: /dev/nvidia0
        - name: nvidia-uvm
          hostPath:
            path: /dev/nvidia-uvm
        - name: nvidia-uvm-tools
          hostPath:
            path: /dev/nvidia-uvm-tools
        - name: nvidiactl
          hostPath:
            path: /dev/nvidiactl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Deployment 中运行的 Pod 需要挂载对应的宿主机设备文件以及驱动文件才能正确的调用宿主机 GPU，所以一定要确保前几步生成的相关驱动文件等没问题；如果有多个 nvidia 显卡的话可能需要挂载多个 nvidia 设备&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pod 运行成功后可执行以下代码测试 GPU 调用&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tensorflow&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Hello, TensorFlow!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;成功后截图如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcly1fl501nwxhyj31kw0ti7nd.jpg&quot; alt=&quot;Tensorflow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;</content><author><name>Jevic</name></author><summary type="html">本文主要记录下 Kubernetes 下运行深度学习框架如 Tensorflow、Caffe2 等一些坑，纯总结性文档</summary></entry><entry><title type="html">Kubernetes 1.8 kube-proxy 开启 ipvs</title><link href="http://0.0.0.0/2017/10/10/kube-proxy-use-ipvs-on-kubernetes-1.8/" rel="alternate" type="text/html" title="Kubernetes 1.8 kube-proxy 开启 ipvs" /><published>2017-10-10T17:19:04+08:00</published><updated>2017-10-10T17:19:04+08:00</updated><id>http://0.0.0.0/2017/10/10/kube-proxy-use-ipvs-on-kubernetes-1.8</id><content type="html" xml:base="http://0.0.0.0/2017/10/10/kube-proxy-use-ipvs-on-kubernetes-1.8/">&lt;blockquote&gt;
  &lt;p&gt;Kubernetes 1.8 发布已经好几天，1.8 对于 kube-proxy 组件增加了 ipvs 支持，以下记录一下 kube-proxy ipvs 开启教程&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;一环境准备&quot;&gt;一、环境准备&lt;/h3&gt;

&lt;p&gt;目前测试为 5 台虚拟机，CentOS 系统，etcd、kubernetes 全部采用 rpm 安装，使用 systemd 来做管理，网络组件采用 calico，Master 实现了 HA；基本环境如下&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;IP&lt;/th&gt;
      &lt;th&gt;组件&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;10.10.1.5&lt;/td&gt;
      &lt;td&gt;Master、Node、etcd&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.10.1.6&lt;/td&gt;
      &lt;td&gt;Master、Node、etcd&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.10.1.7&lt;/td&gt;
      &lt;td&gt;Master、Node、etcd&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.10.1.8&lt;/td&gt;
      &lt;td&gt;Node&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.10.1.9&lt;/td&gt;
      &lt;td&gt;Node&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;二注意事项&quot;&gt;二、注意事项&lt;/h3&gt;

&lt;p&gt;之所以把这个单独写一个标题是因为坑有点多，为了避免下面出现问题，先说一下注意事项:&lt;/p&gt;

&lt;h4 id=&quot;21selinux&quot;&gt;2.1、SELinux&lt;/h4&gt;

&lt;p&gt;如果对 SELinux 玩的不溜的朋友，我建议先关闭  SELinux，关闭方法如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 编辑 /etc/selinux/config 文件；确保 SELINUX=disabled&lt;/span&gt;
docker1.node ➜  ~ &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/selinux/config

&lt;span class=&quot;c&quot;&gt;# This file controls the state of SELinux on the system.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# SELINUX= can take one of these three values:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#     enforcing - SELinux security policy is enforced.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#     permissive - SELinux prints warnings instead of enforcing.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#     disabled - No SELinux policy is loaded.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SELINUX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;disabled
&lt;span class=&quot;c&quot;&gt;# SELINUXTYPE= can take one of three two values:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#     targeted - Targeted processes are protected,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#     minimum - Modification of targeted policy. Only selected processes are protected.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#     mls - Multi Level Security protection.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SELINUXTYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;targeted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;然后重启机器并验证&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker1.node ➜  ~ sestatus
SELinux status:                 disabled
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;22firewall&quot;&gt;2.2、Firewall&lt;/h4&gt;

&lt;p&gt;搭建时尽量关闭防火墙，如果你玩的很溜，那么请在测试没问题后再开启防火墙&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl stop firewalld
systemctl disable firewalld
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;23内核参数调整&quot;&gt;2.3、内核参数调整&lt;/h4&gt;

&lt;p&gt;确保内核已经开启如下参数，或者说确保 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/sysctl.conf&lt;/code&gt; 有如下配置&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker1.node ➜  ~ &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/sysctl.conf
&lt;span class=&quot;c&quot;&gt;# sysctl settings are defined through files in&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# /usr/lib/sysctl.d/, /run/sysctl.d/, and /etc/sysctl.d/.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Vendors settings live in /usr/lib/sysctl.d/.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# To override a whole file, create a new file with the same in&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# /etc/sysctl.d/ and put new settings there. To override&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# only specific settings, add a file with a lexically later&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# name in /etc/sysctl.d/ and put new settings there.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# For more information, see sysctl.conf(5) and sysctl.d(5).&lt;/span&gt;
net.ipv4.ip_forward&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
net.bridge.bridge-nf-call-iptables&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
net.bridge.bridge-nf-call-ip6tables&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;sysctl -p&lt;/code&gt; 使之生效&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker1.node ➜  ~ sysctl &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;
net.ipv4.ip_forward &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
net.bridge.bridge-nf-call-iptables &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
net.bridge.bridge-nf-call-ip6tables &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;24内核模块加载&quot;&gt;2.4、内核模块加载&lt;/h4&gt;

&lt;p&gt;由于 ipvs 已经加入到内核主干，所以需要内核模块支持，请确保内核已经加载了相应模块；如不确定，执行以下脚本，以确保内核加载相应模块，&lt;strong&gt;否则会出现 &lt;code class=&quot;highlighter-rouge&quot;&gt;failed to load kernel modules: [ip_vs_rr ip_vs_sh ip_vs_wrr]&lt;/code&gt; 错误&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /etc/sysconfig/modules/ipvs.modules &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
#!/bin/bash
ipvs_modules=&quot;ip_vs ip_vs_lc ip_vs_wlc ip_vs_rr ip_vs_wrr ip_vs_lblc ip_vs_lblcr ip_vs_dh ip_vs_sh ip_vs_fo ip_vs_nq ip_vs_sed ip_vs_ftp nf_conntrack_ipv4&quot;
for kernel_module in \&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ipvs_modules&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;; do
    /sbin/modinfo -F filename \&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kernel_module&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
    if [ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; -eq 0 ]; then
        /sbin/modprobe \&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kernel_module&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
    fi
done
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;chmod 755 /etc/sysconfig/modules/ipvs.modules &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; bash /etc/sysconfig/modules/ipvs.modules &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; lsmod | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;ip_vs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行后应该如下图所示，&lt;strong&gt;如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;lsmod | grep ip_vs&lt;/code&gt; 并未出现 &lt;code class=&quot;highlighter-rouge&quot;&gt;ip_vs_rr&lt;/code&gt; 等模块；那么请更换内核(一般不会，2.6 以后 ipvs 好像已经就合并进主干了)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/49wbb.jpg&quot; alt=&quot;Load kernel modules&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;三开启-ipvs-支持&quot;&gt;三、开启 ipvs 支持&lt;/h3&gt;

&lt;h4 id=&quot;31修改配置&quot;&gt;3.1、修改配置&lt;/h4&gt;

&lt;p&gt;修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/kubernetes/proxy&lt;/code&gt; 配置如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;###&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# kubernetes proxy config&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# default config should be adequate&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Add your own!&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_PROXY_ARGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--bind-address=10.10.1.8 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --hostname-override=docker4.node &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --masquerade-all &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --feature-gates=SupportIPVSProxyMode=true &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --proxy-mode=ipvs &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --ipvs-min-sync-period=5s &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --ipvs-sync-period=5s &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --ipvs-scheduler=rr &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --cluster-cidr=10.254.0.0/16&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;启用 ipvs 后与 1.7 版本的配置差异如下：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;--feature-gates=SupportIPVSProxyMode=true&lt;/code&gt; 选项，用于告诉 kube-proxy 开启 ipvs 支持，因为目前 ipvs 并未稳定&lt;/li&gt;
  &lt;li&gt;增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;ipvs-min-sync-period&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;--ipvs-sync-period&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;--ipvs-scheduler&lt;/code&gt; 三个参数用于调整 ipvs，具体参数值请自行查阅 ipvs 文档&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;--masquerade-all&lt;/code&gt; 选项，以确保反向流量通过&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;重点说一下 &lt;code class=&quot;highlighter-rouge&quot;&gt;--masquerade-all&lt;/code&gt; 选项: kube-proxy ipvs 是基于 NAT 实现的，当创建一个 service 后，kubernetes 会在每个节点上创建一个网卡，同时帮你将 Service IP(VIP) 绑定上，此时相当于每个 Node 都是一个 ds，而其他任何 Node 上的 Pod，甚至是宿主机服务(比如 kube-apiserver 的 6443)都可能成为 rs；按照正常的 lvs nat 模型，所有 rs 应该将 ds 设置成为默认网关，以便数据包在返回时能被 ds 正确修改；在 kubernetes 将 vip 设置到每个 Node 后，默认路由显然不可行，所以要设置 &lt;code class=&quot;highlighter-rouge&quot;&gt;--masquerade-all&lt;/code&gt; 选项，以便反向数据包能通过&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;以上描述可能并不精准，具体请看 &lt;a href=&quot;https://docs.google.com/document/d/1YEBWR4EWeCEWwxufXzRM0e82l_lYYzIXQiSayGaVQ8M/edit?usp=sharing&quot;&gt;Google 文档&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;32测试-ipvs&quot;&gt;3.2、测试 ipvs&lt;/h4&gt;

&lt;p&gt;修改完成后，重启 kube-proxy 使其生效&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl daemon-reload
systemctl restart kube-proxy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;重启后日志中应该能看到如下输出，不应该有其他提示 ipvs 的错误信息出现&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/o05rq.jpg&quot; alt=&quot;kube-proxy ipvs log&quot; /&gt;&lt;/p&gt;

&lt;p&gt;同时使用 ipvsadm 命令应该能看到相应的 service 的 ipvs 规则(ipvsadm 自己安装一下)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/d1ilk.jpg&quot; alt=&quot;ipvs role&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后进入 Pod 测试&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/42pjm.jpg&quot; alt=&quot;test ipvs1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;最后说一点: ipvs 尚未稳定，请慎用；而且 &lt;code class=&quot;highlighter-rouge&quot;&gt;--masquerade-all&lt;/code&gt; 选项与 Calico 安全策略控制不兼容，请酌情考虑使用(Calico 在做网络策略限制的时候要求不能开启此选项)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;</content><author><name>Jevic</name></author><summary type="html">Kubernetes 1.8 发布已经好几天，1.8 对于 kube-proxy 组件增加了 ipvs 支持，以下记录一下 kube-proxy ipvs 开启教程</summary></entry></feed>